import{_ as n,c as a,a as l,o as e}from"./app-5eYbtFQ0.js";const p="/assets/react-router%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F-CFLigZr6.jpg",o="/assets/react-router%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1-BEhNwp3K.jpg",c="/assets/react-router%E8%B7%B3%E8%BD%AC%E8%B7%AF%E7%94%B1-BKkPn9JS.jpg",t="/assets/react-router%E6%87%92%E5%8A%A0%E8%BD%BD-B2S47Bbi.jpg",r={};function i(D,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="react小记" tabindex="-1"><a class="header-anchor" href="#react小记"><span>React小记</span></a></h1><h2 id="一、react使用" tabindex="-1"><a class="header-anchor" href="#一、react使用"><span>一、React使用</span></a></h2><h3 id="_1、react基本使用" tabindex="-1"><a class="header-anchor" href="#_1、react基本使用"><span>1、React基本使用</span></a></h3><h4 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx"><span>JSX</span></a></h4><p>React发明了JSX，利用HTML语法来创建虚拟DOM。</p><p><strong>JSX（JavaScript XML）</strong> 是一个 JavaScript 的语法扩展，允许在 JavaScript 代码中通过类 HTML 语法创建 React 元素。它需要通过 Babel 等工具编译为标准的 JavaScript 代码，最终生成 <strong>React 元素对象</strong>（React Element），这些元素共同构成虚拟 DOM（Virtual DOM）树。</p><p><strong>JSX的优点</strong></p><ul><li>JSX执行更快，因为它在编译为JS代码进行了优化</li><li>它是类型安全的，在编译过程中就能发现错误 <ul><li>React DOM 在渲染所有输入内容之前，默认会进行转义。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止XSS（cross-site-scripting, 跨站脚本）攻击。</li></ul></li><li>使用JSX编写模板更加简单快速</li></ul><p><strong>JSX语法</strong></p><p><strong>1、变量、表达式</strong></p><p>我们可以在JSX中使用JS表达式（不能适用于语句），表达式写在大括号“{}”中</p><ul><li><p><code>{2+2}</code> <code>{user.firstName}</code> <code>{formatName(user)}</code></p></li><li><p>在JSX中不能使用if-else语句，但可以使用conditional（三元运算）表达式来替代</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> show</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">{</span><span style="color:#9CDCFE;">show</span><span style="color:#D4D4D4;"> ? </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">img</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;xxx.png&quot;</span><span style="color:#808080;">/&gt;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>循环</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> list</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">item</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>2、样式</strong></p><ul><li><p>React推荐使用内联样式。我们可以使用camelCase语法设置内联样式。</p><p>React会在指定元素数字后自动添加px</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> myStyle</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    fontSize:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">,  </span><span style="color:#6A9955;">// css中为font-size</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    color:</span><span style="color:#CE9178;"> &#39;#FF0000&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#9CDCFE;"> style</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">myStyle</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#9CDCFE;"> style</span><span style="color:#F44747;"> =</span><span style="color:#9CDCFE;"> {{background: red;}}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;"> //两个大括号</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">red</span><span style="color:#D4D4D4;">-</span><span style="color:#9CDCFE;">btn</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    background</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">red</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#9CDCFE;"> className</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;red-btn&#39;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;">  // 使用className而不是class</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>3、注释</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">{</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // （单行注释要换行）</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、数组</strong></p><p>JSX允许在模板中插入数组，数组会自动展开所有成员</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">arr</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5、原生HTML</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">\`&lt;h1&gt;hello&lt;/h1&gt;\`</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">li</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleItemDelete</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    dangerouslySetInnerHTML</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">__html</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">item</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="state和setstate" tabindex="-1"><a class="header-anchor" href="#state和setstate"><span>state和setState</span></a></h4><ul><li><p>不要直接修改state</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">comment</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// wrong</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    comment:</span><span style="color:#CE9178;"> &#39;hello&#39;</span><span style="color:#D4D4D4;">;  </span><span style="color:#6A9955;">//right</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数是唯一可以给this.state赋值的地方</p></li><li><p>State 的更新可能是异步的</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 联想 Vue $nextTick - DOM</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;count by callback&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 回调函数中可以拿到最新的 state</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;count&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 异步的，拿不到最新值</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// setTimeout 中 setState 是同步的</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        count:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;count in setTimeout&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 自己定义的 DOM 事件，setState 是同步的</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">bodyClickHandler</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        count:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;count in body event&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">componentDidMount</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 自己定义的 DOM 事件，setState 是同步的</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bodyClickHandler</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">componentWillUnmount</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 及时销毁自定义 DOM 事件</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bodyClickHandler</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // clearTimeout</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。 因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。 例如，此代码可能会无法更新计数器</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// Wrong</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  counter:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counter</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">increment</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要解决这个问题，可以让 setState() 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// Correct</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  counter:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counter</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">increment</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}));</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可能会被合并</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 传入对象，会被合并（类似 Object.assign ）。执行结果只一次 +1</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 传入函数，不会被合并。执行结果是 +3</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">prevState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        count:</span><span style="color:#9CDCFE;"> prevState</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">prevState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        count:</span><span style="color:#9CDCFE;"> prevState</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">prevState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        count:</span><span style="color:#9CDCFE;"> prevState</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期"><span>组件生命周期</span></a></h4><p><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener noreferrer">React 组件生命周期图示</a></p><ul><li>constructor：在组件一创建的时刻就被调用。但不归类在React的生命周期中，因为它是ES6里面的东西，不是React独有的。</li><li>componentWillMount：在组件即将被挂载到页面的时刻自动执行。</li><li>componentDidMount：在组件被挂载后自动执行。</li><li>shouldComponentUpdate：组件被更新之前，自动被执行需要返回一个布尔值。true 更新 false 不会被更新</li><li>componentWillUpdate：组件被更新之前，它会自动执行，但是它在shouldComponentUpdate之后被执行，如果返回true就执行，如果返回false，这个函数就不会被执行了。</li><li>componentDidUpdate：组件被更新之后自动执行。</li><li>componentWillReceiveProps：一个组件要从父组件接受参数。只要父组件的render函数被重新执行了，子组件的这个生命周期函数就会被执行（如果这个组件第一次存在与父组件中，不会执行；如果这个组件之前已经存在于父组件中，才会执行）</li><li>componentWillUnmount：当这个组件即将被从页面中剔除的时候，会被执行。</li></ul><h4 id="循环列表中元素的-key" tabindex="-1"><a class="header-anchor" href="#循环列表中元素的-key"><span>循环列表中元素的 key</span></a></h4><p>循环列表中元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。</p><p>通常，我们使用来自数据 id 来作为元素的 key：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> todoItems</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">todos</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    {</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">text</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> todoItems</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">todos</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // Only do this if items have no stable IDs</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    {</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">text</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**循环中的key值最好不是index，原始虚拟DOM树和新的虚拟DOM树的key值一致能提升虚拟DOM比对的性能，而列表项目的顺序可能会变化，index是不稳定的，经常会改变。使用index做key值会导致性能变差，还可能引起组件状态的问题。**如果你选择不指定显式的 key 值，那么 React 将默认使用索引用作为列表项目的 key 值。</p><h4 id="组件通讯方式" tabindex="-1"><a class="header-anchor" href="#组件通讯方式"><span>组件通讯方式</span></a></h4><h5 id="父组件通过props向子组件传递数据" tabindex="-1"><a class="header-anchor" href="#父组件通过props向子组件传递数据"><span><strong>父组件通过props向子组件传递数据</strong></span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Parent</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> message</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;Hello from Parent&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">Child</span><span style="color:#9CDCFE;"> message</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">message</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Child</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">message</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="子组件通过回调函数向父组件传递数据" tabindex="-1"><a class="header-anchor" href="#子组件通过回调函数向父组件传递数据"><span><strong>子组件通过回调函数向父组件传递数据</strong></span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Parent</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> handleData</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Data from Child:&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">Child</span><span style="color:#9CDCFE;"> onSendData</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">handleData</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Child</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> onSendData</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello from Child&#39;</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Send Data</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="父组件使用refs调用子组件暴露的方法" tabindex="-1"><a class="header-anchor" href="#父组件使用refs调用子组件暴露的方法"><span><strong>父组件使用refs调用子组件暴露的方法</strong></span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useRef</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">forwardRef</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useImperativeHandle</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> Child</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">forwardRef</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 暴露方法给父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  useImperativeHandle</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    sayHello</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello from Child Component!&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }))</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Child Component</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Parent</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> childRef</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useRef</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> handleClick</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">childRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      childRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayHello</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Child</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">childRef</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">handleClick</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Call Child Method</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> Parent</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="通过context进行跨组件通信" tabindex="-1"><a class="header-anchor" href="#通过context进行跨组件通信"><span><strong>通过Context进行跨组件通信</strong></span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 创建一个 Context</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> MyContext</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createContext</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Parent</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">sharedData</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setSharedData</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello from Context&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> updateData</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setSharedData</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Updated Data from Context&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 提供数据和更新函数</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">MyContext.Provider</span><span style="color:#9CDCFE;"> value</span><span style="color:#F44747;">={{ sharedData, updateData }}&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">      &lt;ChildA</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;/</span><span style="color:#9CDCFE;">MyContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Provider</span><span style="color:#D4D4D4;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件 A（引用子组件 B）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ChildA</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">ChildB</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件 B（使用 useContext）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ChildB</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">sharedData</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">updateData</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">useContext</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">MyContext</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">ChildB: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">sharedData</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">updateData</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Update Data</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> Parent</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="使用状态管理库进行通信" tabindex="-1"><a class="header-anchor" href="#使用状态管理库进行通信"><span><strong>使用状态管理库进行通信</strong></span></a></h5><ul><li><p><strong>React Context + useReducer</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useReducer</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> initialState</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> reducer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  switch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    case</span><span style="color:#CE9178;"> &#39;increment&#39;</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    case</span><span style="color:#CE9178;"> &#39;decrement&#39;</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    default</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      throw</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Error</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> CounterContext</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createContext</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> CounterProvider</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;"> }) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">dispatch</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useReducer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">initialState</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">CounterContext.Provider</span><span style="color:#9CDCFE;"> value</span><span style="color:#F44747;">={{ state, dispatch }}&gt;{children}&lt;/CounterContext.Provider&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">function</span><span style="color:#F44747;"> Counter()</span><span style="color:#569CD6;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  const</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">useContext</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">CounterContext</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      Count: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;increment&#39;</span><span style="color:#D4D4D4;"> })</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">+</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;decrement&#39;</span><span style="color:#D4D4D4;"> })</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">-</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">function</span><span style="color:#F44747;"> App()</span><span style="color:#569CD6;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">CounterProvider</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Counter</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">CounterProvider</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">export</span><span style="color:#9CDCFE;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Redux</strong>：使用 <code>Redux Toolkit</code> 简化 Redux 开发。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createSlice</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">configureStore</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@reduxjs/toolkit&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> counterSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createSlice</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;counter&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  initialState:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">value:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  reducers:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    increment</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> += </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    decrement</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> -= </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">increment</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">decrement</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">counterSlice</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">actions</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">configureStore</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  reducer:</span><span style="color:#9CDCFE;"> counterSlice</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">()))</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">increment</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">decrement</span><span style="color:#D4D4D4;">())</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2、react高级特性" tabindex="-1"><a class="header-anchor" href="#_2、react高级特性"><span>2、React高级特性</span></a></h3><h4 id="函数组件" tabindex="-1"><a class="header-anchor" href="#函数组件"><span>函数组件</span></a></h4><ul><li>纯函数，输入props，输出JSX</li><li>没有组件实例</li><li>没有生命周期</li><li>没有state和setState，只能接收props</li><li>不能扩展其他方法</li></ul><h5 id="什么是纯函数" tabindex="-1"><a class="header-anchor" href="#什么是纯函数"><span>什么是纯函数？</span></a></h5><ol><li><strong>确定性</strong>：对于相同的输入参数，纯函数总是返回相同的结果。这意味着函数的行为是可以预测的，只要输入不变，输出就不会改变。</li><li><strong>无副作用</strong>：纯函数除了返回值之外，不会对程序状态造成任何影响，也就是说它不会修改输入参数，也不会修改任何外部状态（例如全局变量）。此外，纯函数不应该执行像I/O操作这样的行为，因为这些操作通常会影响程序之外的世界。</li></ol><h4 id="受控组件-controlled-components" tabindex="-1"><a class="header-anchor" href="#受控组件-controlled-components"><span>受控组件 (Controlled Components)⭐</span></a></h4><ul><li><strong>定义</strong>: <strong>在受控组件中，组件的状态由React组件自身的state或父组件传递下来的props控制</strong>。这意味着组件的UI状态（如表单字段的值）总是由React的state保持同步。</li><li><strong>特点</strong>: 每当用户交互（如键盘输入）发生时，React会更新组件的状态，并重新渲染组件以反映新的状态。</li><li><strong>示例</strong>: 表单元素（如<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>）的值是由React的state直接控制的，通过事件处理器（如onChange）来更新state。</li></ul><h4 id="非受控组件-uncontrolled-components" tabindex="-1"><a class="header-anchor" href="#非受控组件-uncontrolled-components"><span>非受控组件 (Uncontrolled Components)</span></a></h4><ul><li><strong>定义</strong>: <strong>在非受控组件中，组件的状态不是由React state控制的，而是由DOM本身控制。<strong>这通常意味着这些组件</strong>将使用ref来访问DOM节点</strong>，并从中读取状态。</li><li><strong>特点</strong>: 非受控组件通常用于简化那些不需要高度动态状态管理的场景。它们可以减少state的复杂度，并且在一些情况下性能更好。</li><li><strong>示例</strong>: 使用<code>ref</code>来获取DOM节点的引用，并直接操作DOM节点的状态。如文件上传、某些富文本编辑器，需要传入DOM元素</li></ul><h4 id="portals-传送门" tabindex="-1"><a class="header-anchor" href="#portals-传送门"><span>Portals（传送门）⭐</span></a></h4><p>Portal是一种特殊的渲染方式，它允许你将子节点渲染到位于父组件以外的DOM节点中。</p><p>Portal的主要用途是<strong>将组件的输出从其常规位置移动到文档中的另一个位置</strong>，这对于创建<strong>模态对话框、弹出窗口、悬浮菜单</strong>等组件非常有用。</p><h5 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h5><p>可以使用 <code>ReactDOM.createPortal(child,container)</code> 创建一个 Portal。</p><p>这里的 <strong>child</strong> 是一个 React 元素，fragment 片段或者是一个字符串，<strong>container</strong> 是 Portal 要插入的 DOM 节点的位置。</p><p>示例：将组件渲染到 body 上</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> ReactDOM</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react-dom&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#CE9178;"> &#39;./style.css&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> App</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // // 正常渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // return &lt;div className=&quot;modal&quot;&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        //     {this.props.children} {/* vue slot */}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // &lt;/div&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 使用 Portals 渲染到 body 上。</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> ReactDOM</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createPortal</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> className</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;modal&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#6A9955;"> // DOM 节点</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="portal-的内部实现" tabindex="-1"><a class="header-anchor" href="#portal-的内部实现"><span>Portal 的内部实现</span></a></h5><p>Portal 的实现主要依赖于 React 的虚拟 DOM 机制以及对浏览器原生 DOM API 的利用。</p><p>Portal 的实现涉及到<strong>将一部分虚拟 DOM 树渲染到页面上的不同位置，而不是直接作为当前组件树的一部分</strong>。</p><p><strong>Portal 的具体步骤</strong></p><ol><li><strong>创建 portal 节点</strong>： <ul><li>当你调用 <code>ReactDOM.createPortal</code> 时，React 会在虚拟 DOM 中创建一个特殊的节点，这个节点包含要渲染的内容以及目标 DOM 容器。</li></ul></li><li><strong>插入到 DOM 中</strong>： <ul><li>在 commit 阶段，React 会遍历所有的 portal 节点，并将它们的实际内容（即它们的子树）插入到对应的 DOM 容器中。</li></ul></li><li><strong>更新和删除</strong>： <ul><li>如果门户的内容发生变化，React 会根据新的虚拟 DOM 树重新计算差异，并更新或删除 DOM 中的内容。</li><li>当组件卸载或不再使用 <code>createPortal</code> 时，React 会清理门户的内容，并从 DOM 中移除相关的节点。</li></ul></li></ol><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span><strong>注意事项</strong></span></a></h5><ul><li><strong>状态管理</strong>：Portal内的组件仍然遵循React的状态管理机制，因此你仍然可以像平常一样使用<code>state</code>和<code>props</code>来控制它们的行为。</li><li><strong>生命周期</strong>：Portal内的组件依然遵循标准的React生命周期，包括挂载、更新和卸载阶段。</li><li><strong>样式隔离</strong>：如果你在Portal内渲染的是一个模态窗口或其他类似的组件，你可能需要处理样式隔离的问题，以确保Portal内的样式不会影响到页面上的其他元素。</li></ul><h4 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context⭐</span></a></h4><p><strong>React Context</strong> 是一种在组件树中共享数据的机制，避免了通过逐层传递 <em>props</em> 的繁琐操作。它适用于需要在多个组件间共享全局数据的场景，例如主题、用户信息或语言设置。</p><p>优点：变量不用层层传递，省去无谓的传递props</p><p>缺点：使用全局变量的方法，会让组件失去独立性，复用起来更困难，会让组件变得不纯粹，不应该大规模使用。</p><p>使用场景：公共信息（语言、主题）传递给每个组件</p><p>使用 Context 的基本步骤：</p><ol><li><strong>创建 Context</strong>： 使用 <em>React.createContext</em> 创建一个 Context 对象，并设置默认值。</li><li><strong>提供数据</strong>： 使用 <em>Provider</em> 包裹组件树，并通过 <em>value</em> 属性传递共享数据。</li><li><strong>消费数据</strong>： 在子组件中使用 <em>useContext</em> Hook 或 <em>Consumer</em> 组件获取共享数据。</li></ol><p>以下是一个简单的主题切换示例：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">createContext</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useContext</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 1、创建 Context</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> ThemeContext</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createContext</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">theme</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setTheme</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;light&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> toggleTheme</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">	setTheme</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">prevTheme</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">prevTheme</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;light&#39;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&#39;dark&#39;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&#39;light&#39;</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 2、提供数据</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">ThemeContext.Provider</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">theme</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    	&lt;</span><span style="color:#4EC9B0;">Toolbar</span><span style="color:#9CDCFE;"> toggleTheme</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">toggleTheme</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">ThemeContext.Provider</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Toolbar</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">toggleTheme</span><span style="color:#D4D4D4;"> }) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#4EC9B0;">ThemedButton</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">toggleTheme</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">切换主题</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ThemedButton</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 3、消费数据</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> theme</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useContext</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ThemeContext</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> style</span><span style="color:#F44747;">={{ background: theme === &#39;light&#39; ? &#39;#fff&#39; : &#39;#333&#39; }}&gt;主题按钮&lt;/button&gt;;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">export</span><span style="color:#9CDCFE;"> default</span><span style="color:#F44747;"> App;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件"><span>异步组件⭐</span></a></h4><ul><li>import()</li><li><strong>React.lazy</strong></li><li><strong>React.Suspense</strong></li></ul><p>在React.Suspense里加载异步组件，加载未完成时展示fallback里的内容，加载完毕后才展示异步组件的内容</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> ContextDemo</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">lazy</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> import</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./ContextDemo&#39;</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> App</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">引入一个动态组件</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">hr</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#4EC9B0;">React.Suspense</span><span style="color:#9CDCFE;"> fallback</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Loading...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">                &lt;</span><span style="color:#4EC9B0;">ContextDemo</span><span style="color:#808080;">/&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;/</span><span style="color:#4EC9B0;">React.Suspense</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="shouldcomponentupdate-scu" tabindex="-1"><a class="header-anchor" href="#shouldcomponentupdate-scu"><span>shouldComponentUpdate（SCU）</span></a></h4><ul><li><p>是否更新组件</p></li><li><p>React 默认：父组件有更新，子组件则无条件也更新</p></li><li><p>SCU默认返回true</p></li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">shouldComponentUpdate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nextState</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nextState</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> true</span><span style="color:#6A9955;"> // 可以渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> false</span><span style="color:#6A9955;"> // 不重复渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="react-purecomponent" tabindex="-1"><a class="header-anchor" href="#react-purecomponent"><span>React.PureComponent</span></a></h4><p>在React中，当组件的props或state发生变化时，组件通常会重新渲染。然而，在某些情况下，组件的重新渲染可能是不必要的，尤其是在组件的渲染逻辑较为复杂或性能敏感的情况下。<code>React.PureComponent</code> 提供了一种简便的方法来避免不必要的重新渲染，从而提高性能。</p><p><code>React.PureComponent</code> 自动实现了 <code>shouldComponentUpdate</code> 方法，该方法会比较当前的props和state与即将更新的props和state。如果发现浅比较的结果表明新的props或state与当前的相同，那么组件将不会重新渲染。这里所说的“浅比较”是指只比较对象的引用，而不是深入比较对象的内容。</p><h5 id="如何使用-react-purecomponent" tabindex="-1"><a class="header-anchor" href="#如何使用-react-purecomponent"><span><strong>如何使用 <code>React.PureComponent</code></strong></span></a></h5><p>要使用 <code>React.PureComponent</code>，你需要让自己的类组件继承自 <code>React.PureComponent</code> 而不是直接继承自 <code>React.Component</code>。下面是一个简单的例子：</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">PureComponent</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> MyComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> PureComponent</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">name</span><span style="color:#D4D4D4;"> } = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Hello, </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">!</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>MyComponent</code> 继承自 <code>React.PureComponent</code>。这意味着，如果父组件传递给 <code>MyComponent</code> 的props没有改变（基于浅比较），那么 <code>MyComponent</code> 不会被重新渲染。</p><h5 id="自定义比较逻辑" tabindex="-1"><a class="header-anchor" href="#自定义比较逻辑"><span><strong>自定义比较逻辑</strong></span></a></h5><p>虽然 <code>React.PureComponent</code> 默认使用浅比较来决定是否更新组件，但在某些情况下，你可能需要更详细的比较逻辑。例如，如果你的props包含深层嵌套的对象或数组，你可能希望深入比较这些对象的内容。此时，你<strong>可以覆盖 <code>shouldComponentUpdate</code> 方法来实现自定义的比较逻辑</strong>：</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> MyComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> PureComponent</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  shouldComponentUpdate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nextState</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 深度比较 props 中的某个对象</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">someObject</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">someObject</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 如果对象引用不同，但是你想检查内容是否真的改变了</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 进行深度比较</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#DCDCAA;">isEqual</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">someObject</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">someObject</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 如果内容不同，则需要更新</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">name</span><span style="color:#D4D4D4;"> } = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Hello, </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">!</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用了一个假想的 <code>isEqual</code> 函数来进行深度比较。在实际应用中，你可能需要使用一个库，如 <code>lodash</code> 的 <code>_.isEqual</code> 方法来实现这一点。</p><h5 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span><strong>注意事项</strong></span></a></h5><ul><li><strong>浅比较的局限性</strong>：<code>React.PureComponent</code> 使用浅比较，这意味着它<strong>只会比较props和state的引用</strong>。如果你的props或state包含复杂的数据结构（如对象或数组），并且这些数据结构内部的变化不会改变它们的引用，那么 <code>React.PureComponent</code> 可能不会按预期工作。</li><li><strong>性能考量</strong>：虽然 <code>React.PureComponent</code> 可以提高性能，但如果你的应用已经很好地进行了优化，使用 <code>React.PureComponent</code> 可能不会带来显著的好处。另外，过度使用 <code>React.PureComponent</code> 也可能导致不必要的复杂性。</li><li><strong>类组件 vs 函数组件</strong>：随着React Hooks的引入，许多开发者倾向于使用函数组件而不是类组件。<strong>在这种情况下，可以使用 <code>React.memo</code> 来代替 <code>React.PureComponent</code>。</strong></li></ul><h4 id="react-memo" tabindex="-1"><a class="header-anchor" href="#react-memo"><span>React.memo⭐</span></a></h4><ul><li><p><code>React.memo</code> 是一个高阶组件（Higher-Order Component, HOC），用于优化函数组件的性能。</p></li><li><p>它通过记忆化（memoization）机制来避免不必要的重新渲染，从而提升应用的性能。</p></li><li><p>我们可以使用 <code>React.memo</code> 来包装函数组件，只有当传递给它的props发生变化时，才会重新渲染这个组件。</p></li></ul><h5 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span><strong>使用方法</strong></span></a></h5><p><code>React.memo</code> 接受一个函数组件作为参数，并返回一个新的经过优化的组件。</p><p>还可以传入第二个参数：一个比较函数（comparator function），这个函数用来比较新旧props，以决定是否需要重新渲染。</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">memo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> MyComponent</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">memo</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">prop1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">prop2</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Prop1: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">prop1</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Prop2: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">prop2</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">));</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="使用比较函数" tabindex="-1"><a class="header-anchor" href="#使用比较函数"><span><strong>使用比较函数</strong></span></a></h5><p>如果你需要自定义props的比较逻辑，可以提供一个比较函数作为 <code>React.memo</code> 的第二个参数。这个函数接受两个参数：上一次渲染时的props和当前的新props。如果这两个props被认为是相等的，则不会重新渲染组件。</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> MyComponent</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">memo</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> MyComponent</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">prop1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">prop2</span><span style="color:#D4D4D4;"> }) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Prop1: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">prop1</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Prop2: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">prop2</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, (</span><span style="color:#9CDCFE;">prevProps</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 只有当prop1改变时才重新渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> prevProps</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prop1</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prop1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2"><span><strong>注意事项</strong></span></a></h5><ul><li><strong>默认比较</strong>：当没有提供比较函数时，<code>React.memo</code> 默认使用浅层比较（shallow comparison）来检查props的变化。这意味着如果props对象或数组的引用发生了变化，即使其内部值未变，也会认为props发生了改变。</li><li><strong>不可用于类组件</strong>：<code>React.memo</code> 只能用于函数组件，如果你正在使用类组件，可以考虑使用 <code>React.PureComponent</code> 或者手动实现 <code>shouldComponentUpdate</code> 生命周期方法来达到类似的效果。</li><li><strong>性能考量</strong>：虽然 <code>React.memo</code> 可以提高性能，但也需要权衡其带来的额外开销。<strong>只有当组件的渲染成本较高且其props频繁改变时，使用 <code>React.memo</code> 才有意义。</strong></li></ul><h4 id="不可变值-immutable-js" tabindex="-1"><a class="header-anchor" href="#不可变值-immutable-js"><span>不可变值 immutable.js</span></a></h4><ul><li><p>不可变性意味着一旦一个数据对象被创建，就不能再被更改。相反，当你需要修改数据时，你需要创建一个新的对象，而不是修改原有的对象。</p></li><li><p>实现不可变性的一种常见方法是使用不可变数据结构和库，如 <a href="https://immutable-js.github.io/immutable-js/" target="_blank" rel="noopener noreferrer">Immutable.js</a>。这个库提供了一套丰富的API来创建和操作不可变的数据结构，如Map、List等。</p></li><li><p>immutable对象是不可直接赋值的对象，它可以有效的避免错误赋值的问题</p></li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Map</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">List</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;immutable&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 创建一个不可变的Map</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Map</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;Alice&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age:</span><span style="color:#B5CEA8;"> 30</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  hobbies:</span><span style="color:#DCDCAA;"> List</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;reading&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;writing&#39;</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 修改person中的age</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> updatedPerson</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;age&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">31</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">updatedPerson</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 输出: Map { &quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 31, &quot;hobbies&quot;: List [ &quot;reading&quot;, &quot;writing&quot; ] }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 添加一个新的爱好</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> personWithNewHobby</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">updatedPerson</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;hobbies&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">hobbies</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> hobbies</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;painting&#39;</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">personWithNewHobby</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 输出: Map { &quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 31, &quot;hobbies&quot;: List [ &quot;reading&quot;, &quot;writing&quot;, &quot;painting&quot; ] }</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个包含姓名、年龄和爱好的不可变Map。<strong>当我们需要修改年龄或添加一个新的爱好时，我们创建了一个新的Map实例，而不是修改原来的实例。</strong></p><h4 id="高阶组件hoc" tabindex="-1"><a class="header-anchor" href="#高阶组件hoc"><span>高阶组件HOC⭐</span></a></h4><p>这篇文章推荐阅读：<a href="https://juejin.cn/post/7220677873584734268" target="_blank" rel="noopener noreferrer">高阶组件（HOC）在 React 中的应用</a></p><ul><li><p>**高阶组件（HOC）是一个接收组件作为参数并返回一个新组件的函数。**换句话说，它是一种组件的转换器。</p></li><li><p>高阶组件通常用于在组件之间<strong>复用逻辑</strong>，例如<strong>状态管理、数据获取、访问控制</strong>等。</p></li><li><p>HOC 的一个常见示例是 React-Redux 的 <code>connect</code> 函数，它将 Redux store 连接到 React 组件，使组件可以访问和更新 store 中的状态。</p></li><li><p>我在实际工作中应用在了权限控制和错误边界中（看上面发的文章）</p></li></ul><h5 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 高阶组件不是一种功能，而是一种模式</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> HOCFactory</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    class</span><span style="color:#4EC9B0;"> HOC</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 返回拼装的结果</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">Component</span><span style="color:#569CD6;"> {</span><span style="color:#D4D4D4;">...</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#569CD6;">}</span><span style="color:#808080;">/&gt;</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#4FC1FF;"> HOC</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> EnhancesComponent1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">HOCFactory</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">WrappedComponent1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> EnhancesComponent2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">HOCFactory</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">WrappedComponent2</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="应用一-权限控制" tabindex="-1"><a class="header-anchor" href="#应用一-权限控制"><span>应用一：权限控制</span></a></h5><p>根据用户权限来显示或隐藏某些组件。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;react&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> withAuthorization</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">WrappedComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">requiredPermission</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> WithAuthorizationComponent</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">userPermission</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;"> }) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">userPermission</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#9CDCFE;">requiredPermission</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">WrappedComponent</span><span style="color:#569CD6;"> {</span><span style="color:#D4D4D4;">...</span><span style="color:#9CDCFE;">props</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">您没有查看此内容的权限。</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> withAuthorization</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="应用二-错误边界" tabindex="-1"><a class="header-anchor" href="#应用二-错误边界"><span>应用二：错误边界</span></a></h5><p>在 React 中，错误边界是一种用于捕获子组件树中发生的错误并显示友好错误信息的技术。我们可以使用高阶组件来实现一个通用的错误边界组件。</p><p>在这个高阶组件中，我们返回一个类组件，因为错误边界需要使用生命周期方法 <code>componentDidCatch</code> 和静态方法 <code>getDerivedStateFromError</code>。我们在组件的状态中记录是否发生了错误，并在渲染方法中根据 <code>hasError</code> 的值来决定是显示错误消息还是渲染 <code>WrappedComponent</code>。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;react&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> withErrorBoundary</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">WrappedComponent</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> WithErrorBoundaryComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">hasError:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;"> };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    static</span><span style="color:#DCDCAA;"> getDerivedStateFromError</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">hasError:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    componentDidCatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 处理错误记录</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Error:&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Info:&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hasError</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Something went wrong. Please try again later.</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">WrappedComponent</span><span style="color:#569CD6;"> {</span><span style="color:#D4D4D4;">...</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> withErrorBoundary</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="应用三-性能监控" tabindex="-1"><a class="header-anchor" href="#应用三-性能监控"><span>应用三：性能监控</span></a></h5><p>在这个高阶组件中，我们使用 <code>useRef</code> 和 <code>useEffect</code> Hooks 来计算 <code>WrappedComponent</code> 的渲染时间。当组件被渲染时，我们记录开始时间，然后在 <code>useEffect</code> 中计算渲染所花费的时间，并将结果打印到控制台</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;react&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> withPerformance</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">WrappedComponent</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> WithPerformanceComponent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> startTime</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useRef</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">now</span><span style="color:#D4D4D4;">());</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> endTime</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">now</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> renderTime</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">endTime</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">startTime</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">WrappedComponent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> render time: </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">renderTime</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> ms\`</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, []);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">WrappedComponent</span><span style="color:#569CD6;"> {</span><span style="color:#D4D4D4;">...</span><span style="color:#9CDCFE;">props</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> withPerformance</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="redux-connect-是高阶组件" tabindex="-1"><a class="header-anchor" href="#redux-connect-是高阶组件"><span>redux connect 是高阶组件</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">connect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react-redux&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// connect是高阶组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> VisibleTodoList</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">connect</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	mapStateToProps</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    mapDispatchToProps</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)(</span><span style="color:#9CDCFE;">TodoList</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> VisibleTodolList</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="render-props" tabindex="-1"><a class="header-anchor" href="#render-props"><span>Render Props</span></a></h4><p>在React中，<code>render props</code>是一种模式或一种技术，它允许一个组件通过其<code>props</code>中的一个名为<code>render</code>的函数来渲染子组件。这个模式可以让你更灵活地指定一个组件要如何渲染其部分或全部UI，同时还能保持良好的可复用性和模块化。</p><h5 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1"><span>基本使用</span></a></h5><ol><li><strong>定义组件</strong>：创建一个接受<code>render prop</code>的父组件。这个<code>render prop</code>应该是一个函数，该函数通常接收一些参数（如数据或方法）作为输入，并返回需要渲染的React元素。</li><li><strong>消费组件</strong>：在消费这个组件的地方，传递一个函数作为<code>render prop</code>的值。这个函数将会使用父组件提供的数据或行为来生成UI。</li></ol><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// Render Props的核心思想</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 通过一个函数将class组件的state作为props传递给纯函数组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Factory</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // state即多个组件的公共逻辑的数据</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 修改state</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Factory</span><span style="color:#9CDCFE;"> render</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // render是一个函数组件</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">=&gt;</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#569CD6;">}</span><span style="color:#569CD6;"> {</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">b</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> ... </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    }</span><span style="color:#808080;">/&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> PropTypes</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;prop-types&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Mouse</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">x:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  </span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    handleMouseMove</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        x:</span><span style="color:#9CDCFE;"> event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientX</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        y:</span><span style="color:#9CDCFE;"> event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientY</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  </span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> style</span><span style="color:#F44747;">={{ height: &#39;500px&#39; }}</span><span style="color:#9CDCFE;"> onMouseMove</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleMouseMove</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            {</span><span style="color:#6A9955;">/* 将当前 state 作为 props ，传递给 render （render 是一个函数组件） */</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            {this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Mouse</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">propTypes</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    render:</span><span style="color:#9CDCFE;"> PropTypes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">func</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">isRequired</span><span style="color:#6A9955;"> // 必须接收一个 render 属性，而且是函数</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> style</span><span style="color:#F44747;">={{ height: &#39;500px&#39; }}&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">        &lt;p&gt;{props.a}&lt;/p&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">        &lt;Mouse</span><span style="color:#9CDCFE;"> render</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            /* render 是一个函数组件 */</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            ({ </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">The mouse position is (</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">y</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">)</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        }</span><span style="color:#808080;">/&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;/</span><span style="color:#9CDCFE;">div</span><span style="color:#D4D4D4;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">/**</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> * 即，定义了 Mouse 组件，只有获取 x y 的能力。</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> * 至于 Mouse 组件如何渲染，App 说了算，通过 render props 的方式告诉 Mouse 。</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> */</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="hoc-vs-render-props" tabindex="-1"><a class="header-anchor" href="#hoc-vs-render-props"><span>HOC VS Render Props</span></a></h5><ul><li>HOC：模式简单 但会增加组件层级</li><li>Render Props：代码简洁，学习成本较高</li><li>按需使用</li></ul><h3 id="_3、redux" tabindex="-1"><a class="header-anchor" href="#_3、redux"><span>3、Redux⭐</span></a></h3><p>Redux 是最流行的 React 状态管理库之一。它提供了一个全局的状态容器，允许你在应用的任何地方访问和更新状态。</p><p>特点包括: 单向数据流、中间件支持、时间旅行调试。</p><h4 id="redux-的核心概念" tabindex="-1"><a class="header-anchor" href="#redux-的核心概念"><span><strong>Redux 的核心概念</strong></span></a></h4><p>1、<strong>State（状态）</strong>：</p><ul><li>整个应用的状态都存储在一个单一的对象树中。这个对象树存储在一个全局的 store 中。这意味着你的应用所有部分的状态都被集中在一起，而不是分散在多个组件中。</li></ul><p>2、<strong>Store（仓库/存储）</strong>：</p><ul><li>Store 是保存整个应用状态的地方。只有一个单一的 store 对象，它包含整个应用的状态树。Store 还提供了方法如 <code>getState()</code> 来获取状态，<code>dispatch(action)</code> 来发送动作，以及 <code>subscribe(listener)</code> 来注册监听器。</li></ul><p>3、<strong>Actions（动作）</strong>：</p><ul><li>动作是携带数据的普通 JavaScript 对象，用来描述发生了什么。它们是应用中的数据源，<strong>是唯一可以改变状态的方法</strong>。动作由用户交互（例如点击按钮）或者某些业务逻辑触发。</li></ul><p>4、<strong>Reducers（规约器/减少器）</strong>：</p><ul><li>Reducers 告诉应用状态如何响应不同的动作。**它们是一个纯函数，接收当前状态和动作作为参数，并返回新的状态。**Reducers 必须是纯函数，这意味着对于相同的输入，它们必须总是返回相同的结果，并且除了计算外不做任何其他事情（比如修改状态或进行 I/O 操作）。</li></ul><h4 id="简述-redux-单向数据流" tabindex="-1"><a class="header-anchor" href="#简述-redux-单向数据流"><span>简述 Redux 单向数据流</span></a></h4><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-text;"><code><span class="line"><span class="line"><span>View -&gt; Action -&gt; Reducer -&gt; State -&gt; View</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li>View <ul><li>用户在界面（View）上触发一个事件（如点击按钮）。</li></ul></li><li>Action <ul><li>事件触发一个 <code>action</code>，并通过 <code>store.dispatch(action)</code> 分发。</li></ul></li><li>Reducer <ul><li><code>store</code> 调用 <code>reducer</code>，传入当前的 <code>state</code> 和 <code>action</code>，生成一个新的 <code>state</code>。</li></ul></li><li>State <ul><li><code>store</code> 更新 <code>state</code>，并通知所有订阅了 <code>store</code> 的组件。</li></ul></li><li>View <ul><li>组件根据新的 <code>state</code> 重新渲染界面。</li></ul></li></ol><p><strong>代码示例</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// store/index.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> {</span><span style="color:#9CDCFE;">createStore</span><span style="color:#D4D4D4;">} </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;redux&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> reducer</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./reducer&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 1.创建 Store</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createStore</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    reducer</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__REDUX_DEVTOOLS_EXTENSION__</span><span style="color:#D4D4D4;"> &amp;&amp;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">__REDUX_DEVTOOLS_EXTENSION__</span><span style="color:#D4D4D4;">()  </span><span style="color:#6A9955;">// 用于redux调试</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// store/reducer.js</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> defaultState</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    inputValue:</span><span style="color:#CE9178;"> &#39;&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    list:</span><span style="color:#D4D4D4;"> []</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 2.定义 Reducer</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// reducer 可以接收state，但绝不能修改state，所以要另外拷贝一个</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">defaultState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;change_input_value&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 深拷贝</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> newState</span><span style="color:#D4D4D4;"> = </span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        newState</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">inputValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> newState</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Todolist.js (部分)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> store</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./store&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> TodoList</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleInputChange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleInputChange</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleStoreChange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleStoreChange</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 3.订阅 Store</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleStoreChange</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// 订阅方法设置更新数据</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#4EC9B0;">TodoListUI</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            inputValue</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">inputValue</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    list</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">list</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    handleInputChange</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleInputChange</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    handleBtnClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleBtnClick</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    handleItemDelete</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleItemDelete</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">handleInputChange</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 4.定义 Action</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> action</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getInputChangeAction</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 5.分发 Action</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">handleStoreChange</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">());</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改变store里的数据</strong></p><p>1、先派发一个action，通过dispatch方法传递给store</p><p>2、store 自动调用 reducer，reducer中接收state和action进行处理，返回一个新的state返回给store，替换原来的store</p><p>3、store中数据改变react感知到store数据的改变，通过store.subscribe()订阅方法设置更新数据</p><p><strong>Redux设计和使用的三项原则</strong></p><p>1.store是唯一的</p><p>2.只有store能改变自己的内容</p><p>3.reducer必须是纯函数</p><h4 id="redux核心api" tabindex="-1"><a class="header-anchor" href="#redux核心api"><span><strong>Redux核心API</strong></span></a></h4><p>1、createStore ——创建store</p><p>2、store.dispatch ——派发action，这个action会传递给store</p><p>3、store.getState ——获取store中所有的数据内容</p><p>4、store.subscribe ——订阅store的改变，只要store发生改变，subscribe中接收的回调函数就会被执行</p><h3 id="_4、redux的中间件" tabindex="-1"><a class="header-anchor" href="#_4、redux的中间件"><span>4、Redux的中间件</span></a></h3><p>Redux 中间件（Middleware）允许你在 <code>action</code> 被分发（<code>dispatch</code>）到 <code>reducer</code> 之前或之后执行额外的逻辑。</p><p>中间件通常用于处理异步操作、日志记录、错误处理等任务。</p><p><strong>ps：中间是指action和store的中间，中间件是Redux的中间件，而不是React</strong></p><p>常用的 Redux 中间件有</p><p><strong>1. Redux Thunk</strong></p><ul><li><p><strong>描述</strong>: Redux Thunk 是最常用的中间件之一，用于处理异步操作（如 API 调用）。</p></li><li><p>特点</p><ul><li>允许 <code>action</code> 是一个函数（而不仅仅是一个对象）。</li><li>函数可以接收 <code>dispatch</code> 和 <code>getState</code> 作为参数，从而在异步操作完成后手动分发 <code>action</code>。</li></ul></li><li><p><strong>使用场景</strong>: 处理异步逻辑（如数据获取）。</p></li><li><p>示例</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">getState</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;FETCH_DATA_REQUEST&#39;</span><span style="color:#D4D4D4;"> })</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/api/data&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;FETCH_DATA_SUCCESS&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload:</span><span style="color:#9CDCFE;"> data</span><span style="color:#D4D4D4;"> }))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      .</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;FETCH_DATA_FAILURE&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;"> }))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>2. Redux Saga</strong></p><ul><li><p><strong>描述</strong>: Redux Saga 是一个基于生成器函数（Generator）的中间件，用于管理复杂的异步流程和副作用。</p></li><li><p><strong>特点</strong>:</p><ul><li>使用 ES6 的生成器函数来处理异步逻辑。</li><li>提供强大的副作用管理（如取消任务、并发执行等）。</li></ul></li><li><p><strong>使用场景</strong>: 复杂的异步流程（如竞态条件、任务取消等）。</p></li><li><p><strong>示例</strong>:</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">call</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">put</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">takeEvery</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;redux-saga/effects&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function*</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">yield</span><span style="color:#DCDCAA;"> call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fetch</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;/api/data&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#DCDCAA;"> put</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;FETCH_DATA_SUCCESS&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload:</span><span style="color:#9CDCFE;"> data</span><span style="color:#D4D4D4;"> })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#DCDCAA;"> put</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;FETCH_DATA_FAILURE&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;"> })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function*</span><span style="color:#DCDCAA;"> watchFetchData</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#DCDCAA;"> takeEvery</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;FETCH_DATA_REQUEST&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fetchData</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>3. Redux Logger</strong></p><ul><li><p><strong>描述</strong>: Redux Logger 是一个用于记录 <code>action</code> 和 <code>state</code> 变化的中间件。</p></li><li><p>特点</p><ul><li>在控制台中打印每个 <code>action</code> 的分发和 <code>state</code> 的变化。</li><li>便于调试和开发。</li></ul></li><li><p><strong>使用场景</strong>: 开发环境中的调试。</p></li><li><p>示例</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createStore</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">rootReducer</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">applyMiddleware</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">logger</span><span style="color:#D4D4D4;">))</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong>4. Redux Promise</strong></p><ul><li><p><strong>描述</strong>: Redux Promise 是一个用于处理 Promise 的中间件。</p></li><li><p>特点</p><ul><li>自动处理 Promise 类型的 <code>action</code>。</li><li>当 Promise 完成时，自动分发成功的 <code>action</code>；当 Promise 失败时，自动分发失败的 <code>action</code>。</li></ul></li><li><p><strong>使用场景</strong>: 简单的异步操作。</p></li><li><p>示例</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  type:</span><span style="color:#CE9178;"> &#39;FETCH_DATA&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  payload:</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/api/data&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">()),</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5、react-redux" tabindex="-1"><a class="header-anchor" href="#_5、react-redux"><span>5、React-Redux</span></a></h3><p>运用Provider将组件和store对接，使在Provider里的所有组件都能共享store里的数据，</p><p>使用connect将 Redux store 和 React 组件连接，使组件可以访问和更新 store 中的状态。</p><p><strong>核心API</strong>：</p><p>Provider：作用：连接store，内部组件都有能力获取store的内容</p><p>connect：组件与store作连接</p><p>mapStateToProps：把store中state映射成组件中的props</p><p>mapDispatchToProps：将store.dispatch挂载到props上</p><h3 id="_6、react-router使用" tabindex="-1"><a class="header-anchor" href="#_6、react-router使用"><span>6、React-router使用</span></a></h3><p><a href="https://csmsimona.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/Vue%E5%B0%8F%E8%AE%B0.html#_5%E3%80%81vue-router%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">Vue Router的使用</a></p><ul><li>路由模式（hash、H5 history），同vue-router</li><li>路由配置（动态路由、懒加载），同vue-router</li></ul><p><img src="`+p+'" alt="react-router路由模式"></p><p><img src="'+o+'" alt="react-router动态路由"></p><p><img src="'+c+'" alt="react-router跳转路由"></p><p><img src="'+t+`" alt="react-router懒加载"></p><h3 id="_7、如何统一监听-react-组件报错" tabindex="-1"><a class="header-anchor" href="#_7、如何统一监听-react-组件报错"><span>7、如何统一监听 React 组件报错</span></a></h3><h4 id="error-boundaries-错误边界" tabindex="-1"><a class="header-anchor" href="#error-boundaries-错误边界"><span>Error Boundaries（错误边界）</span></a></h4><p>默认情况下，如果你的应用程序在渲染过程中抛出错误，React 将从屏幕上删除其 UI。为了防止这种情况，你可以将 UI 的一部分包装到 错误边界 中。错误边界是一个特殊的组件，可让你显示一些后备 UI，而不是显示例如错误消息这样崩溃的部分。</p><p>要实现错误边界组件，你需要提供 static getDerivedStateFromError，它允许你更新状态以响应错误并向用户显示错误消息。你还可以选择实现 componentDidCatch 来添加一些额外的逻辑，例如将错误添加到分析服务。</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#569CD6;"> *</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> ErrorBoundary</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">hasError:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  static</span><span style="color:#DCDCAA;"> getDerivedStateFromError</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 更新状态，以便下一次渲染将显示后备 UI。</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">hasError:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  componentDidCatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    logErrorToMyService</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      error</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 示例“组件堆栈”：</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 在 ComponentThatThrows 中（由 App 创建）</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 在 ErrorBoundary 中（由 APP 创建）</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 在 div 中（由 APP 创建）</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 在 App 中</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      info</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">componentStack</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 仅在 react@canary 版本可用</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 警告：Owner Stack 在生产中不可用</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">captureOwnerStack</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hasError</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 你可以渲染任何自定义后备 UI</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fallback</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你可以用它包装组件树的一部分：</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">ErrorBoundary</span><span style="color:#9CDCFE;"> fallback</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Something went wrong</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#4EC9B0;">Profile</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#4EC9B0;">ErrorBoundary</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 Profile 或其子组件抛出错误，ErrorBoundary 将“捕获”该错误，然后显示带有你提供的错误消息的后备 UI，并向你的错误报告服务发送生产错误报告。</p><h4 id="全局错误监听" tabindex="-1"><a class="header-anchor" href="#全局错误监听"><span>全局错误监听</span></a></h4><p>为了捕获 Error Boundaries 无法处理的错误（如事件处理器或异步代码中的错误），可以使用 JavaScript 的全局错误监听机制。</p><ul><li>使用 window.onerror 监听全局错误。</li><li>使用 window.addEventListener(&#39;error&#39;, handler) 监听未捕获的错误。</li><li>使用 window.addEventListener(&#39;unhandledrejection&#39;, handler) 监听未处理的 Promise 拒绝。</li></ul><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> GlobalErrorHandler</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 监听全局错误</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#DCDCAA;"> handleError</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Global error:&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 监听未捕获的错误</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onerror</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">source</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">lineno</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">colno</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      handleError</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> true</span><span style="color:#6A9955;"> // 阻止默认错误处理</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 监听未处理的 Promise 拒绝</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;unhandledrejection&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      handleError</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 清理监听器</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onerror</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;unhandledrejection&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">handleError</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }, [])</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> null</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 在应用的根组件中使用</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">GlobalErrorHandler</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">MyComponent</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><ol><li>全局错误监听可以捕获 Error Boundaries 无法处理的错误，但无法阻止组件崩溃。</li><li>需要确保在生产环境中正确处理错误信息，避免暴露敏感信息。</li></ol><h3 id="_8、react项目中组件销毁有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_8、react项目中组件销毁有哪几种方式"><span>8、React项目中组件销毁有哪几种方式？</span></a></h3><p><strong>1.条件渲染（动态卸载）</strong></p><p>通过 状态控制 决定是否渲染组件，当条件为 false 时，React 会自动卸载并销毁该组件。 特点：</p><ul><li>适用于 动态显示/隐藏组件。</li><li>组件销毁后，状态会被重置（重新挂载时是新实例）。</li></ul><p><strong>2.路由切换</strong></p><p>在使用 React Router 时，当路由切换时，当前页面组件会被卸载，导致其子组件销毁。 特点：</p><ul><li>适用于 SPA（单页应用），路由切换时自动卸载旧组件。</li></ul><p><strong>3.父组件卸载（连带子组件销毁）</strong></p><p>如果 父组件被卸载（如路由切换、条件渲染父组件），其所有子组件也会被销毁。 特点：</p><ul><li>适用于 父组件被移除时，子组件自动销毁。</li></ul><p><strong>4.useEffect 清理函数（资源释放）</strong></p><p>如果组件内部有 副作用（如定时器、订阅、事件监听），需要在组件销毁时清理，可以使用 useEffect 的 清理函数。 特点：</p><ul><li>适用于 组件卸载时释放资源（如取消 API 请求、移除事件监听等）。</li></ul><p><strong>5.修改 key 强制重新挂载（重置组件）</strong></p><p>通过改变 key 可以强制 React 销毁并重新创建组件（适用于需要重置状态的场景）。 特点：</p><ul><li>适用于 需要完全重置组件状态 的情况。</li></ul><p><strong>6.手动卸载（Portal 或第三方库）</strong></p><p>在某些特殊情况下（如使用 ReactDOM.createPortal 或某些 UI 库），可能需要手动调用卸载方法。 特点：</p><ul><li>适用于 手动控制组件卸载（较少使用）。</li></ul><h2 id="二、react原理" tabindex="-1"><a class="header-anchor" href="#二、react原理"><span>二、React原理⭐</span></a></h2><h3 id="_1、函数式编程" tabindex="-1"><a class="header-anchor" href="#_1、函数式编程"><span>1、函数式编程</span></a></h3><p>核心概念</p><ul><li><p><strong>不可变性(Immutability)</strong></p><p>不可变性意味着不可改变。 在函数式编程中，你无法更改数据，也不能更改。 如果要改变或更改数据，则必须复制数据副本来更改。</p></li><li><p><strong>纯函数(Pure Functions)</strong></p><p>给定固定的输入，就一定会有固定的输出，而且不会有任何的副作用</p></li><li><p><strong>数据转换(Data Transformations)</strong></p><p>我们总是生成原始数据的转换副本，而不是直接更改原始数据。</p></li><li><p><strong>高阶函数 (Higher-Order Functions)</strong></p><p>在函数式编程中，高阶函数是指接受一个或多个函数作为参数，并且/或者返回一个函数的函数。</p><p><code>Array.map、Array.filter和Array.reduce</code>是高阶函数，因为它们将函数作为参数。</p></li><li><p><strong>递归</strong></p><p>递归是一种函数在满足一定条件之前调用自身的技术。只要可能，最好使用递归而不是循环。你必须注意这一点，浏览器不能处理太多递归和抛出错误。</p></li><li><p><strong>组合</strong></p><p>我们将功能划分为小型可重用的纯函数，我们必须将所有这些可重用的函数放在一起，最终使其成为产品。 将所有较小的函数组合成更大的函数，最终，得到一个应用程序，这称为<strong>组合</strong>。</p></li></ul><h3 id="_2、虚拟dom" tabindex="-1"><a class="header-anchor" href="#_2、虚拟dom"><span>2、虚拟DOM⭐</span></a></h3><h4 id="什么是虚拟dom" tabindex="-1"><a class="header-anchor" href="#什么是虚拟dom"><span>什么是虚拟DOM？</span></a></h4><p>用JS模拟DOM结构，DOM变化的对比，放在JS层进行（因为前端语言中只有JS是<a href="https://blog.csdn.net/Roselane_Begger/article/details/101176694" target="_blank" rel="noopener noreferrer">图灵完备语言</a>）</p><ul><li><p>创建真实DOM损耗的性能远大于创建虚拟DOM损耗的性能。</p></li><li><p>虚拟DOM提高性能，不是说不操作DOM，而是<strong>减少操作DOM的次数，减少回流和重绘</strong>。</p></li><li><p>虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 <strong>dom diff 算法避免了没有必要的 dom 操作</strong>，从而提高性能。</p></li></ul><h4 id="虚拟dom的优点" tabindex="-1"><a class="header-anchor" href="#虚拟dom的优点"><span><strong>虚拟DOM的优点</strong></span></a></h4><p>1、<strong>性能优化</strong>：在直接操作真实的 DOM 时，每次更改都会导致页面重新渲染，这是一个昂贵的操作。而虚拟 DOM 可以先在内存中进行批量的更新，然后再一次性地将最终的变更应用到实际的 DOM 上，从而减少了重绘和回流的次数。</p><p>2、<strong>代码简洁</strong>：虚拟 DOM 使得 React 组件可以用更简洁、更具声明性的代码编写。开发者只需要关心应用的状态和如何根据状态渲染 UI，而不需要关心 DOM 操作的具体细节。</p><p>3、<strong>跨平台</strong>：React Native 利用了虚拟 DOM 的概念，可以在不同的平台上（如 iOS 和 Android）创建相似的用户界面，而不仅仅是Web。</p><h4 id="虚拟dom实现" tabindex="-1"><a class="header-anchor" href="#虚拟dom实现"><span>虚拟DOM实现</span></a></h4><p><strong>1、state数据</strong></p><p><strong>2、JSX模板</strong></p><p><strong>3、数据+模板 生成虚拟DOM（虚拟DOM就是一个JS对象，用它来描述真实DOM）（损耗了性能）</strong></p><p><code>[&#39;div&#39;, {id: &#39;abc&#39;}, [&#39;span&#39;, {}, &#39;hello world&#39;]]</code></p><p><strong>4、用虚拟DOM的结构，生成真实的DOM来显示</strong></p><p><code>&lt;div id=&#39;abc&#39;&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;/div&gt;</code></p><p><strong>5、state发生变化</strong></p><p><strong>6、数据+模板 生成新的虚拟DOM（极大地提升了性能）</strong></p><p><code>[&#39;div&#39;, {id: &#39;abc&#39;}, [&#39;span&#39;, {}, &#39;byebye&#39;]]</code></p><p><strong>7、比较原始虚拟DOM和新的虚拟DOM的区别，找到区别是span中的内容（极大地提升了性能）</strong></p><p><strong>8、直接操作DOM，改变span中的内容</strong></p><p>JSX =&gt; createElement =&gt; 虚拟DOM（JS对象）=&gt; 真实DOM</p><p><strong>jsx本质</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> imgElem</span><span style="color:#D4D4D4;"> = </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;div1&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">some text</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">img</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">imgUrl</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 编译后</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;div&quot;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    id:</span><span style="color:#CE9178;"> &quot;div1&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;p&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;some text&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;img&quot;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    src:</span><span style="color:#9CDCFE;"> imgUrl</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}))</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="虚拟dom的缺点" tabindex="-1"><a class="header-anchor" href="#虚拟dom的缺点"><span>虚拟DOM的缺点</span></a></h4><ol><li><strong>内存开销</strong>：<strong>虚拟DOM需要在内存中维护一份DOM的副本，可能会导致内存消耗较大。同时，虚拟DOM的构建和比对过程会带来计算开销，尤其在数据量较大时，可能会比直接操作真实DOM更耗时。</strong></li><li><strong>初始化成本</strong>：创建虚拟DOM树需要计算资源，可能导致初次加载时性能下降。</li><li><strong>过度渲染</strong>：虽然React通过差异计算来最小化DOM操作，但如果组件频繁地重新渲染，即使只是局部更新，也可能导致性能问题。特别是在复杂的组件中，如果<code>render</code>方法中的逻辑较为复杂，那么频繁的重新渲染可能会降低应用性能。</li><li><strong>生命周期方法的滥用</strong>：不当使用生命周期方法可能导致不必要的重新渲染。</li><li><strong>状态管理不当</strong>：不合理的状态更新会导致不必要的性能损耗。</li><li><strong>性能瓶颈</strong>：在大量数据更新或复杂DOM操作时可能出现性能瓶颈。</li><li><strong>调试难度</strong>：虚拟DOM增加了调试的复杂性。</li></ol><h4 id="如何避免虚拟dom的缺点" tabindex="-1"><a class="header-anchor" href="#如何避免虚拟dom的缺点"><span>如何避免虚拟DOM的缺点</span></a></h4><ul><li><strong>优化状态更新</strong>：合理使用<code>setState</code>，避免不必要的状态更新。</li><li><strong>使用PureComponent或shouldComponentUpdate</strong>：确保只有在必要时才进行重新渲染。</li><li><strong>性能监控</strong>：使用React DevTools等工具来监控应用的性能，发现并解决性能瓶颈。</li><li><strong>懒加载和代码分割</strong>：通过懒加载和代码分割减少初始加载时间和内存使用。</li><li><strong>合理的组件划分</strong>：将组件划分得足够小，以便在需要时仅重新渲染受影响的部分。</li></ul><h3 id="_3、react-fiber架构" tabindex="-1"><a class="header-anchor" href="#_3、react-fiber架构"><span>3、React Fiber架构⭐</span></a></h3><p>React Fiber 是React16版本中引入的一种新的协调算法，它彻底改变了React的渲染机制，使其更加高效和灵活。解决了以前的更新机制的问题，即在长时间的更新过程中，主线程会被阻塞，导致应用无法及时响应用户输入的问题。</p><h4 id="传统reconciliation算法的缺点" tabindex="-1"><a class="header-anchor" href="#传统reconciliation算法的缺点"><span><strong>传统Reconciliation算法的缺点</strong></span></a></h4><ul><li><p><strong>同步执行</strong>：传统的Reconciliation算法在每次更新时都会同步执行整个Virtual DOM树的比较，如果树很大，就会导致渲染卡顿，影响用户体验。</p></li><li><p><strong>无法中断</strong>：一旦开始比较，就无法中途停止，这会导致长时间的操作阻塞主线程，影响其他任务的执行。</p></li></ul><h4 id="fiber-架构的优点" tabindex="-1"><a class="header-anchor" href="#fiber-架构的优点"><span><strong>Fiber 架构的优点</strong></span></a></h4><p>1、<strong>可中断性</strong>：</p><ul><li>在传统的 diff 算法中，整个过程是一次性的，并且必须在一次事件循环内完成。如果这个过程非常耗时，那么它可能会阻塞用户界面。<strong>Fiber 架构使得 React 能够在必要的时候中断工作，并在稍后的时间继续执行。这意味着即使在复杂的用户界面中，React 也能够保持流畅的用户体验。</strong></li></ul><p>2、<strong>优先级调度</strong>：</p><ul><li>Fiber 引入了优先级的概念，可以根据任务的重要性来安排执行顺序。例如，用户交互（如点击按钮）通常具有较高的优先级，而后台任务（如加载数据）则可能具有较低的优先级。这有助于确保用户交互得到及时响应。</li></ul><p>3、<strong>并发渲染</strong>：</p><ul><li>虽然 React 目前还不支持真正的并发渲染到 DOM（即多个更新同时进行），但是 Fiber 的设计使得将来支持并发成为可能。这意味着在未来，React 可以在多个线程中同时处理不同的更新任务。</li></ul><p>4、<strong>错误边界</strong>：</p><ul><li>Fiber 架构还支持错误边界（Error Boundaries），这是一种特殊的 React 组件，可以在子组件抛出错误时捕获这些错误，并显示一个备用 UI，而不是使整个应用崩溃。这对于提高应用的稳定性和用户体验非常重要。</li></ul><h4 id="fiber-架构的核心概念" tabindex="-1"><a class="header-anchor" href="#fiber-架构的核心概念"><span><strong>Fiber 架构的核心概念</strong></span></a></h4><p>1、<strong>Fiber 结构</strong>：</p><ul><li>在 Fiber 架构中，每个 React 元素（即虚拟 DOM 节点）都有一个对应的 Fiber 节点。每个 Fiber 节点是一个对象，它包含了关于该元素的所有信息，比如类型、属性、状态以及其他重要的元数据。</li></ul><p>2、<strong>链表结构</strong>：</p><ul><li>与以前的单链表结构相比，Fiber 节点形成了一个<strong>双向链表结构</strong>，每个节点都有指向父节点和子节点的指针。这使得 React 可以更容易地在树中导航，并且可以方便地进行回溯和重试。</li></ul><p>3、<strong>工作单元</strong>：</p><ul><li>每个 Fiber 节点代表了一个工作单元（work unit），它可以独立于其他节点执行。这意味着 React 可以更容易地中断和恢复工作，从而提高性能。</li></ul><h4 id="fiber-架构的实现原理" tabindex="-1"><a class="header-anchor" href="#fiber-架构的实现原理"><span><strong>Fiber 架构的实现原理</strong></span></a></h4><ul><li><p>Fiber Node：React 使用Fiber Node来表示 Virtual DOM树中的每个节点，每个Fiber Node包含了节点类型、属性、子节点等信息，以及用来跟踪更新状态的指针。</p></li><li><p>Fiber Tree：React 使用Fiber Node构建了一个树状结构，称为Fiber Tree，每个 Fiber Node 对应Virtual DOM树中的一个节点。</p></li><li><p>Work in Progress Tree：在进行更新时，React会构建一个新的Fiber Tree,称为Work in ProgressTree，并将其与之前的Fiber Tree进行比较。</p></li><li><p>Commit Phase：当Work in ProgressTree 建立完成之后，React 会将WorkinProgress Tree 中的更新应用到真实的DOM树上，这个过程称为Commit Phase。</p></li></ul><h4 id="fiber-协调流程" tabindex="-1"><a class="header-anchor" href="#fiber-协调流程"><span>Fiber 协调流程</span></a></h4><ol><li><strong>组件更新的触发</strong></li></ol><p>与传统的 React 协调过程一样，Fiber 的更新也可以由以下事件触发：</p><ul><li><strong>状态（state）或属性（props）变化</strong>：当组件的状态或属性发生变化时，会触发重新渲染。</li><li><strong>父组件更新</strong>：如果父组件渲染，子组件也会重新渲染。</li></ul><ol start="2"><li><strong>创建 Fiber 节点</strong></li></ol><p>数据（State）和属性（Props）变化后，React 会根据当前的虚拟 DOM 树，创建相应的 Fiber 节点。Fiber 节点是对 React 组件实例的表示，包含了组件的类型、状态、属性、子节点、更新队列等信息。</p><ol start="3"><li><strong>开始协调（Reconciliation）</strong></li></ol><p>Fiber 引入了一种新的协调流程，允许将任务分片并在多个帧上执行，以避免阻塞主线程：</p><ul><li><strong>调度</strong>：React 会标记需要更新的 Fiber 节点，并将它们加入到更新队列中。引入了任务优先级的概念，允许 React 根据工作的重要性来安排更新。</li><li><strong>分片处理</strong>：协调的过程被切分为多个小任务，可以在每个请求帧中分步执行。这样可以有效避免长时间的阻塞，使得用户界面在繁重的操作中仍保持响应。</li></ul><ol start="4"><li><strong>Diffing 过程</strong></li></ol><p>在 Fiber 中，Diffing 过程与之前的版本类似，但它采用了一些优化策略：</p><ul><li><strong>树的复用</strong>：Fiber 允许重用旧树中的节点，从而减少不必要的创建和销毁。</li><li><strong>优先级与中断</strong>：在高优先级任务（如用户输入）来临时，当前的协调任务可以被中断，React 会先处理优先级高的任务。</li></ul><ol start="5"><li><strong>生成更新</strong></li></ol><p>在 Diffing 过程中，如果发现节点需要更新或替换，Fiber 会创建相应的更新对象并将其添加到更新队列中。每个 Fiber 节点都有一个 <code>updateQueue</code>，用于存储所有需要执行的更新。</p><ol start="6"><li><strong>进入 Commit Phase（提交阶段）</strong></li></ol><p>当协调阶段完成后，进行提交阶段，React 会在这个阶段应用所有的更新到实际的 DOM：</p><ul><li><strong>执行生命周期方法</strong>：在提交过程中，React 会调用相关的生命周期方法，例如 <code>componentWillUpdate</code> 和 <code>componentDidUpdate</code>，以允许开发者执行额外的操作。</li><li><strong>DOM 更新</strong>：将计算得到的最终结果应用到真实的 DOM 中。这个过程是一个同步操作。</li></ul><ol start="7"><li><strong>Cleanup（清理）</strong></li></ol><p>在提交阶段结束后，React 会进行一些清理工作，例如更新 Fiber 节点的状态，清空更新队列，以便为下一次渲染做好准备。</p><p><strong>阶段 1：Reconciliation（协调/渲染阶段）</strong></p><ul><li><strong>可中断的增量计算</strong>：React 将组件树遍历拆解为多个 <strong>Fiber 工作单元</strong>，通过循环（而非递归）逐个处理。 <ul><li>每次循环执行一个 Fiber 节点，生成子 Fiber 并连接成树。</li><li>通过 **<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback" target="_blank" rel="noopener noreferrer"><code>requestIdleCallback</code></a>（或 Scheduler 包）**在浏览器空闲时段执行，避免阻塞主线程。</li></ul></li><li><strong>对比策略</strong>： 根据 <code>key</code> 和 <code>type</code> 复用节点，标记 <code>Placement</code>（新增）、<code>Update</code>（更新）、<code>Deletion</code>（删除）等副作用。</li></ul><p><strong>阶段 2：Commit（提交阶段）</strong></p><ul><li><strong>不可中断的 DOM 更新</strong>： 同步执行所有标记的副作用（如 DOM 操作、生命周期调用），确保 UI 一致性。</li><li><strong>副作用分类：</strong><ul><li><strong>BeforeMutation</strong>：<code>getSnapshotBeforeUpdate</code>。</li><li><strong>Mutation</strong>：DOM 插入/更新/删除。</li><li><strong>Layout</strong>：<code>useLayoutEffect</code>、<code>componentDidMount</code>/<code>Update</code>。</li></ul></li></ul><h4 id="与旧架构的关键差异" tabindex="-1"><a class="header-anchor" href="#与旧架构的关键差异"><span>与旧架构的关键差异</span></a></h4><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">Stack Reconciler（React 15-）</th><th style="text-align:left;">Fiber Reconciler（React 16+）</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>遍历方式</strong></td><td style="text-align:left;">递归（不可中断）</td><td style="text-align:left;">循环（可中断 + 恢复）</td></tr><tr><td style="text-align:left;"><strong>任务调度</strong></td><td style="text-align:left;">同步执行，阻塞主线程</td><td style="text-align:left;">异步分片，空闲时段执行</td></tr><tr><td style="text-align:left;"><strong>优先级控制</strong></td><td style="text-align:left;">无</td><td style="text-align:left;">基于 Lane 模型的优先级抢占</td></tr><tr><td style="text-align:left;"><strong>数据结构</strong></td><td style="text-align:left;">虚拟 DOM 树</td><td style="text-align:left;">Fiber 链表树（含调度信息）</td></tr></tbody></table><h3 id="_4、fiber-结构和普通-vnode-区别" tabindex="-1"><a class="header-anchor" href="#_4、fiber-结构和普通-vnode-区别"><span>4、Fiber 结构和普通 VNode 区别⭐</span></a></h3><h4 id="本质差异" tabindex="-1"><a class="header-anchor" href="#本质差异"><span>本质差异</span></a></h4><table><thead><tr><th style="text-align:left;">维度</th><th style="text-align:left;">普通 VNode（虚拟 DOM）</th><th style="text-align:left;">Fiber 结构</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>设计目标</strong></td><td style="text-align:left;">减少真实 DOM 操作，提升渲染性能</td><td style="text-align:left;">实现可中断的异步渲染 + 优先级调度</td></tr><tr><td style="text-align:left;"><strong>数据结构</strong></td><td style="text-align:left;">树形结构（递归遍历）</td><td style="text-align:left;">双向链表树（循环遍历）</td></tr><tr><td style="text-align:left;"><strong>功能范畴</strong></td><td style="text-align:left;">仅描述 UI 结构</td><td style="text-align:left;">描述 UI 结构 + 调度任务 + 副作用管理</td></tr></tbody></table><h4 id="数据结构对比" tabindex="-1"><a class="header-anchor" href="#数据结构对比"><span><strong>数据结构对比</strong></span></a></h4><p><strong>普通 VNode（React 15 及之前）</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> vNode</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  type:</span><span style="color:#CE9178;"> &#39;div&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 节点类型（组件/原生标签）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  props:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">className:</span><span style="color:#CE9178;"> &#39;container&#39;</span><span style="color:#D4D4D4;"> }, </span><span style="color:#6A9955;">// 属性</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  children:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">vNode1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">vNode2</span><span style="color:#D4D4D4;">], </span><span style="color:#6A9955;">// 子节点（树形结构）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  key:</span><span style="color:#CE9178;"> &#39;unique-id&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 优化 Diff 性能</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 无状态、调度、副作用信息</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心字段</strong>：仅包含 UI 描述相关属性（type、props、children）。</p><p><strong>Fiber 节点（React 16+）</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> fiberNode</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  tag:</span><span style="color:#9CDCFE;"> HostComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 节点类型（函数组件/类组件/DOM元素）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  type:</span><span style="color:#CE9178;"> &#39;div&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 原生标签或组件构造函数</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  key:</span><span style="color:#CE9178;"> &#39;unique-id&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Diff 优化标识</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  stateNode:</span><span style="color:#9CDCFE;"> domNode</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 关联的真实 DOM 节点</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  pendingProps:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">className:</span><span style="color:#CE9178;"> &#39;container&#39;</span><span style="color:#D4D4D4;"> }, </span><span style="color:#6A9955;">// 待处理的 props</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  memoizedProps:</span><span style="color:#D4D4D4;"> {}, </span><span style="color:#6A9955;">// 已生效的 props</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  memoizedState:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // Hooks 状态（函数组件）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    hooks:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">state1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">effectHook</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  updateQueue:</span><span style="color:#D4D4D4;"> [], </span><span style="color:#6A9955;">// 状态更新队列（类组件）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  lanes:</span><span style="color:#9CDCFE;"> Lanes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">HighPriority</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 调度优先级（Lane 模型）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  child:</span><span style="color:#9CDCFE;"> childFiber</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 第一个子节点</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  sibling:</span><span style="color:#9CDCFE;"> siblingFiber</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 下一个兄弟节点</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  return:</span><span style="color:#9CDCFE;"> parentFiber</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 父节点（构成双向链表）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  effectTag:</span><span style="color:#9CDCFE;"> Placement</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 副作用标记（插入/更新/删除）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  nextEffect:</span><span style="color:#9CDCFE;"> nextEffectFiber</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 副作用链表指针</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心扩展</strong></p><ul><li><strong>调度控制</strong>：<code>lanes</code> 优先级、任务到期时间。</li><li><strong>状态管理</strong>：Hooks 链表（函数组件）、类组件状态队列。</li><li><strong>副作用追踪</strong>：<code>effectTag</code> 标记和副作用链表。</li><li><strong>遍历结构</strong>：<code>child</code>/<code>sibling</code>/<code>return</code> 构成双向链表。</li></ul><h4 id="协调机制对比" tabindex="-1"><a class="header-anchor" href="#协调机制对比"><span><strong>协调机制对比</strong></span></a></h4><table><thead><tr><th style="text-align:left;">流程</th><th style="text-align:left;">VNode（Stack Reconciler）</th><th style="text-align:left;">Fiber Reconciler</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>遍历方式</strong></td><td style="text-align:left;">递归遍历（不可中断）</td><td style="text-align:left;">循环遍历链表（可中断 + 恢复）</td></tr><tr><td style="text-align:left;"><strong>任务调度</strong></td><td style="text-align:left;">同步执行，阻塞主线程</td><td style="text-align:left;">异步分片，空闲时间执行</td></tr><tr><td style="text-align:left;"><strong>优先级控制</strong></td><td style="text-align:left;">无</td><td style="text-align:left;">Lane 模型（31 个优先级车道）</td></tr><tr><td style="text-align:left;"><strong>副作用处理</strong></td><td style="text-align:left;">统一提交 DOM 更新</td><td style="text-align:left;">构建副作用链表，分阶段提交</td></tr></tbody></table><h4 id="性能影响对比" tabindex="-1"><a class="header-anchor" href="#性能影响对比"><span><strong>性能影响对比</strong></span></a></h4><table><thead><tr><th style="text-align:left;">场景</th><th style="text-align:left;">VNode 架构</th><th style="text-align:left;">Fiber 架构</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>大型组件树渲染</strong></td><td style="text-align:left;">主线程阻塞导致掉帧</td><td style="text-align:left;">分片渲染，保持 UI 响应</td></tr><tr><td style="text-align:left;"><strong>高频更新（如动画）</strong></td><td style="text-align:left;">多次渲染合并困难</td><td style="text-align:left;">基于优先级合并或跳过中间状态</td></tr><tr><td style="text-align:left;"><strong>SSR 水合（Hydration）</strong></td><td style="text-align:left;">全量同步处理</td><td style="text-align:left;">增量水合，优先交互部分</td></tr></tbody></table><h3 id="_5、react-reconciliation-协调的过程" tabindex="-1"><a class="header-anchor" href="#_5、react-reconciliation-协调的过程"><span>5、React reconciliation 协调的过程⭐</span></a></h3><p>React 的 <strong>协调（Reconciliation）</strong> 是用于高效更新 UI 的核心算法。当组件状态或属性变化时，React 会通过对比新旧虚拟 DOM（Virtual DOM）树，找出最小化的差异并应用更新。以下是协调过程的详细步骤：</p><h4 id="生成虚拟-dom-树" tabindex="-1"><a class="header-anchor" href="#生成虚拟-dom-树"><span><strong>生成虚拟 DOM 树</strong></span></a></h4><ul><li>当组件状态或属性变化时，React 会重新调用组件的 <code>render</code> 方法，生成新的<strong>虚拟 DOM 树</strong>（一个轻量级的 JavaScript 对象，描述 UI 结构）。</li><li>虚拟 DOM 是实际 DOM 的抽象表示，操作成本远低于直接操作真实 DOM。</li></ul><h4 id="diffing-算法-差异对比" tabindex="-1"><a class="header-anchor" href="#diffing-算法-差异对比"><span>Diffing 算法（差异对比）</span></a></h4><p>React 使用 <strong>Diffing 算法</strong> 比较新旧两棵虚拟 DOM 树，找出需要更新的部分。对比规则如下：</p><p><strong>规则一：不同类型的元素</strong></p><ul><li>如果新旧元素的<code>type</code>不同（例如从<code>&lt;div&gt;</code>变为<code>&lt;span&gt;</code>），React 会<strong>销毁旧子树</strong>，<strong>重建新子树</strong>。 <ul><li>旧组件的生命周期方法（如<code>componentWillUnmount</code>）会被触发。</li><li>新组件的生命周期方法（如<code>constructor</code>、<code>componentDidMount</code>）会被触发。</li></ul></li></ul><p><strong>规则二：相同类型的元素</strong></p><ul><li>如果元素的<code>type</code>相同（例如<code>&lt;div className=&quot;old&quot;&gt;</code>→<code>&lt;div className=&quot;new&quot;&gt;</code>），React 会<strong>保留 DOM 节点</strong>，仅更新变化的属性。 <ul><li>对比新旧属性，仅更新差异部分（例如<code>className</code>）。</li><li>组件实例保持不变，生命周期方法（如<code>componentDidUpdate</code>）会被触发。</li></ul></li></ul><p><strong>规则三：递归处理子节点</strong></p><ul><li>对于子节点的对比，React 默认使用<strong>逐层递归</strong>的方式。</li><li><strong>列表对比优化</strong>： <ul><li>当子元素是列表（例如通过<code>map</code>生成的元素）时，React 需要唯一<code>key</code>来标识元素，以高效复用 DOM 节点。</li><li>若未提供<code>key</code>，React 会按顺序对比子节点，可能导致性能下降或状态错误（例如列表顺序变化时）。</li></ul></li></ul><h4 id="更新真实-dom" tabindex="-1"><a class="header-anchor" href="#更新真实-dom"><span>更新真实 DOM</span></a></h4><ul><li>通过 Diffing 算法找出差异后，React 将生成一系列<strong>最小化的 DOM 操作指令</strong>（例如<code>updateTextContent</code>、<code>replaceChild</code>）。</li><li>这些指令会被批量应用到真实 DOM 上，以减少重绘和重排的次数，提高性能。</li></ul><h4 id="协调的优化策略" tabindex="-1"><a class="header-anchor" href="#协调的优化策略"><span>协调的优化策略</span></a></h4><ul><li><strong>Key 的作用</strong>：为列表元素提供唯一的<code>key</code>，帮助 React 识别元素的移动、添加或删除，避免不必要的重建。</li><li><strong>批量更新（Batching）</strong>：React 会将多个状态更新合并为一次渲染，减少重复计算。</li><li><strong>Fiber 架构</strong>（React 16+）： <ul><li>将协调过程拆分为可中断的“工作单元”（Fiber 节点），允许高优先级任务（如动画）优先处理。</li><li>支持异步渲染（Concurrent Mode），避免长时间阻塞主线程。</li></ul></li></ul><h3 id="_6、diff-算法" tabindex="-1"><a class="header-anchor" href="#_6、diff-算法"><span>6、diff 算法⭐</span></a></h3><h4 id="react-早期版本中的-diff-算法" tabindex="-1"><a class="header-anchor" href="#react-早期版本中的-diff-算法"><span>React 早期版本中的 Diff 算法</span></a></h4><p>在 React 15 及更早的版本中，diff 算法主要基于以下三个假设：</p><ol><li><strong>在同一个层级上，如果两个元素的类型不同，则认为它们之间没有关联</strong>。这意味着 React 会删除旧元素，并添加新元素。</li><li><strong>对于同类型的元素，如果它们拥有相同的 key，React 认为这两个元素是同一个元素</strong>。因此，React 只会更新这个元素的属性或子元素。</li><li><strong>对于拥有 key 的元素列表，React 会尝试找到相同 key 的元素并复用它们</strong>。如果没有指定 key，React 只能依赖元素的位置来进行匹配。</li></ol><p>这个算法的基本思想是通过比较虚拟 DOM 树的前后快照来找出最小的变更集，并将这些变更应用到实际的 DOM 上。</p><h4 id="react-16-中的-fiber-架构" tabindex="-1"><a class="header-anchor" href="#react-16-中的-fiber-架构"><span>React 16 中的 Fiber 架构</span></a></h4><p>随着 React 16 的发布，原有的 diff 算法被 Fiber 架构所替代。Fiber 是一种新的数据结构，它提供了更好的性能和更灵活的工作机制。Fiber 节点不仅包含关于组件的信息，还包含关于如何处理这些节点的指令。</p><p><strong>工作流程概述</strong></p><ul><li><strong>Reconciliation</strong>：当组件的状态或属性发生变化时，React 会重新渲染组件及其子组件，并创建一个新的虚拟 DOM 树。接着，React 会将新树与旧树进行比较，这个过程就是 Reconciliation。</li><li><strong>Commit 阶段</strong>：在 Reconciliation 完成后，React 会执行 Commit 阶段，将差异应用到实际的 DOM 上。在这个阶段，React 会批量执行 DOM 更新，以减少重绘和回流。</li></ul><h4 id="vue-diff-算法和-react-diff-算法的区别" tabindex="-1"><a class="header-anchor" href="#vue-diff-算法和-react-diff-算法的区别"><span><strong>Vue diff 算法和 React diff 算法的区别</strong></span></a></h4><p>Vue 和 React 的 diff 算法核心目标相同：<strong>高效地找出虚拟 DOM (Virtual DOM) 树的变化，并将最小变更应用到真实 DOM 上</strong>。</p><h5 id="diff-策略的核心思想" tabindex="-1"><a class="header-anchor" href="#diff-策略的核心思想"><span><strong>Diff 策略的核心思想</strong></span></a></h5><p><strong>React (Fiber 架构之后):</strong></p><ul><li><strong>基于链表结构的递归协调</strong>: 使用 Fiber 节点构成的链表树结构。</li><li>启发式算法 (Heuristic O(n) Algorithm): 遵循两个核心假设： <ol><li><strong>不同类型的元素会产生不同的树</strong>: 如果根节点类型不同（如从 <code>&lt;div&gt;</code> 变成 <code>&lt;span&gt;</code>），React 会直接销毁整棵旧子树并重建新子树。</li><li><strong>开发者可以通过 <code>key</code> prop 暗示哪些子元素在不同渲染下保持稳定</strong>: 在同层级子节点列表比较时，<code>key</code> 帮助 React 识别节点的移动、添加或删除。</li></ol></li><li><strong>逐层比较 (Level by Level)</strong>: 只比较同层级的节点，不会尝试跨层级移动节点（除非销毁重建）。这是其 O(n) 复杂度的基础。</li></ul><p><strong>Vue (2.x &amp; 3.x):</strong></p><ul><li><p>也基于 O(n) 的启发式算法: <strong>同样遵循“不同类型元素产生不同树”和“<code>key</code> 标识稳定节点”的原则</strong>。</p></li><li><p>更积极的同层级节点比较策略 (Vue 2 双端比较):</p><ul><li><p><strong>Vue 的双端对比策略</strong></p><p>分四步优化对比效率（Vue2 核心逻辑，Vue3 优化为最长递增子序列）：</p><ol><li><strong>头头对比</strong>：新旧头指针节点相同则复用，指针后移</li><li><strong>尾尾对比</strong>：新旧尾指针节点相同则复用，指针前移</li><li><strong>头尾交叉对比</strong>：旧头 vs 新尾，旧尾 vs 新头</li><li><strong>中间乱序对比</strong>：建立 key-index 映射表，复用可匹配节点</li></ol><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 旧列表：[A, B, C, D]</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 新列表：[D, A, B, C]</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Vue 通过步骤3头尾对比，仅移动 D 到头部</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 2: 在同层级子节点列表比较时，采用 “<strong>双端比较</strong>” (Double-end Diff) 算法。它会同时从新旧子节点列表的头（<code>oldStartIdx</code>, <code>newStartIdx</code>）和尾（<code>oldEndIdx</code>, <code>newEndIdx</code>） 开始向中间遍历比较。这种策略能更高效地识别出头尾节点相同但位置移动的情况（如列表反转），减少不必要的 DOM 操作。</p></li><li><p>Vue 3: 在双端比较的基础上，进行了重大优化，引入了 “<strong>最长递增子序列” (Longest Increasing Subsequence - LIS) 算法</strong>。在双端比较无法处理的中间节点乱序移动场景下（如 <code>[A, B, C, D]</code> -&gt; <code>[D, A, B, C]</code>），<strong>Vue 3 会利用 LIS 算法找出新列表中相对顺序保持不变的、最长的一组节点</strong>。这样就能<strong>最小化移动节点的次数</strong>，仅移动那些不在最长稳定序列中的节点。这是 Vue 3 diff 性能提升的关键点之一。</p></li></ul></li></ul><h5 id="组件粒度更新" tabindex="-1"><a class="header-anchor" href="#组件粒度更新"><span><strong>组件粒度更新</strong></span></a></h5><p><strong>React:</strong></p><ul><li>默认情况下，<strong>父组件更新会导致所有子组件递归更新 (除非使用 <code>React.memo</code>, <code>shouldComponentUpdate</code>, <code>PureComponent</code> 或 <code>useMemo</code> 进行手动优化)。</strong> 即使子组件的 props 没有变化，其 <code>render</code> 函数也会被调用（生成新的 VNode），然后进入 diff 过程。虽然 diff 可能判断出 DOM 无需更新，但生成 VNode 和 diff 本身也是有成本的。</li><li>需要开发者显式优化: 性能优化很大程度上依赖于开发者手动实现 <code>shouldComponentUpdate</code> 或使用 <code>React.memo</code> 等来阻止不必要的子组件渲染和 diff。</li></ul><p><strong>Vue:</strong></p><ul><li><strong>响应式系统驱动的细粒度更新</strong>: <ul><li>Vue 2: 每个组件实例对应一个 Watcher。当响应式数据变化时，会通知对应的 Watcher，触发组件更新。子组件只在其依赖的 props 或自身状态变化时才会更新。</li><li>Vue 3: 引入了基于 Proxy 的响应式系统和 <code>effect</code> 跟踪。更新粒度更细，组件更新只依赖于其实际使用的响应式数据。如果父组件更新但传递给子组件的 props 没有变化（或子组件没有使用变化的父级数据），子组件通常不会更新。</li></ul></li><li>编译时优化辅助: Vue 的模板编译器<strong>在编译阶段就能分析出模板中哪些部分是动态的（依赖响应式数据）</strong>。<strong>结合响应式系统，这使得 Vue 在组件更新层面通常比 React 更“智能”和“自动”，减少了不必要的子组件 diff。</strong></li></ul><h5 id="静态内容优化" tabindex="-1"><a class="header-anchor" href="#静态内容优化"><span><strong>静态内容优化</strong></span></a></h5><p><strong>React:</strong></p><ul><li><p><strong>手动控制更新</strong>： 需通过 <code>React.memo</code>、<code>shouldComponentUpdate</code> 或 <code>useMemo</code> 避免无效渲染</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> MemoComp</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">memo</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Static Content</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong>Vue:</strong></p><ul><li>强大的编译时优化: <ul><li><strong>静态提升 (Static Hoisting)</strong>: Vue 的模板编译器在编译阶段会将纯静态节点（及其子树）提取到 <code>render</code> 函数外部。这些静态节点对应的 VNode 只会在应用初始化时创建一次，后续更新时直接复用，避免了重复创建 VNode 和 diff 的成本。</li><li><strong>静态子树标记 (Vue 2) / Block Tree (Vue 3)</strong>: <ul><li>Vue 2: 在 diff 过程中，遇到标记为 <code>static</code> 的节点/子树会直接跳过其内部 diff。</li><li>Vue 3: 引入了更先进的 Block Tree 概念。一个 “Block” 是一个动态节点的容器（根通常是模板中的 <code>v-if</code>/<code>v-for</code>/根节点）。编译器会分析出哪些节点是动态的，哪些是静态的，并建立父子 Block 的依赖关系。在更新时： <ul><li>如果一个 Block 的结构指令条件（如 <code>v-if</code> 的值）没有改变，且其内部的动态节点没有变化（通过 <code>patchFlag</code> 判断），那么整个 Block 及其包含的所有静态内容都可以被跳过 diff。</li><li>这大幅减少了需要 diff 的节点数量，尤其对于包含大量静态内容但只有小部分动态内容的组件。</li></ul></li></ul></li></ul></li></ul><h5 id="动态节点更新优化-vue-3-特有" tabindex="-1"><a class="header-anchor" href="#动态节点更新优化-vue-3-特有"><span><strong>动态节点更新优化 (Vue 3 特有)</strong></span></a></h5><p><strong>Vue 3:</strong></p><ul><li><strong>Patch Flags (补丁标志)</strong>: 编译器在生成 VNode 时，会为动态节点打上 <code>patchFlag</code>。这个标志是一个位掩码，精确指示了该节点哪些部分需要被更新（例如：<code>1</code> 表示文本内容变化，<code>2</code> 表示 class 变化，<code>4</code> 表示 style 变化，<code>8</code> 表示 props 变化等等）。</li><li>作用: 在 <code>patch</code> (更新真实 DOM) 阶段**，运行时可以直接根据 <code>patchFlag</code> 精准定位需要更新的部分**，跳过对其他属性的不必要检查和更新。例如，如果 <code>patchFlag</code> 是 <code>1</code>，就只更新 <code>textContent</code>，完全不需要检查或更新 <code>class</code>, <code>style</code>, <code>props</code>。这显著提升了更新动态节点的效率。</li></ul><p><strong>React:</strong></p><p>**没有直接等效的机制。**在 diff VNode 属性时，需要比较新旧 props 对象的所有键值对（虽然 React 内部也有一些优化，但不如 <code>patchFlag</code> 直接和高效）。</p><h5 id="总结对比表" tabindex="-1"><a class="header-anchor" href="#总结对比表"><span><strong>总结对比表</strong></span></a></h5><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">React (Fiber)</th><th style="text-align:left;">Vue 2</th><th style="text-align:left;">Vue 3 (核心优势)</th></tr></thead><tbody><tr><td style="text-align:left;">核心 Diff 策略</td><td style="text-align:left;">同层级递归比较 (逐层)</td><td style="text-align:left;">同层级比较 + 双端比较</td><td style="text-align:left;">同层级比较 + 双端比较 + LIS 算法</td></tr><tr><td style="text-align:left;">组件更新粒度</td><td style="text-align:left;">默认递归更新子组件 (需手动优化)</td><td style="text-align:left;">响应式依赖追踪 (子组件按需更新)</td><td style="text-align:left;">响应式依赖追踪 + 更细粒度 effect</td></tr><tr><td style="text-align:left;">静态内容优化</td><td style="text-align:left;">运行时 diff 快 (但需生成 VNode)</td><td style="text-align:left;">静态子树标记 (跳过 diff)</td><td style="text-align:left;">静态提升 + Block Tree (跳过 VNode 生成和 diff)</td></tr><tr><td style="text-align:left;">动态节点优化</td><td style="text-align:left;">无特殊机制</td><td style="text-align:left;">无特殊机制</td><td style="text-align:left;">Patch Flags (精准更新)</td></tr><tr><td style="text-align:left;">节点移动优化</td><td style="text-align:left;">依赖 <code>key</code>，同层级顺序调整效率一般</td><td style="text-align:left;">依赖 <code>key</code>，双端比较优化头尾移动</td><td style="text-align:left;">依赖 <code>key</code>，LIS 算法优化乱序移动</td></tr><tr><td style="text-align:left;">设计侧重点</td><td style="text-align:left;">运行时优化，灵活性高</td><td style="text-align:left;">响应式 + 编译时辅助</td><td style="text-align:left;">强大的编译时优化 + 响应式</td></tr><tr><td style="text-align:left;">开发者优化负担</td><td style="text-align:left;">较高 (需主动使用 <code>memo</code>, <code>useMemo</code> 等)</td><td style="text-align:left;">较低</td><td style="text-align:left;">最低 (编译器自动优化较多)</td></tr><tr><td style="text-align:left;">适用场景</td><td style="text-align:left;">大型动态应用（需精细控制）</td><td style="text-align:left;">中小型应用（快速开发）</td><td style="text-align:left;">中小型应用（快速开发）</td></tr></tbody></table><h5 id="核心结论" tabindex="-1"><a class="header-anchor" href="#核心结论"><span><strong>核心结论</strong></span></a></h5><ul><li>React: 更注重<strong>运行时</strong>的灵活性和通用性（JSX 赋予了极大灵活性），其 diff 策略相对基础。性能优化很大程度上依赖开发者手动干预（<code>key</code>, <code>memo</code>, <code>useMemo</code>, <code>useCallback</code>）。</li><li>Vue (尤其是 Vue 3): 充分利用<strong>编译时</strong>信息进行激进优化（静态提升、Block Tree、Patch Flags），结合响应式系统实现更细粒度的自动更新。其 diff 算法（特别是同层级列表的 LIS 优化）在处理节点移动和动态更新上效率更高，且减少了对开发者手动优化的依赖。Vue 的设计哲学倾向于“开箱即用”的性能。</li></ul><h3 id="_7、react-concurrency-并发机制" tabindex="-1"><a class="header-anchor" href="#_7、react-concurrency-并发机制"><span>7、React concurrency 并发机制⭐</span></a></h3><p>React 的并发机制（Concurrency）是 React 18 引入的一项重要特性，旨在提升应用的响应性和性能。</p><p><strong>1. 什么是 React 的并发机制？</strong></p><p>React 的并发机制允许 React 在渲染过程中根据任务的优先级进行调度和中断，从而确保高优先级的更新能够及时渲染，而不会被低优先级的任务阻塞。</p><p><strong>2. 并发机制的工作原理：</strong></p><ul><li><strong>时间分片（Time Slicing）：</strong> React 将渲染任务拆分为多个小片段，每个片段在主线程空闲时执行。这使得浏览器可以在渲染过程中处理用户输入和其他高优先级任务，避免长时间的渲染阻塞用户交互。</li><li><strong>优先级调度（Priority Scheduling）：</strong> React 为不同的更新分配不同的优先级。高优先级的更新（如用户输入）会被优先处理，而低优先级的更新（如数据预加载）可以在空闲时处理。</li><li><strong>可中断渲染（Interruptible Rendering）：</strong> 在并发模式下，React 可以中断当前的渲染任务，处理更高优先级的任务，然后再恢复之前的渲染。这确保了应用在长时间渲染过程中仍能保持响应性。</li></ul><p><strong>3. 并发机制的优势：</strong></p><ul><li><strong>提升响应性：</strong> 通过优先处理高优先级任务，React 能够更快地响应用户输入，提升用户体验。</li><li><strong>优化性能：</strong> 将渲染任务拆分为小片段，避免长时间的渲染阻塞，提升应用的整体性能。</li><li><strong>更好的资源利用：</strong> 在主线程空闲时处理低优先级任务，充分利用系统资源。</li></ul><p><strong>4. 如何启用并发模式：</strong></p><p>要在 React 应用中启用并发模式，需要使用 <code>createRoot</code> API：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> ReactDOM</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react-dom/client&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> App</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./App&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> root</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">ReactDOM</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createRoot</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;root&#39;</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">App</span><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在并发模式下，React 会自动根据任务的优先级进行调度和渲染。</p><h3 id="_8、合成事件syntheticevent" tabindex="-1"><a class="header-anchor" href="#_8、合成事件syntheticevent"><span>8、合成事件<strong>SyntheticEvent</strong>⭐</span></a></h3><p>React 的合成事件（Synthetic Events）是一种跨浏览器的封装事件，它为开发者提供了一套统一的事件处理接口，使得在不同浏览器中处理事件变得更为一致和可靠。<strong>React 使用合成事件来解决浏览器之间的事件处理差异，并提供了一些额外的功能，如事件池化，以提高性能。</strong></p><p><strong>特点：</strong></p><ol><li><strong>跨浏览器兼容性</strong>：React的合成事件系统提供了一个统一的API，这样开发者就不需要担心不同浏览器之间存在的细微差别。</li><li><strong>事件委托</strong>：为了提高性能，React使用事件委托的方式，而不是为每个元素单独绑定事件监听器。这意味着所有的事件监听器都会绑定到最外层的容器节点上，当事件发生时，React会检查事件冒泡路径上的元素并调用相应的事件处理程序。</li><li><strong>统一的事件对象</strong>：React创建了自己的事件对象<code>SyntheticEvent</code>，这个对象拥有与原生DOM事件相似的方法（如<code>preventDefault()</code>和<code>stopPropagation()</code>），但是提供了一些额外的功能和一致性。</li><li><strong>事件池化</strong>：为了减少垃圾回收的压力，React对事件对象进行了池化管理。当事件触发后，事件对象会被复用而不是直接销毁，这可以减少内存消耗。</li></ol><p><strong>获取原生事件</strong>：</p><p>如果你需要访问原生DOM事件，可以通过<code>SyntheticEvent</code>的<code>nativeEvent</code>属性来获取：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> handleClick</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> nativeEvent</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">nativeEvent</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 处理原生事件</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>React16</strong></p><ul><li>所有事件挂载到document上</li><li>event不是原生的，是SyntheticEvent合成事件对象</li><li>和Vue事件不同，和DOM事件也不同</li></ul><p><strong>React17</strong></p><ul><li>绑定到root组件上</li><li>有利于多个React版本并存，例如微前端</li></ul><h3 id="_9、batchupdate-批处理" tabindex="-1"><a class="header-anchor" href="#_9、batchupdate-批处理"><span>9、batchUpdate（批处理）⭐</span></a></h3><p>React 的 <strong>batchUpdate（批处理更新）机制</strong> 是一种优化策略，旨在<strong>将多个状态更新合并为一次渲染</strong>，减少不必要的组件重新渲染次数，从而提高性能。</p><p>在 React 中，当组件的状态或属性发生变化时，通常会触发重新渲染。如果短时间内多次调用 <code>setState</code> 或者有多个更新被调度，React 会将这些更新合并在一起，一次性地更新 DOM。这种策略有助于减少浏览器的重绘（repainting）和回流（reflow），从而提高性能。</p><p><strong>BatchUpdate 的应用场景</strong></p><ul><li><strong>连续多次调用<code>setState</code></strong>：如果你在一个很短的时间内连续调用了多次<code>setState</code>，React会将这些状态更新合并为一个批次来处理。</li><li><strong>事件处理</strong>：在某些情况下，比如处理用户输入或多个事件时，React也会进行批量更新以减少DOM操作次数。</li><li><strong>定时任务</strong>：在使用<code>setTimeout</code>或<code>requestAnimationFrame</code>等异步任务时，React也会等待这些任务完成后再进行批量更新。</li></ul><p><strong>核心机制</strong></p><ol><li><strong>异步合并更新</strong> 当在 <strong>同一执行上下文</strong>（如同一个事件处理函数、生命周期方法或 React 合成事件）中多次调用状态更新（如 <code>setState</code>、<code>useState</code> 的 <code>setter</code> 函数），React 不会立即触发渲染，而是将多个更新收集到一个队列中，最终合并为一次更新，统一计算新状态并渲染。</li><li><strong>更新队列</strong> React 内部维护一个更新队列。在触发更新的代码块中，所有状态变更会被暂存到队列，直到代码执行完毕，React 才会一次性处理队列中的所有更新，生成新的虚拟 DOM，并通过 Diff 算法高效更新真实 DOM。</li></ol><p><strong>React 中的 BatchUpdate 实现</strong></p><p>在 React 16 引入 Fiber 架构之后，批处理变得更加高效和灵活。以下是一些关键点：</p><ol><li><strong>调度更新</strong>：当状态或属性发生变化时，React 会调度一个更新。这些更新被放入一个队列中等待处理。</li><li><strong>工作循环</strong>：React 的工作循环会检查是否有待处理的更新。如果有，它会开始 Reconciliation 过程，生成新的虚拟 DOM 树，并与旧的虚拟 DOM 树进行比较。</li><li><strong>提交更新</strong>：在 Reconciliation 完成后，React 会进入提交阶段（Commit phase），在这个阶段，React 会批量执行 DOM 更新。这意味着即使有多个更新，React 也会尽量一次性地将所有的变更应用到实际的 DOM 中。</li></ol><p><strong>触发批处理的场景</strong></p><ol><li><p><strong>React 合成事件：</strong> 如 <code>onClick</code>、<code>onChange</code> 等事件处理函数中的多次状态更新会自动批处理。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> handleClick</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 更新入队</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setName</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Alice&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 更新入队</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 最终合并为一次渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>React 生命周期函数：</strong> 在 <code>componentDidMount</code>、<code>componentDidUpdate</code> 等生命周期方法中的更新会被批处理。</p></li><li><p><strong>React 18+ 的自动批处理增强：</strong> React 18 引入 <code>createRoot</code> 后，即使在异步操作（如 <code>setTimeout</code>、<code>Promise</code>、原生事件回调）中的更新也会自动批处理：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// React 18 中自动批处理</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setName</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Alice&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 合并为一次渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>绕过批处理的场景</strong></p><ol><li><p><strong>React 17 及之前的异步代码：</strong> 在 <code>setTimeout</code>、<code>Promise</code> 或原生事件回调中的更新默认<strong>不会</strong>批处理，每次 <code>setState</code> 触发一次渲染：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// React 17 中会触发两次渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 渲染一次</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setName</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Alice&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 渲染第二次</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>手动强制同步更新：</strong> 使用 <code>flushSync</code>（React 18+）可强制立即更新，绕过批处理：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">flushSync</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react-dom&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">flushSync</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 立即渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setName</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Alice&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 再次渲染</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>如何手动触发 BatchUpdate</strong></p><p>在某些情况下，你可能希望手动控制批处理的时机。React 提供了一些方法来帮助开发者实现这一点：</p><ol><li><p><strong>使用 <code>React.unstable_batchedUpdates</code></strong>：</p><ul><li>在某些特定情况下，你可以使用 <code>React.unstable_batchedUpdates</code> 函数来手动触发批处理。这个函数允许你传递一个回调函数，在这个回调函数内的所有更新都将被批处理。</li></ul><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> performBatchedUpdates</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unstable_batchedUpdates</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 在这个回调函数内的所有更新将被批处理</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 例如调用多个 setState</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    component1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;"> });</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    component2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">text:</span><span style="color:#CE9178;"> &#39;Hello&#39;</span><span style="color:#D4D4D4;"> });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>请注意，<code>React.unstable_batchedUpdates</code> 是一个实验性的 API，不推荐在生产环境中使用。在大多数情况下，React 会自动处理批处理，你不需要手动干预。</p><h3 id="_10、setstate之后发生了哪些事情" tabindex="-1"><a class="header-anchor" href="#_10、setstate之后发生了哪些事情"><span>10、setState之后发生了哪些事情</span></a></h3><ol><li><strong>状态更新</strong>：<code>setState</code>接收新的状态值，并合并到当前状态中。</li><li><strong>调度更新</strong>：React将状态更新加入队列，并可能与其他更新一起批量处理。</li><li><strong>计算差异</strong>：React根据新状态重新计算虚拟DOM，并找出需要更新的部分。</li><li><strong>实际DOM更新</strong>：React仅更新实际DOM中的必要部分。</li><li><strong>生命周期方法调用</strong>：在更新的不同阶段，React会调用相关的生命周期方法。</li><li><strong>完成更新</strong>：DOM更新完成后，本次更新过程结束。</li></ol><h3 id="_11、react-组件渲染和更新的全过程" tabindex="-1"><a class="header-anchor" href="#_11、react-组件渲染和更新的全过程"><span>11、React 组件渲染和更新的全过程⭐</span></a></h3><p><strong>1. 整体流程概述</strong></p><p>React 的渲染和更新过程可以分为以下几个阶段：</p><ol><li><strong>初始化阶段</strong>：创建 Fiber 树和 Hooks 链表。</li><li><strong>渲染阶段</strong>：生成新的虚拟 DOM（Fiber 树）。</li><li><strong>协调阶段</strong>：对比新旧 Fiber 树，找出需要更新的部分。</li><li><strong>提交阶段</strong>：将更新应用到真实 DOM。</li><li><strong>清理阶段</strong>：重置全局变量，准备下一次更新。</li></ol><p><strong>2. 详细流程分析</strong></p><p><strong>（1）初始化阶段</strong></p><ul><li><strong>触发条件</strong>：组件首次渲染或状态/属性更新。</li><li><strong>关键函数</strong>：<code>render</code>、<code>createRoot</code>、<code>scheduleUpdateOnFiber</code>。</li><li>逻辑 <ol><li>通过 <code>ReactDOM.render</code> 或 <code>createRoot</code> 初始化应用。</li><li>创建根 Fiber 节点（<code>HostRoot</code>）。</li><li>调用 <code>scheduleUpdateOnFiber</code>，将更新任务加入调度队列。</li></ol></li></ul><p><strong>（2）渲染阶段</strong></p><ul><li><strong>触发条件</strong>：调度器开始执行任务。</li><li><strong>关键函数</strong>：<code>performSyncWorkOnRoot</code>、<code>beginWork</code>、<code>renderWithHooks</code>。</li><li>逻辑 <ol><li>调用 <code>performSyncWorkOnRoot</code>，开始渲染任务。</li><li>调用 <code>beginWork</code>，递归处理 Fiber 节点。</li><li>对于函数组件，调用 <code>renderWithHooks</code>，执行组件函数并生成新的 Hooks 链表。</li><li>对于类组件，调用 <code>instance.render</code>，生成新的虚拟 DOM。</li><li>对于 Host 组件（如 <code>div</code>），生成对应的 DOM 节点。</li></ol></li></ul><p><strong>（3）协调阶段</strong></p><ul><li><strong>触发条件</strong>：新的虚拟 DOM 生成后。</li><li><strong>关键函数</strong>：<code>reconcileChildren</code>、<code>diff</code>。</li><li>逻辑 <ol><li>调用 <code>reconcileChildren</code>，对比新旧 Fiber 节点。</li><li>根据 <code>diff</code> 算法，找出需要更新的节点。</li><li>为需要更新的节点打上 <code>Placement</code>、<code>Update</code>、<code>Deletion</code> 等标记。</li></ol></li></ul><p><strong>（4）提交阶段</strong></p><ul><li><strong>触发条件</strong>：协调阶段完成后。</li><li><strong>关键函数</strong>：<code>commitRoot</code>、<code>commitWork</code>。</li><li>逻辑 <ol><li>调用 <code>commitRoot</code>，开始提交更新。</li><li>调用 <code>commitWork</code>，递归处理 Fiber 节点。</li><li>根据节点的标记，执行 DOM 操作（如插入、更新、删除）。</li><li>调用生命周期钩子（如 <code>componentDidMount</code>、<code>componentDidUpdate</code>）。</li></ol></li></ul><p><strong>（5）清理阶段</strong></p><ul><li><strong>触发条件</strong>：提交阶段完成后。</li><li><strong>关键函数</strong>：<code>resetHooks</code>、<code>resetContext</code>。</li><li>逻辑 <ol><li>重置全局变量（如 <code>currentlyRenderingFiber</code>、<code>currentHook</code>）。</li><li>清理上下文和副作用。</li><li>准备下一次更新。</li></ol></li></ul><h2 id="三、react-hooks" tabindex="-1"><a class="header-anchor" href="#三、react-hooks"><span>三、React Hooks</span></a></h2><h3 id="为什么会有react-hooks-它解决了哪些问题" tabindex="-1"><a class="header-anchor" href="#为什么会有react-hooks-它解决了哪些问题"><span>为什么会有React Hooks，它解决了哪些问题</span></a></h3><ul><li>完善函数组件的能力，函数组件更适合React组件</li><li>组件逻辑复用，Hooks表现更好，使用Hooks，相同逻辑可分割到一个一个的useEffect中，而不是像class组件一样，分布在各个生命周期中</li><li>class复杂组件正在变得费解，不易拆解，不易测试，逻辑混乱</li></ul><p><strong>class组件的问题</strong></p><ul><li>大型组件很难拆分和重构，很难测试（即class不易拆分）</li><li>相同业务逻辑，分散到各个方法中，逻辑混乱</li><li>复用逻辑变得复杂，如Mixins，HOC，Render Props</li></ul><p>所以函数组件更适合React组件，但需要Hooks增强功能</p><h3 id="状态管理-hooks" tabindex="-1"><a class="header-anchor" href="#状态管理-hooks"><span>状态管理 Hooks</span></a></h3><h4 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate"><span>useState</span></a></h4><p><strong>用于在函数组件中添加局部状态</strong></p><ul><li>默认函数组件没有state</li><li>函数组件是一个纯函数，执行完即销毁，无法存储state</li><li>需要State Hook，即把state功能“钩”到纯函数中</li></ul><p><strong>useState使用总结</strong></p><ul><li><code>useState(0)</code>传入初始值，返回数组[state, setState]</li><li>通过state获取值</li><li>通过<code>setState(1)</code>修改值</li></ul><p><strong>Hooks命名规范</strong></p><ul><li>规定所有的Hooks都用use开头，如useXxx</li><li>自定义Hook也要以use开头</li><li>非Hooks的地方，尽量不要使用useXxx写法</li></ul><p><strong>代码演示</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ClickCounter</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 数组的解构</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // useState 就是一个 Hook “钩”，最基本的一个 Hook</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">count</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setCount</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 传入一个初始值</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> clickHandler</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">你点击了 </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> 次</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">clickHandler</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">点击</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> ClickCounter</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer"><span>useReducer</span></a></h4><p>用于管理复杂的状态逻辑，类似于 Redux 的 reducer。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useReducer</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> initialState</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> reducer</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    switch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        case</span><span style="color:#CE9178;"> &#39;increment&#39;</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        case</span><span style="color:#CE9178;"> &#39;decrement&#39;</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        default</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> state</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 很像 const [count, setCount] = useState(0)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">dispatch</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useReducer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">initialState</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        count: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;increment&#39;</span><span style="color:#D4D4D4;"> })</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">increment</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;decrement&#39;</span><span style="color:#D4D4D4;"> })</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">decrement</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>useReducer 和 redux 的区别</strong></p><ul><li>useReducer是useState的代替方案，用于state复杂变化</li><li>useReducer是单个组件状态管理，组件通讯还需要props</li><li>redux是全局的状态管理，多组件共享数据</li></ul><h3 id="副作用-hooks" tabindex="-1"><a class="header-anchor" href="#副作用-hooks"><span>副作用 Hooks</span></a></h3><h4 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect"><span>useEffect</span></a></h4><p>用于在函数组件中执行副作用操作（如数据获取、订阅、手动 DOM 操作等）</p><p><strong>让组件模拟生命周期</strong></p><ul><li>默认函数组件没有生命周期</li><li>函数组件是一个纯函数，执行完即销毁，自己无法实现生命周期</li><li>使用Effect Hook 把生命周期“钩”到纯函数中</li></ul><p><strong>useEffect使用总结</strong></p><ul><li><p>模拟 componentDidMount - useEffect 依赖 []</p></li><li><p>模拟 componentDidUpdate - useEffect 无依赖， 或者依赖 [a, b]</p></li><li><p>模拟 componentWillUnMount - useEffect 中返回一个函数fn</p><ul><li>useEffect依赖[]，组件销毁时执行fn，等于WillUnMounted</li><li>useEffect无依赖或依赖[a, b]，组件更新时执行fn</li><li>即，下一次执行useEffect之前，就会执行fn，无论更新或卸载</li></ul></li></ul><p><strong>代码演示</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> LifeCycles</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">count</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setCount</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 模拟 class 组件的 DidMount 和 DidUpdate</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;在此发送一个 ajax 请求&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 模拟 class 组件的 DidMount</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;加载完了&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, []) </span><span style="color:#6A9955;">// 第二个参数是 [] （不依赖于任何 state）</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 模拟 class 组件的 DidUpdate</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;更新了&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, [</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">]) </span><span style="color:#6A9955;">// 第二个参数就是依赖的 state</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 模拟 class 组件的 DidMount</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        let</span><span style="color:#9CDCFE;"> timerId</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setInterval</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">now</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 返回一个函数</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 模拟 WillUnMount</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearInterval</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">timerId</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, [])</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> clickHandler</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">你点击了 </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> 次</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">clickHandler</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">点击</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> LifeCycles</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>模拟WillUnMount，但不完全相等</strong></p><ul><li>useEffect依赖[]，组件销毁时执行fn，等于WillUnMounted</li><li>useEffect无依赖或依赖[a, b]，组件更新时执行fn</li><li>即，下一次执行useEffect之前，就会执行fn，无论更新或卸载</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> FriendStatus</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">friendId</span><span style="color:#D4D4D4;"> }) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">status</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setStatus</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // DidMount 和 DidUpdate</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`开始监听 </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">friendId</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> 在线状态\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 【特别注意】</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 此处并不完全等同于 WillUnMount</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // props 发生变化，即更新，也会执行结束监听</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 准确的说：返回的函数，会在下一次 effect 执行之前，被执行</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`结束监听 </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">friendId</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> 在线状态\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        好友 </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">friendId</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> 在线状态：</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> FriendStatus</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为何 dev 模式下 useEffect 执行两次？</strong></p><p>React 官方文档其实对这个问题进行了<a href="https://zh-hans.react.dev/reference/react/useEffect#my-effect-runs-twice-when-the-component-mounts" target="_blank" rel="noopener noreferrer">解答</a>：</p><p>在开发环境下，如果开启严格模式，React 会在实际运行 setup 之前额外运行一次 setup 和 cleanup。</p><p>这是一个压力测试，用于验证 Effect 的逻辑是否正确实现。如果出现可见问题，则 cleanup 函数缺少某些逻辑。cleanup 函数应该停止或撤消 setup 函数所做的任何操作。一般来说，用户不应该能够区分 setup 被调用一次（如在生产环境中）和调用 setup → cleanup → setup 序列（如在开发环境中）。</p><p>借助严格模式的目标是帮助开发者提前发现以下问题：</p><ol><li>不纯的渲染逻辑：例如，依赖外部状态或直接修改 DOM。</li><li>未正确清理的副作用：例如，未在 useEffect 的清理函数中取消订阅或清除定时器。</li><li>不稳定的组件行为：例如，组件在多次挂载和卸载时表现不一致。</li></ol><p>通过强制组件挂载和卸载两次，React 可以更好地暴露这些问题。</p><h4 id="uselayouteffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect"><span>useLayoutEffect</span></a></h4><p>与 <code>useEffect </code>类似，但<code>useLayoutEffect</code>是<strong>同步执行</strong>的，<strong>在 DOM 更新后、浏览器绘制前触发</strong>，适用于需要<strong>同步读取或修改DOM</strong>的场景，例如<strong>测量 DOM 元素、同步更新 DOM、动态布局调整、动画初始化</strong>等。由于它是同步执行的，可能会阻塞浏览器的渲染，因此应谨慎使用。</p><p>区别</p><ul><li><code>useEffect</code> 是异步执行的，而<code>useLayoutEffect</code>是同步执行的。</li><li><code>useEffect</code> 的执行时机是浏览器完成渲染之后，而 <code>useLayoutEffect</code> 的执行时机是浏览器把内容真正渲染到界面之前，和 <code>componentDidMount</code> 等价。</li></ul><p>总结</p><ol><li>优先使用 <code>useEffect</code>，因为它是异步执行的，不会阻塞渲染</li><li>会影响到渲染的操作尽量放到 <code>useLayoutEffect</code>中去，避免出现闪烁问题</li><li><code>useLayoutEffect</code>和<code>componentDidMount</code>是等价的，会同步调用，阻塞渲染</li><li>在服务端渲染的时候使用会有一个 warning，因为它可能导致首屏实际内容和服务端渲染出来的内容不一致。</li></ol><h3 id="上下文-hooks" tabindex="-1"><a class="header-anchor" href="#上下文-hooks"><span>上下文 Hooks</span></a></h3><h4 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext"><span>useContext</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 创建一个 Context</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> MyContext</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createContext</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Parent</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">sharedData</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setSharedData</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello from Context&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> updateData</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setSharedData</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Updated Data from Context&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 提供数据和更新函数</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">MyContext.Provider</span><span style="color:#9CDCFE;"> value</span><span style="color:#F44747;">={{ sharedData, updateData }}&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">      &lt;ChildA</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;/</span><span style="color:#9CDCFE;">MyContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Provider</span><span style="color:#D4D4D4;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件 A（引用子组件 B）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ChildA</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">ChildB</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件 B（使用 useContext）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ChildB</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">sharedData</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">updateData</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">useContext</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">MyContext</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">ChildB: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">sharedData</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">updateData</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Update Data</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> Parent</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useContext</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 主题颜色</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> themes</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    light:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        foreground:</span><span style="color:#CE9178;"> &#39;#000&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        background:</span><span style="color:#CE9178;"> &#39;#eee&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    dark:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        foreground:</span><span style="color:#CE9178;"> &#39;#fff&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        background:</span><span style="color:#CE9178;"> &#39;#222&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 创建 Context</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> ThemeContext</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createContext</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">themes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">light</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 初始值</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 提供数据和更新函数</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">ThemeContext.Provider</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">themes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dark</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#4EC9B0;">Toolbar</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#4EC9B0;">Toolbar</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">ThemeContext.Provider</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件 Toolbar（引用子组件 ThemeButton）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Toolbar</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#4EC9B0;">ThemeButton</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#4EC9B0;">ThemeButton</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件 ThemeButton（使用 useContext）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ThemeButton</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> theme</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useContext</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ThemeContext</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> style</span><span style="color:#F44747;">={{ background: theme.background, color: theme.foreground }}&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        hello</span><span style="color:#9CDCFE;"> world</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">    &lt;/button&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">export</span><span style="color:#9CDCFE;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引用-hooks" tabindex="-1"><a class="header-anchor" href="#引用-hooks"><span>引用 Hooks</span></a></h3><h4 id="useref" tabindex="-1"><a class="header-anchor" href="#useref"><span>useRef</span></a></h4><ul><li><p>用于创建一个可变的引用对象</p></li><li><p>它允许你在渲染之间持久地引用值</p></li><li><p>useRef通常用于两种主要情况：访问 DOM 节点和保留渲染之间的值。</p></li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useRef</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> UseRef</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> btnRef</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useRef</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 初始值</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // const numRef = useRef(0)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // numRef.current</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">btnRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// DOM 节点</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, [])</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">btnRef</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">click</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> UseRef</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能优化-hooks" tabindex="-1"><a class="header-anchor" href="#性能优化-hooks"><span>性能优化 Hooks</span></a></h3><h4 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo"><span>useMemo</span></a></h4><p><strong>用于缓存计算结果，避免在每次渲染时都重新计算。</strong></p><ul><li>React默认会更新所有子组件</li><li>class组件使用SCU和PureComponent做优化</li><li>Hooks中使用useMemo，但优化的原理是相同的</li><li>memo封装子组件，useMemo封装数据</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">memo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useMemo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 类似 class PureComponent ，对 props 进行浅层比较</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> Child</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">memo</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">userInfo</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Child render...&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">userInfo</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">This is Child </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">userInfo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#569CD6;"> {</span><span style="color:#9CDCFE;">userInfo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Parent render...&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">count</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setCount</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setName</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;双越老师&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // const userInfo = { name, age: 20 }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 用 useMemo 缓存数据，有依赖</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> userInfo</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useMemo</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 21</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, [</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            count is </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">click</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#4EC9B0;">Child</span><span style="color:#9CDCFE;"> userInfo</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">userInfo</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#4EC9B0;">Child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback"><span>useCallback</span></a></h4><p><strong>用于缓存回调函数，避免在每次渲染时都创建新的回调。</strong></p><p><strong>useMemo和useCallback的异同</strong></p><ul><li><p>都用于缓存数据，优化性能</p></li><li><p>两者接收的参数都是一样的，第一个参数表示一个回调函数，第二个表示依赖的数据</p></li><li><p>在依赖数据发生变化的时候，都会调用传进去的回调函数去重新计算结果，起到一个缓存的作用</p></li></ul><p>区别：</p><ul><li>useMemo缓存的结果是回调函数中return回来的值，主要用于<strong>缓存计算结果</strong>的值，应用场景如需要计算的状态</li><li>useCallback缓存的结果是<strong>回调函数</strong>，主要用于缓存函数，应用场景如需要缓存的函数，因为函数式组件每次任何一个state发生变化，会触发整个组件更新，一些函数是没有必要更新的，此时就应该缓存起来，提高性能，减少对资源的浪费</li></ul><p>另外还需要注意的是，useCallback应该和React.memo配套使用，缺了一个都可能导致性能不升反而下降。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useCallback</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件（使用 React.memo 避免无效重渲染）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> Button</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">memo</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">onClick</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`[子组件渲染] </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">label</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">onClick</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">label</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Counter</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">count</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setCount</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 没有缓存的函数（每次重新渲染都会创建新函数）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> c</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 使用 useCallback 缓存的函数（依赖项不变时保持相同引用）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> decrement</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useCallback</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> c</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    [] </span><span style="color:#6A9955;">// 空依赖表示永不重新创建</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">计数器: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      {</span><span style="color:#6A9955;">/* 点击会触发父组件重渲染，但 decrement 按钮不会重建函数 */</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">increment</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;增加&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      {</span><span style="color:#6A9955;">/* 因函数引用不变，Memo组件不会重渲染 */</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">decrement</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;减少&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      {</span><span style="color:#6A9955;">/* 内联函数每次都会重建 */</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;重置&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> Counter</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他-hooks" tabindex="-1"><a class="header-anchor" href="#其他-hooks"><span>其他 Hooks</span></a></h3><ul><li>useDeferredValue: 延迟更新 UI 的某些部分。</li><li>useActionState: 根据某个表单动作的结果更新 state。</li><li>useImperativeHandle: 用于自定义暴露给父组件的实例值，通常与 forwardRef 一起使用。</li><li>useDebugValue: 用于在 React 开发者工具中显示自定义 Hook 的标签。</li><li>useOptimistic 帮助你更乐观地更新用户界面</li><li>useTransition: 用于标记某些状态更新为“过渡”状态，允许你在更新期间显示加载指示器。</li><li>useId: 用于生成唯一的 ID，可以生成传递给无障碍属性的唯一 ID。</li><li>useSyncExternalStore: 用于订阅外部存储（如 Redux 或 Zustand）的状态。</li><li>useInsertionEffect: 为 CSS-in-JS 库的作者特意打造的，在布局副作用触发之前将元素插入到 DOM 中</li></ul><h4 id="useupdateeffect" tabindex="-1"><a class="header-anchor" href="#useupdateeffect"><span>useUpdateEffect</span></a></h4><p>ahooks里的</p><p><code>useUpdateEffect</code> 用法等同于 <code>useEffect</code>，但是会<strong>忽略首次执行</strong>，只在依赖更新时执行。</p><h4 id="usememoizedfn" tabindex="-1"><a class="header-anchor" href="#usememoizedfn"><span>useMemoizedFn</span></a></h4><p>ahooks里的</p><p>我在实现多页签方案时有实际使用</p><ul><li><p>一般情况下，可以使用 useMemoizedFn 完全代替 useCallback</p></li><li><p>在某些场景中，我们需要使用 useCallback 来记住一个函数，但是在第二个参数 deps 变化时，会重新生成函数，导致函数地址变化。</p></li><li><p>使用 useMemoizedFn，可以省略第二个参数 deps，同时保证函数地址永远不会变化。</p></li></ul><h3 id="自定义-hook" tabindex="-1"><a class="header-anchor" href="#自定义-hook"><span>自定义 Hook</span></a></h3><h4 id="自定义userequest" tabindex="-1"><a class="header-anchor" href="#自定义userequest"><span>自定义useRequest</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> axios</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;axios&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 封装 axios 发送网络请求的自定义 Hook</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> useRequest</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">data</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setData</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 存储请求的数据</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">loading</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setLoading</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 加载状态</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setError</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 错误信息</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  </span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      setLoading</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 设置加载状态为 true</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      setError</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 清空先前的错误</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> axios</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">          throw</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;请求失败!&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setData</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 设置数据</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setError</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 捕获错误并设置错误信息</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setLoading</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 请求结束，设置加载状态为 false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    fetchData</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }, [</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">]) </span><span style="color:#6A9955;">// 依赖于 url，当 url 改变时重新发起请求</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">loading</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> useRequest</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> useRequest</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;../customHooks/useRequest&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">loading</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">data</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">error</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">useRequest</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;https://xxx.xxxx.com/data&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">loading</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Loading...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">错误信息: </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">请求结果:</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">pre</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">pre</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义usemouseposition" tabindex="-1"><a class="header-anchor" href="#自定义usemouseposition"><span>自定义useMousePosition</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> useMousePosition</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setX</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">y</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setY</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        function</span><span style="color:#DCDCAA;"> mouseMoveHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            setX</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientX</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            setY</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientY</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 绑定事件</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mousemove&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">mouseMoveHandler</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 解绑事件</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mousemove&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">mouseMoveHandler</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, [])</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> useMousePosition</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> useMousePosition</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;../customHooks/useMousePosition&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">y</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useMousePosition</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> style</span><span style="color:#F44747;">={{ height: &#39;500px&#39;, backgroundColor: &#39;#ccc&#39; }}&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">        &lt;p&gt;鼠标位置</span><span style="color:#569CD6;"> {</span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;">}</span><span style="color:#569CD6;"> {</span><span style="color:#9CDCFE;">y</span><span style="color:#569CD6;">}</span><span style="color:#F44747;">&lt;/p&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">    &lt;/div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">export</span><span style="color:#9CDCFE;"> default</span><span style="color:#9CDCFE;"> App</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="倒计时useinterval" tabindex="-1"><a class="header-anchor" href="#倒计时useinterval"><span>倒计时useInterval</span></a></h4><p>ahooks中有这个功能</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">/**</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> * </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {*}</span><span style="color:#9CDCFE;"> fn</span><span style="color:#6A9955;"> 回调函数</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {*}</span><span style="color:#9CDCFE;"> delay</span><span style="color:#6A9955;"> 延迟时间</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {*}</span><span style="color:#9CDCFE;"> options</span><span style="color:#6A9955;"> {immediate} 是否立即执行</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> */</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> useInterval</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    fn</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    delay</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    options</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> immediate</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">immediate</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> fnRef</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useRef</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    fnRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> delay</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;number&#39;</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">delay</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">immediate</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            fnRef</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">current</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> timer</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">setInterval</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            fnRef</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">current</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }, </span><span style="color:#9CDCFE;">delay</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            clearInterval</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">timer</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, [</span><span style="color:#9CDCFE;">delay</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> useInterval</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">interval</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setInterval</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">count</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setCount</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> handleGo</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">useInterval</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setCount</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setInterval</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        handleGo</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    interval</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      immediate:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hooks-使用规范" tabindex="-1"><a class="header-anchor" href="#hooks-使用规范"><span>Hooks 使用规范</span></a></h3><ul><li>只能用于React函数组件和自定义Hook中，其他地方不可以</li><li>只能用于顶层代码，不能在循环、判断中使用Hooks（Hooks严重依赖于调用顺序，如果Hooks出现在循环、判断里，则无法保证顺序一致）</li><li>useEffect内部不能修改state，直接在<code>useEffect</code>中修改状态可能会导致状态更新的顺序混乱，可能会引发无限循环的重新渲染。</li><li>eslint插件eslint-plugin-resct-hooks可以帮到你</li></ul><p><strong>为何 Hooks 不能放在条件或循环之内？</strong></p><p>一个组件中的 hook 会以链表的形式串起来， FiberNode 的 memoizedState 中保存了 Hooks 链表中的第一个 Hook。</p><p>在更新时，会复用之前的 Hook，如果通过了条件或循环语句，增加或者删除 hooks，在复用 hooks 过程中，会产生复用 hooks状态和当前 hooks 不一致的问题。</p><h3 id="规范和注意事项" tabindex="-1"><a class="header-anchor" href="#规范和注意事项"><span>规范和注意事项</span></a></h3><ul><li><p>useState初始化值，只有第一次有效</p><ul><li>render: 初始化 state</li><li>re-render: 只恢复初始化的 state 值，不会再重新设置新的值。只能用 setName 修改</li></ul></li><li><p>useEffect内部不能修改state</p><ul><li>依赖为 [] 时： re-render 不会重新执行 effect 函数</li><li>没有依赖：re-render 会重新执行 effect 函数</li></ul></li><li><p>useEffect可能出现死循环</p><ul><li>当依赖中有引用对象时，会出现死循环</li><li>使用useRef来解决</li></ul></li></ul><h3 id="hooks-相比-hoc-和-render-props-有哪些优点" tabindex="-1"><a class="header-anchor" href="#hooks-相比-hoc-和-render-props-有哪些优点"><span>Hooks 相比 HOC 和 Render Props 有哪些优点</span></a></h3><ul><li>完全符合Hooks原有规则，没有其他要求，易理解记忆</li><li>变量作用域明确</li><li>不会产生组件嵌套</li></ul><h3 id="useeffect-的底层是如何实现的" tabindex="-1"><a class="header-anchor" href="#useeffect-的底层是如何实现的"><span>useEffect 的底层是如何实现的</span></a></h3><p>useEffect 是 React 用于管理副作用的 Hook，它在 commit 阶段 统一执行，确保副作用不会影响渲染。</p><p>在 React 源码中，useEffect 通过 Fiber 机制 在 commit 阶段 进行处理：</p><p><strong>(1) useEffect 存储在 Fiber 节点上</strong></p><p>React 组件是通过 Fiber 数据结构 组织的，每个 useEffect 都会存储在 fiber.updateQueue 中。</p><p><strong>(2) useEffect 何时执行</strong></p><p>React 组件更新后，React 在 commit 阶段 统一遍历 effect 队列，并执行 useEffect 副作用。</p><p>React 使用 <code>useEffectEvent()</code> 注册 effect，在 commitLayoutEffect 之后，异步执行 useEffect，避免阻塞 UI 渲染。</p><p><strong>(3) useEffect 依赖变化的处理</strong></p><p>依赖数组的比较使用 <code>Object.is()</code>，只有依赖变化时才重新执行 useEffect。</p><p>在更新阶段，React 遍历旧 effect，并先执行清理函数，然后再执行新的 effect。</p><p><strong>简化的 useEffect 实现如下：</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> useEffect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">callback</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dependencies</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> currentEffect</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getCurrentEffect</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// 获取当前 Fiber 节点的 Effect</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">dependenciesChanged</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentEffect</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dependencies</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dependencies</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    cleanupPreviousEffect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentEffect</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 先执行上次 effect 的清理函数</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> cleanup</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">callback</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// 执行 useEffect 传入的回调</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    currentEffect</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dependencies</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">dependencies</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    currentEffect</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">cleanup</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">cleanup</span><span style="color:#6A9955;"> // 存储清理函数</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比 useLayoutEffect，useEffect 是 异步执行，不会阻塞 UI 渲染。</p><h2 id="四、其他" tabindex="-1"><a class="header-anchor" href="#四、其他"><span>四、其他</span></a></h2><h3 id="_1、react16-17-18-19新特性更新对比" tabindex="-1"><a class="header-anchor" href="#_1、react16-17-18-19新特性更新对比"><span>1、React16,17,18,19新特性更新对比⭐</span></a></h3><h4 id="react-16-2017-fiber-架构革命" tabindex="-1"><a class="header-anchor" href="#react-16-2017-fiber-架构革命"><span><strong>React 16（2017） - Fiber 架构革命</strong></span></a></h4><ul><li><p>‌<strong>Fiber 架构引入</strong>‌：16.8 版本首次引入 Fiber 架构，将组件渲染分解为独立节点，优化性能为并发模式奠基。 ‌</p></li><li><p>‌<strong>Hooks 机制</strong>‌：新增多个生命周期钩子（如 useState、useEffect），解决函数组件状态管理问题，推动组件复用。 ‌</p></li><li><p><strong>Error Boundaries</strong>：通过 <code>componentDidCatch</code> 捕获组件树错误</p></li><li><p><strong>Fragment / Portal</strong>：<code>&lt;&gt;&lt;/&gt;</code> 片段语法、<code>ReactDOM.createPortal</code> 渲染到 DOM 外节点</p></li><li><p><strong>新生命周期</strong>：<code>getDerivedStateFromProps</code>、<code>getSnapshotBeforeUpdate</code></p></li></ul><h4 id="react-17-2020-平稳过渡版本" tabindex="-1"><a class="header-anchor" href="#react-17-2020-平稳过渡版本"><span><strong>React 17（2020） - 平稳过渡版本</strong></span></a></h4><ul><li>‌<strong>事件委托优化</strong>‌：事件绑定到根容器而非 <code>document</code>，支持多版本 React 共存。 ‌</li><li>‌<strong>无需引入 React 的 JSX</strong>‌：不再需显式 <code>import React</code>（通过 Babel 自动注入），减少代码冗余。 ‌</li><li>‌<strong>副作用清理优化</strong>‌：useEffect 的清理函数改为异步执行，减少渲染阻塞。 ‌</li></ul><h4 id="react-18-2022-并发模式时代" tabindex="-1"><a class="header-anchor" href="#react-18-2022-并发模式时代"><span><strong>React 18（2022） - 并发模式时代</strong></span></a></h4><ul><li><strong>并发特性支持</strong>‌：利用 Fiber 架构优势，函数组件可实现并发渲染。 ‌<code>createRoot</code> API 启用并发特性（非阻塞式渲染）</li><li>‌<strong>新生命周期废弃</strong>‌：完全移除 <code>componentWillMount</code> 等生命周期方法，推荐使用 <code>getDerivedStateFromProps</code> 等替代方案。 ‌</li><li><strong>自动批处理优化</strong>：异步操作中的 <code>setState</code> 自动合并更新</li><li><strong>Suspense 增强</strong>：支持数据获取场景（与 <code>React.lazy</code> 配合）</li><li><strong>新 Hook API</strong>：<code>useId</code>、<code>useSyncExternalStore</code>、<code>useInsertionEffect</code></li><li><strong>流式服务端渲染</strong>：<code>renderToPipeableStream</code> 提升首屏性能</li></ul><h4 id="react-19-2025-beta-未来标准" tabindex="-1"><a class="header-anchor" href="#react-19-2025-beta-未来标准"><span><strong>React 19（2025 Beta） - 未来标准</strong></span></a></h4><ul><li><p><strong>Actions API</strong>‌：简化异步操作管理，自动处理待处理状态、错误边界和乐观更新，支持表单提交状态共享。 ‌</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 使用表单的 Actions 和 useActionState</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ChangeName</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">setName</span><span style="color:#D4D4D4;"> }) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">submitAction</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">isPending</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useActionState</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">previousState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">formData</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> error</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> updateName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">formData</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> error</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      redirect</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/path&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    null</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">form</span><span style="color:#9CDCFE;"> action</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">submitAction</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;submit&quot;</span><span style="color:#9CDCFE;"> disabled</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">isPending</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Update</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      {</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">form</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>‌<strong>useTransition / useOptimistic</strong>‌：提供更简洁的异步状态管理方式，支持预加载资源和自定义错误处理。 ‌</p><ul><li><p>例：可以使用 <code>useTransition</code> 来为你处理待定状态</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 使用 Actions 中的待定状态</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> UpdateName</span><span style="color:#D4D4D4;">({}) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setName</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setError</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">isPending</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">startTransition</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useTransition</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> handleSubmit</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    startTransition</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> error</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> updateName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setError</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      } </span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      redirect</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/path&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> onChange</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">handleSubmit</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> disabled</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">isPending</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        Update</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      {</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="关键差异总结" tabindex="-1"><a class="header-anchor" href="#关键差异总结"><span><strong>关键差异总结</strong></span></a></h4><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">React 16</th><th style="text-align:left;">React 17</th><th style="text-align:left;">React 18</th><th style="text-align:left;">React 19</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Fiber 架构</strong></td><td style="text-align:left;">✓</td><td style="text-align:left;">✓</td><td style="text-align:left;">✓</td><td style="text-align:left;">✓</td></tr><tr><td style="text-align:left;"><strong>并发模式</strong></td><td style="text-align:left;">✗</td><td style="text-align:left;">✗</td><td style="text-align:left;">✓</td><td style="text-align:left;">✓（优化）</td></tr><tr><td style="text-align:left;"><strong>Suspense 数据</strong></td><td style="text-align:left;">✗</td><td style="text-align:left;">✗</td><td style="text-align:left;">✓</td><td style="text-align:left;">✓（增强）</td></tr><tr><td style="text-align:left;"><strong>服务端组件</strong></td><td style="text-align:left;">✗</td><td style="text-align:left;">✗</td><td style="text-align:left;">实验性</td><td style="text-align:left;"><strong>正式支持</strong></td></tr><tr><td style="text-align:left;"><strong>自动批处理</strong></td><td style="text-align:left;">仅同步</td><td style="text-align:left;">仅同步</td><td style="text-align:left;"><strong>全场景</strong></td><td style="text-align:left;">✓</td></tr><tr><td style="text-align:left;"><strong>Actions API</strong></td><td style="text-align:left;">✗</td><td style="text-align:left;">✗</td><td style="text-align:left;">✗</td><td style="text-align:left;">✓</td></tr></tbody></table><h3 id="_2、jquery和框架的区别" tabindex="-1"><a class="header-anchor" href="#_2、jquery和框架的区别"><span>2、Jquery和框架的区别</span></a></h3><p>框架：数据和视图分离，以数据驱动视图，只关心数据变化，dom操作被封装。数据驱动</p><p>Jquery： 依靠dom操作去组合业务逻辑。事件驱动</p><h3 id="_3、react和vue对比" tabindex="-1"><a class="header-anchor" href="#_3、react和vue对比"><span>3、React和Vue对比⭐</span></a></h3><p><strong>共同点</strong></p><ul><li><strong>组件化架构：</strong> 两者都将 UI 分解为独立、可复用的组件。每个组件管理自己的状态和视图。</li><li><strong>虚拟 DOM：</strong> 都使用虚拟 DOM 来提高渲染性能。当状态变化时，先在内存中构建新的虚拟 DOM 树，然后与旧的虚拟 DOM 树进行高效的对比（Diffing），最后只将实际变化的部分更新到真实 DOM。</li><li><strong>声明式渲染：</strong> 开发者主要描述“UI 应该是什么样子”（基于当前状态），而不是手动操作 DOM（命令式）。框架负责根据状态变化自动更新 DOM。</li><li><strong>响应式数据绑定：</strong> 都提供了机制让视图能够自动响应底层数据状态的变化。</li><li><strong>活跃的生态系统：</strong> 两者都有庞大且活跃的社区，提供了丰富的第三方库、工具（路由、状态管理、构建工具等）和学习资源。</li><li><strong>适用于构建现代单页应用：</strong> 都是构建复杂、交互丰富的单页应用程序的理想选择。</li><li><strong>支持服务端渲染：</strong> 都提供了解决方案（React: Next.js, Vue: Nuxt.js）来支持服务端渲染，改善 SEO 和首屏加载速度。</li></ul><p><strong>主要差异点</strong></p><ul><li><strong>核心库定位</strong>：React 更灵活但需要自行选择路由、状态管理等配套方案；Vue 提供更开箱即用的集成体验。</li><li><strong>模板语法</strong>：React使用JSX，Vue使用类似 HTML 的模板语法，指令 (<code>v-</code>) 提供逻辑。 <ul><li>JSX 是 JavaScript 的语法扩展，能力更强更灵活（JS 里能做的它都能做）；Vue 模板更接近标准 HTML，对设计师/新手更友好，逻辑受限（需指令）。</li></ul></li><li><strong>状态管理 (核心)</strong>：React 需要显式调用更新函数；Vue 自动追踪依赖并在属性修改时更新。React 更强调不可变性；Vue 拥抱可变性但底层通过代理实现响应。</li><li><strong>学习曲线</strong>：Vue 学习曲线相对平缓，通常被认为对新手更友好，更容易上手；React 学习曲线相对陡峭， JSX、函数式思想、Hooks 心智模型、不可变性概念、需要自行选型集成。</li><li><strong>API 风格</strong>：Vue 提供了两种风格供选择（选项式 API &amp; 组合式 API，组合式 API 是未来趋势）；React 已全面转向函数式 + Hooks。类组件已不推荐。</li><li><strong>构建工具</strong>：两者都支持 Vite，但 Vue 与 Vite 的集成和推广更紧密。</li></ul>`,564)]))}const y=n(r,[["render",i],["__file","React小记.html.vue"]]),C=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/React%E5%B0%8F%E8%AE%B0.html","title":"React小记","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1755418287000,"contributors":[{"name":"csmSimona","username":"csmSimona","email":"980715844@qq.com","commits":11,"url":"https://github.com/csmSimona"}],"changelog":[{"hash":"495ef7e0b47b7e0ea8b34d3850d15ad123ed4cb0","time":1755418287000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"b1b59fcbe4322ab951f22a25ced0344564429464","time":1752911801000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"71fbd227e603679f77860fd4ad21c8741bd2fb27","time":1744813819000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"106aaa0e4dbb002ed34f1ac7ef4194cb3459d2a2","time":1744126956000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"3401b256fd980d05cecb3295e5045ddff08a0533","time":1729095078000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"28944703ca380950be1536e88d7eb1c5bd61afaf","time":1727023893000,"email":"980715844@qq.com","author":"csmSimona","message":"update docs"},{"hash":"c287bcfa4680949d3a72e08bed51be080e7f607d","time":1726624620000,"email":"980715844@qq.com","author":"csmSimona","message":"fix picture url"},{"hash":"b838a67df4a86387934479ec6107a377ae7d89fa","time":1726590005000,"email":"980715844@qq.com","author":"csmSimona","message":"update docs"},{"hash":"7664101232f5f67659e67fffb8a3d65d84183179","time":1725470219000,"email":"980715844@qq.com","author":"csmSimona","message":"update vue"},{"hash":"f2e253faf986e81a43d713c8c9121bbb9bea2116","time":1725384859000,"email":"980715844@qq.com","author":"csmSimona","message":"update vue小记"},{"hash":"c0d4d15fdf0689f997f6de6b8b764f488f580b66","time":1724740884000,"email":"980715844@qq.com","author":"csmSimona","message":"init"}]},"filePathRelative":"前端基础汇总/React小记.md","readingTime":{"minutes":79.7,"words":23910}}');export{y as comp,C as data};
