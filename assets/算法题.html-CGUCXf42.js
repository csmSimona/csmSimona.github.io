import{_ as n,c as a,a as l,o as e}from"./app-CHuoViYK.js";const p={};function o(c,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="算法题" tabindex="-1"><a class="header-anchor" href="#算法题"><span>算法题</span></a></h2><h3 id="大数相加" tabindex="-1"><a class="header-anchor" href="#大数相加"><span>大数相加</span></a></h3><p><strong>解释</strong></p><ul><li>首先我们用字符串的形式来保存大数，就保证了其在数学表示上不会发生变化</li><li>初始化<code>res, temp</code>变量来保存中间计算的结果，在将两个字符串<code>split</code>为数组，以便我们进行每一位的运算</li><li>循环的第一次就是进行 &quot;个位&quot; 的运算，将二者最末尾的两个数相加，由于每一位数字是0 - 9，所以需要进行进位，在进过取余数操作后，将结果保留在个位。</li><li>判断 <code>temp</code> 是否大于 10，若是则将 <code>temp</code> 赋值为 <code>true</code>。</li><li>在两个大数中的一个还有数字没有参与运算，或者前一次运算发生进位后，进行下一次循环。</li><li>接着除了对新的两个数字相加还要加上 <code>temp</code>，<strong>若上次发生了进位，则此时 <code>temp</code> 为 <code>true</code>，Js因为存在隐式转换，所以 <code>true</code> 转换为 1，我们借用 Js 的类型转换，完成了逻辑上的逢10进1操作。</strong></li><li>接下来就是重复上述的操作，直到计算结束。</li><li>除去非数字的字符</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> sumBigNumber</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#CE9178;"> &quot;0&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    b</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        temp</span><span style="color:#D4D4D4;"> += ~~</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">() + ~~</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        res</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;"> % </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) + </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        temp</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">^</span><span style="color:#D16969;">0</span><span style="color:#D7BA7D;">+</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">sumBigNumber</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;3782647863278468012934670&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;23784678091370408971329048718239749083&#39;</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">// 23784678091374191619192327186252683753</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串全排列" tabindex="-1"><a class="header-anchor" href="#字符串全排列"><span>字符串全排列</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> perm</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            var</span><span style="color:#9CDCFE;"> char</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            var</span><span style="color:#9CDCFE;"> newStr</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">slice</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">) + </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">slice</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            var</span><span style="color:#9CDCFE;"> str</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">perm</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newStr</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">                var</span><span style="color:#9CDCFE;"> tmp</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">char</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">tmp</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="辗转相除法求最大公约数" tabindex="-1"><a class="header-anchor" href="#辗转相除法求最大公约数"><span>辗转相除法求最大公约数</span></a></h3><p><strong>约数</strong></p><p>如果数 a 能被数 b 整除，a 就叫做 b 的倍数，b 就叫做 a 的<code>约数</code>。</p><p><strong>最大公约数</strong></p><p>最大公约数就是两个数中,大家都能相约且最大的数。</p><p><strong>辗转相除法</strong></p><p><code>辗转相除法</code>又名欧几里得算法（Euclidean algorithm）,目的是求出两个正整数的最大公约数。它是已知最古老的算法,其可追溯至公元前300年前。</p><p>这条算法基于一个定理：两个正整数 a 和 b（a 大于 b）,它们的最大公约数等于 a 除以 b 的余数 c 和 较小数 b 之间的最大公约数。</p><p>算法计算过程是这样的:</p><ul><li>2个数相除，得出余数</li><li>如果余数不为0，则拿较小的数与余数继续相除，判断新的余数是否为0</li><li>如果余数为0，则最大公约数就是本次相除中较小的数。</li></ul><p>比如数字 25 和 10 ，使用辗转相除法求最大公约数过程如下：</p><ul><li>25 除以 10 商 2 余 5</li><li>根据辗转相除法可以得出，25 和 10 的最大公约数等于 5 和 10 之间的最大公约数</li><li>10 除以 5 商 2 余 0， 所以 5 和 10 之间的最大公约数为 5，因此25 和 10 的最大公约数为 5</li></ul><p><strong>题目要求</strong></p><p>完善函数 <code>gcd</code> 的功能。函数 gcd 会计算并返回传入的两个正整数参数之间最大的公约数</p><p>如下所示：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">，</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 返回结果为 3</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">24</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 返回结果为 12</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">111</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">11</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 返回结果为 1</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">num1</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">num2</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> remainder</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    do</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">       remainder</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">num1</span><span style="color:#D4D4D4;"> % </span><span style="color:#9CDCFE;">num2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">       num1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">num2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">       num2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">remainder</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">remainder</span><span style="color:#D4D4D4;">!==</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> num1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">24</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">));</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现辗转相除法通常有两种思路，分别如下</p><p>1、<strong>使用循环实现</strong></p><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">number1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">number2</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> remainder</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  do</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    remainder</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">number1</span><span style="color:#D4D4D4;"> % </span><span style="color:#9CDCFE;">number2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    number1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">number2</span><span style="color:#D4D4D4;">; </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    number2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">remainder</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">remainder</span><span style="color:#D4D4D4;"> !== </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> number1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、<strong>使用函数递归</strong></p><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">number1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">number2</span><span style="color:#D4D4D4;">) { </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">number2</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> number1</span><span style="color:#D4D4D4;">; </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> gcd</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">number2</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">number1</span><span style="color:#D4D4D4;"> % </span><span style="color:#9CDCFE;">number2</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript实现树的深度优先遍历和广度优先遍历" tabindex="-1"><a class="header-anchor" href="#javascript实现树的深度优先遍历和广度优先遍历"><span>JavaScript实现树的深度优先遍历和广度优先遍历</span></a></h3><h4 id="深度优先遍历-depth-first-search-dfs" tabindex="-1"><a class="header-anchor" href="#深度优先遍历-depth-first-search-dfs"><span>深度优先遍历（Depth-First Search, DFS）</span></a></h4><p>该方法是以纵向的维度对dom树进行遍历，从一个dom节点开始，一直遍历其子节点，直到它的所有子节点都被遍历完毕之后在遍历它的兄弟节点。即如图所示（遍历顺序为红字锁标）：</p><p><img src="https://segmentfault.com/img/bVbqEoQ?w=432&amp;h=391" alt="clipboard.png"></p><p>深度优先遍历可以通过递归或使用栈来实现。</p><p>首先，我们需要定义一个树的基本数据结构。这里我们使用一个简单的 JavaScript 对象来表示树的节点：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> TreeNode</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;"> = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  addChild</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">childNode</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">childNode</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归实现</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> dfsRecursive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 访问当前节点</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">child</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    dfsRecursive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">child</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 递归访问子节点</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用栈实现</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> dfsIterative</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> stack</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 访问当前节点</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 将子节点压入栈中，注意顺序，保证先进后出</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">--) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="广度优先遍历-breadth-first-search-bfs" tabindex="-1"><a class="header-anchor" href="#广度优先遍历-breadth-first-search-bfs"><span>广度优先遍历（Breadth-First Search, BFS）</span></a></h4><p>以横向的维度对dom树进行遍历，从该节点的第一个子节点开始，遍历其所有的兄弟节点，再遍历第一个节点的子节点，完成该遍历之后，暂时不深入，开始遍历其兄弟节点的子节点。即如图所示（遍历顺序为红字锁标）：</p><p><img src="https://segmentfault.com/img/bVbqEv0?w=407&amp;h=392" alt="clipboard.png"></p><p>可以通过队列来实现，每次从队列中取出一个节点，并将其子节点依次加入队列。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> bfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> queue</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">queue</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">queue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 访问当前节点</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 将子节点加入队列</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">child</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      queue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">child</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现一个函数isstrvalid函数" tabindex="-1"><a class="header-anchor" href="#实现一个函数isstrvalid函数"><span>实现一个函数isStrValid函数</span></a></h3><p>判断字符串是否是有效字符串，字符串包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 、字母和数字</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">[] </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">[]{} </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> ture</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">[[[] </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">[[()}] </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> false</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> isStrValid</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> stack</span><span style="color:#D4D4D4;"> = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;(&#39;</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;{&#39;</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;[&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;)&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;(&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;]&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;[&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;}&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;{&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51)]))}const r=n(p,[["render",o],["__file","算法题.html.vue"]]),D=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E9%A2%98.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1726590005000,"contributors":[{"name":"csmSimona","username":"csmSimona","email":"980715844@qq.com","commits":2,"url":"https://github.com/csmSimona"}],"changelog":[{"hash":"b838a67df4a86387934479ec6107a377ae7d89fa","time":1726590005000,"email":"980715844@qq.com","author":"csmSimona","message":"update docs"},{"hash":"c0d4d15fdf0689f997f6de6b8b764f488f580b66","time":1724740884000,"email":"980715844@qq.com","author":"csmSimona","message":"init"}]},"filePathRelative":"算法/算法题.md","readingTime":{"minutes":5.06,"words":1517}}');export{r as comp,D as data};
