import{_ as n,c as a,a as l,o as e}from"./app-CV_YGbv2.js";const p={};function i(c,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="typescript小记" tabindex="-1"><a class="header-anchor" href="#typescript小记"><span>Typescript小记</span></a></h1><p><a href="https://www.mianshipai.com/docs/first-exam/TS.html" title="TypeScript面试题" target="_blank" rel="noopener noreferrer">TypeScript面试题</a></p><h2 id="ts-基础类型有哪些" tabindex="-1"><a class="header-anchor" href="#ts-基础类型有哪些"><span>TS 基础类型有哪些</span></a></h2><ul><li>boolean</li><li>number</li><li>string</li><li>symbol</li><li>bigint</li><li>Enum 枚举</li><li>Array 数组</li><li>Tuple 元祖</li><li>Object 对象</li><li>undefined</li><li>null</li><li>any void never unknown</li></ul><h2 id="keyof-和-typeof-有什么区别" tabindex="-1"><a class="header-anchor" href="#keyof-和-typeof-有什么区别"><span>keyof 和 typeof 有什么区别？</span></a></h2><p><code>typeof</code>是 JS 基础用法，用于获取类型，这个很简单。</p><p><code>keyof</code>是 TS 语法，用于获取所有 key 的类型，例如</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  location</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> PersonType</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">keyof</span><span style="color:#4EC9B0;"> Person</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 等价于 type PersonType = &#39;name&#39; | &#39;age&#39; | &#39;location&#39;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="any-void-never-unknown-有什么区别" tabindex="-1"><a class="header-anchor" href="#any-void-never-unknown-有什么区别"><span>any void never unknown 有什么区别</span></a></h2><p>主要区别：</p><ul><li><code>any</code>任何类型，会忽略语法检查</li><li><code>void</code>没有任何类型，和<code>any</code>相反</li><li><code>never</code>永不存在的值的类型</li><li><code>unknown</code>不可预知的类型，不会忽略语法检查（一个更安全的 any）</li></ul><p>代码示例</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> {} </span><span style="color:#6A9955;">// void 一般定义函数返回值</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 返回 never 的函数，都必须存在无法到达的终点，如死循环、抛出异常。</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> error</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  throw</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Error</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> infiniteLoop</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  while</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) {}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// unknown 比直接使用 any 更安全</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;abc&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toUpperCase</span><span style="color:#D4D4D4;">()) </span><span style="color:#6A9955;">// 不会报错，但不安全</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> b</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">unknown</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;abc&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// console.log( b.toUpperCase() ) // 会报错！！！</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">b</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> string</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">toUpperCase</span><span style="color:#D4D4D4;">()) </span><span style="color:#6A9955;">// 使用 as 转换类型，意思是告诉 TS 编译器：“我知道 b 的类型，我对安全负责”</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：但现在 unknown 用的比 any 少很多，因为麻烦</p><h2 id="ts-访问修饰符-public-protected-private-有什么作用" tabindex="-1"><a class="header-anchor" href="#ts-访问修饰符-public-protected-private-有什么作用"><span>TS 访问修饰符 public protected private 有什么作用</span></a></h2><ul><li>public 公开的，谁都能用 （默认）</li><li>protected 受保护的，只有自己和子类可以访问</li><li>private 私有的，仅自己可以访问</li></ul><p>这些规则很难用语法去具体描述，看代码示例</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  protected</span><span style="color:#9CDCFE;"> age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  private</span><span style="color:#9CDCFE;"> girlfriend</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;小丽&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // public protected private 也可以修饰方法、getter 等</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Employee</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  getInfo</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // console.log(this.girlfriend) // 这里会报错，private 属性不能在子类中访问</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> zhangsan</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Employee</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;张三&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">zhangsan</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// console.log(zhangsan.age) // 这里会报错，protected 属性不能在子类对象中访问，只能在子类中访问</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="和private有什么区别" tabindex="-1"><a class="header-anchor" href="#和private有什么区别"><span><code>#</code>和<code>private</code>有什么区别？</span></a></h2><p><code>#</code>在 TS 中可定义私有属性</p><p>区别：</p><ul><li><code>#</code>属性，不能在参数中定义</li><li><code>private</code>属性，可通过<code>as any</code>强制获取</li><li><code>#</code>属性，更私密</li></ul><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  #salary</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    private</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    salary</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  ) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">#salary</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">salary</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;xxx&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// const n = p.name // 报错</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> n</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">p</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> any</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">name</span><span style="color:#6A9955;"> // 可以通过“投机取巧”获取到</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// const s = p.#salary // 报错</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// const s = (p as any).#salary // 报错</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-和-interface-共同和区别-如何选择" tabindex="-1"><a class="header-anchor" href="#type-和-interface-共同和区别-如何选择"><span>type 和 interface 共同和区别，如何选择</span></a></h2><p>共同点</p><ul><li>都能描述一个对象结构</li><li>都能被 class 实现</li><li>都能被扩展</li></ul><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 接口</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> User</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  getName</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> string</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 自定义类型</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> UserType</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  getName</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> string</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// class UserClass implements User {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> UserClass</span><span style="color:#569CD6;"> implements</span><span style="color:#4EC9B0;"> UserType</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;x&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">20</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  getName</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同点</p><ul><li>type 可以声明基础类型</li><li>type 有联合类型和交差类型</li><li>type 可以被<code>typeof</code>赋值</li></ul><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// type 基础类型</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> list</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// type 联合类型</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> info</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T1</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T2</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// interface T2 { age: number  } // 联合，还可以是 interface ，乱吧...</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">T1</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">T2</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T3</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;x&#39;</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T4</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">T1</span><span style="color:#D4D4D4;"> &amp; </span><span style="color:#4EC9B0;">T2</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> b</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T4</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;x&#39;</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// typeof 获取</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T5</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> b</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//【补充】还有个 keyof ，它和 typeof 完全不同，它是获取 key 类型的</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> K1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">keyof</span><span style="color:#4EC9B0;"> T5</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> k</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">K1</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;name&#39;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何选择</p><ul><li>能用 interface 就尽量用 interface</li><li>除非必须用 type 的时候才用 type</li></ul><p>PS. 其实你混淆 type 和 interface 不是你的问题，这是 TS 设计的问题，或者说 TS 设计初衷和后来演变带来的副作用。</p><h2 id="什么是泛型-如何使用它" tabindex="-1"><a class="header-anchor" href="#什么是泛型-如何使用它"><span>什么是泛型，如何使用它</span></a></h2><p>泛型 Generics 即通用类型，可以灵活的定义类型而无需写死。</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> list</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt; = [</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;b&#39;</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> numbers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">&gt; = [</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> User</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> userList</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt; = [{ </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;x&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;"> }]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型的使用</p><ol><li><p>用于函数</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// Type 一般可简写为 T</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> arg</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> x1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&#39;xxx&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 可以有多个泛型，名称自己定义</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&#39;x&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用于 class</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> SomeClass</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  getName</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> s1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> SomeClass</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&#39;xx&#39;</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用于 type</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> arg</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> myFn</span><span style="color:#D4D4D4;">: &lt;</span><span style="color:#4EC9B0;">U</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">U</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> U</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fn</span><span style="color:#6A9955;"> // U T 随便定义</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用于interface</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// interface F1 {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//   &lt;T&gt;(arg: T): T;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> F1</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">T</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> arg</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> myFn</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">F1</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#9CDCFE;">fn</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="什么是交叉类型和联合类型" tabindex="-1"><a class="header-anchor" href="#什么是交叉类型和联合类型"><span>什么是交叉类型和联合类型</span></a></h2><h3 id="交叉类型t1-t2" tabindex="-1"><a class="header-anchor" href="#交叉类型t1-t2"><span>交叉类型<code>T1 &amp; T2</code></span></a></h3><p>交叉类型是将多个类型合并为一个类型，包含了所需的所有类型的特性。例如<code>T1 &amp; T2 &amp; T3</code></p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> U1</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  city</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> U2</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> UserType1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">U1</span><span style="color:#D4D4D4;"> &amp; </span><span style="color:#4EC9B0;">U2</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> userA</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">UserType1</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;x&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">city:</span><span style="color:#CE9178;"> &#39;beijing&#39;</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 可在 userA 获取所有属性，相当于“并集”</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">userA</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">userA</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">userA</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">city</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项</p><ol><li><p>两个类型的相同属性，如果类型不同（冲突了），则该属性是<code>never</code>类型</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 如上代码</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// U1 name:string ，U2 name: number</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 则 UserType1 name 是 never</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>基础类型没办法交叉，会返回<code>never</code></p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> &amp; </span><span style="color:#4EC9B0;">number</span><span style="color:#6A9955;"> // never</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="联合类型t1-t2" tabindex="-1"><a class="header-anchor" href="#联合类型t1-t2"><span>联合类型<code>T1 | T2</code></span></a></h3><p>一种“或”的关系。格式如<code>T1 | T2 | T3</code>。</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> U1</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  city</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> U2</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">U1</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">U2</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;x&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项</p><p>基础类型可以联合</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;x&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> b</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果未赋值的情况下，联合类型无法使用 string 或 number 的方法</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 报错</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="是否用过工具类型" tabindex="-1"><a class="header-anchor" href="#是否用过工具类型"><span>是否用过工具类型</span></a></h2><p>TS 工具类型有<code>Partial、Required、Omit、ReadOnly</code>等，熟练使用 TS 的人都会熟悉这些工具类型。</p><p><code>Partial&lt;T&gt; </code>属性设置为可选</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> User</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> User1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Partial</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#6A9955;">// 属性全部可选，类似 \`?\`</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> u</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">User1</span><span style="color:#D4D4D4;"> = {}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Require&lt;T&gt;</code>属性设置为必选 （和 Partial 相反）</p><p><code>Pick&lt;T, K&gt;</code>挑选部分属性</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> User</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  city</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> User1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Pick</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&#39;age&#39;</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#6A9955;">// 只选择两个属性</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> u</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">User1</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;x&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;"> }</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Omit&lt;T, K&gt;</code>剔除部分属性（和 Pick 相反）</p><p><code>ReadOnly&lt;T&gt;</code>属性设置为只读</p><p>相当于为每个属性都设置一遍<code>readonly</code></p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> User</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> User1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Readonly</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> u</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">User1</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;x&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// u.name = &#39;y&#39; // 报错</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ts-这些符号-分别什么意思" tabindex="-1"><a class="header-anchor" href="#ts-这些符号-分别什么意思"><span>TS 这些符号 <code>?</code> <code>?.</code> <code>??</code> <code>!</code> <code>_</code> <code>&amp;</code> <code>|</code> <code>#</code> 分别什么意思</span></a></h2><p><code>?</code>可选属性，可选参数</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> User</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> u</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;xx&#39;</span><span style="color:#D4D4D4;"> } </span><span style="color:#6A9955;">// age 可写 可不写</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 第二个参数可不传</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>?.</code>可选链：有则获取，没有则返回 undefined ，但不报错。</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> user</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  info:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    city:</span><span style="color:#CE9178;"> &#39;北京&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// const c = user &amp;&amp; user.info &amp;&amp; user.info.city</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> c</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">city</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>??</code>空值合并运算符：当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> user</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // name: &#39;张三&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  index:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// const n1 = user.name ?? &#39;暂无姓名&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> n2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> || </span><span style="color:#CE9178;">&#39;暂无姓名&#39;</span><span style="color:#6A9955;"> // 某些情况可用 || 代替</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">n2</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> i1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> ?? </span><span style="color:#CE9178;">&#39;暂无 index&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> i2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> || </span><span style="color:#CE9178;">&#39;暂无 index&#39;</span><span style="color:#6A9955;"> // 当是 0 （或 false 空字符串等）时，就不能直接用 || 代替</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;index&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">i1</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 0</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;i2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">i2</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 暂无 index</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>!</code>非空断言操作符：忽略 undefined null ，自己把控风险</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;">!.</span><span style="color:#9CDCFE;">length</span><span style="color:#6A9955;"> // 加 ! 表示忽略 undefined 情况</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_</code>数字分隔符：分割数字，增加可读性</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> million</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1_000_000</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> phone</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">173_1777_7777</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 编译出 js 就是普通数字</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的本文都有讲解</p><ul><li><code>&amp;</code>交叉类型</li><li><code>|</code>联合类型</li><li><code>#</code>私有属性</li></ul><h2 id="什么是抽象类-abstract-class" tabindex="-1"><a class="header-anchor" href="#什么是抽象类-abstract-class"><span>什么是抽象类 abstract class</span></a></h2><p>抽象类，不能直接被实例化，必须派生一个子类才能使用。</p><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">abstract</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  abstract</span><span style="color:#DCDCAA;"> makeSound</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">void</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  move</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;roaming the earch...&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// const a = new Animal() // 直接实例化，报错</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Dog</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 必须要实现 Animal 中的抽象方法，否则报错</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  makeSound</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;wang wang&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> d</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">makeSound</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">move</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何扩展-window-属性-如何定义第三方模块的类型" tabindex="-1"><a class="header-anchor" href="#如何扩展-window-属性-如何定义第三方模块的类型"><span>如何扩展 window 属性，如何定义第三方模块的类型</span></a></h2><div class="language-typescript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-typescript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> interface</span><span style="color:#4EC9B0;"> Window</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  test</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">test</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;aa&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">test</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81)]))}const r=n(p,[["render",i],["__file","Typescript面试题.html.vue"]]),t=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/Typescript%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Typescript小记","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744273585000,"contributors":[{"name":"csmSimona","username":"csmSimona","email":"980715844@qq.com","commits":1,"url":"https://github.com/csmSimona"}],"changelog":[{"hash":"ab3105cdb91c61b578143576c285c0fc2f68b336","time":1744273585000,"email":"980715844@qq.com","author":"csmSimona","message":"add / update"}]},"filePathRelative":"前端基础汇总/Typescript面试题.md","readingTime":{"minutes":6.59,"words":1978}}');export{r as comp,t as data};
