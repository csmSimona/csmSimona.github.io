import{_ as n,c as a,a as l,o as e}from"./app-BmN7UyQ9.js";const p={};function i(o,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="前端常见面试题" tabindex="-1"><a class="header-anchor" href="#前端常见面试题"><span>前端常见面试题</span></a></h1><h2 id="vue常见面试题" tabindex="-1"><a class="header-anchor" href="#vue常见面试题"><span>Vue常见面试题</span></a></h2><h2 id="react常见面试题" tabindex="-1"><a class="header-anchor" href="#react常见面试题"><span>React常见面试题</span></a></h2><h3 id="react和vue的区别" tabindex="-1"><a class="header-anchor" href="#react和vue的区别"><span>React和Vue的区别⭐</span></a></h3><ul><li><p>都支持组件化</p></li><li><p>都是数据驱动视图</p></li><li><p>都使用vdom操作DOM</p></li><li><p>React使用JSX拥抱JS，Vue使用模板拥抱html</p></li><li><p>React函数式编程，Vue声明式编程</p></li><li><p>React需要更多的自力更生，Vue把想要的都给你</p></li></ul><h3 id="vue-react-jquery的区别" tabindex="-1"><a class="header-anchor" href="#vue-react-jquery的区别"><span>Vue react jquery的区别</span></a></h3><h4 id="jquery和框架的区别" tabindex="-1"><a class="header-anchor" href="#jquery和框架的区别"><span>jquery和框架的区别</span></a></h4><p>框架：数据和视图分离，以数据驱动视图，只关心数据变化，dom操作被封装。数据驱动</p><p>jquery： 依靠dom操作去组合业务逻辑。事件驱动</p><h4 id="react和vue对比" tabindex="-1"><a class="header-anchor" href="#react和vue对比"><span>React和Vue对比⭐</span></a></h4><p>这篇文章挺好的：https://www.jianshu.com/p/b7cd52868e95?from=groupmessage</p><p><strong>两者本质区别</strong></p><ul><li>Vue—本质是MVVM框架，由MVC发展而来</li><li>React—本质是前端组件化框架，由后端组件化发展而来</li></ul><p><strong>模板的区别</strong></p><ul><li>Vue—使用模板（最初由Angular提出）</li><li>React—使用JSX</li><li>模板语法上，更倾向于JSX</li><li>模板分离上，更倾向于Vue（React模板与JS混在一起，未分离）</li></ul><p><strong>组件化的区别</strong></p><ul><li>React本身就是组件化，没有组件化就不是React</li><li>Vue也支持组件化，不过是在MVVM上的扩展</li><li>对于组件化，更倾向于React，做得彻底而清新</li></ul><p><strong>两者共同点</strong></p><ul><li>都支持组件化</li><li>都是数据驱动视图</li></ul><h4 id="什么时候用react-什么时候用vue" tabindex="-1"><a class="header-anchor" href="#什么时候用react-什么时候用vue"><span>什么时候用react，什么时候用vue</span></a></h4><p>react灵活性比较大，处理复杂业务时有更多技术方案的选择 。</p><p>vue提供了更丰富的api，实现功能简单，但也因api多会对灵活性有一定的限制。</p><p>做复杂度比较高的项目时使用react，面向用户端复杂度不高的使用vue 。</p><h2 id="前端工程化面试问题" tabindex="-1"><a class="header-anchor" href="#前端工程化面试问题"><span>前端工程化面试问题</span></a></h2><h3 id="less在webpack中时如何被打包的" tabindex="-1"><a class="header-anchor" href="#less在webpack中时如何被打包的"><span>less在webpack中时如何被打包的</span></a></h3><p>less-loader -&gt; css-loader -&gt; style-loader</p><ul><li>less-loader：用于将less翻译成浏览器可识别的css</li><li>css-loader：处理 import / require（） @import / url 引入的内容</li><li>style-loader：通过一个JS脚本创建一个style标签，里面包含一些样式</li></ul><h3 id="es6-module和common-js-的区别" tabindex="-1"><a class="header-anchor" href="#es6-module和common-js-的区别"><span>ES6 Module和Common.js 的区别</span></a></h3><ul><li>ES6 Module静态引入，编译时引入</li><li>commonjs动态引入，执行时引入</li><li>只有在ES6 Module才能静态分析，实现tree-shaking</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// ES6 Module.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> apiList</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;../config/api.js&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">isDev</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 编译时报错，只能静态引入</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    import</span><span style="color:#9CDCFE;"> apiList</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;../config/api_dev.js&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// common.js</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> apiList</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;../config/api.js&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">isDev</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 可以动态引入，执行时引入</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    apiList</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;../config/api_dev.js&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>CommonJS 模块加载过程是同步阻塞性地加载，在模块代码被运行前就已经写入了 cache，同一个模块被多次 require 时只会执行一次，重复的 require 得到的是相同的 exports 引用。</p></li><li><p>ES6 模块会在程序开始前先根据模块关系查找到所有模块，生成一个无环关系图，并将所有模块实例都创建好，这种方式天然地避免了循环引用的问题，当然也有模块加载缓存，重复 import 同一个模块，只会执行一次代码。</p></li><li><p>CommonJS 可以在运行时使用变量进行 require, 例如 require(path.join(&#39;xxxx&#39;, &#39;xxx.js&#39;))，而静态 import 语法（还有动态 import，返回 Promise）不行，因为 ES6 模块会先解析所有模块再执行代码。</p></li><li><p>require 会将完整的 exports 对象引入，import 可以只 import 部分必要的内容，这也是为什么使用 Tree Shaking 时必须使用 ES6 模块 的写法。</p></li><li><p>import 另一个模块没有 export 的变量，在代码执行前就会报错，而 CommonJS 是在模块运行时才报错。</p></li></ul><h2 id="umi相关" tabindex="-1"><a class="header-anchor" href="#umi相关"><span>umi相关⭐</span></a></h2><h3 id="umi中的基本配置项" tabindex="-1"><a class="header-anchor" href="#umi中的基本配置项"><span>umi中的基本配置项</span></a></h3><h4 id="_1-基本配置" tabindex="-1"><a class="header-anchor" href="#_1-基本配置"><span>1. <strong>基本配置</strong></span></a></h4><ul><li><p><strong><code>publicPath</code></strong>：指定打包后的资源路径。这对于部署在子目录的应用非常重要。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">publicPath</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;/my-app/&#39;</span><span style="color:#D4D4D4;">,</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong><code>outputPath</code></strong>：指定输出目录，默认为 <code>dist</code>。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">outputPath</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;build&#39;</span><span style="color:#D4D4D4;">,</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="_2-代码分割" tabindex="-1"><a class="header-anchor" href="#_2-代码分割"><span>2. <strong>代码分割</strong></span></a></h4><ul><li><p><strong><code>chainWebpack</code></strong>：允许使用 Webpack Chain API 来进一步配置 Webpack。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">chainWebpack</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">memo</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  memo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">module</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">rule</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;images&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;url-loader&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      .</span><span style="color:#DCDCAA;">loader</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;url-loader&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      .</span><span style="color:#DCDCAA;">options</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        limit:</span><span style="color:#B5CEA8;"> 10240</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 10kb</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        name:</span><span style="color:#CE9178;"> &#39;static/[name].[hash:8].[ext]&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">},</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>dynamicImport</code></strong>：控制动态导入的行为，可以开启或关闭代码分割。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">dynamicImport</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">  loading</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;@/components/PageLoading/index&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">  webpackChunkName</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">},</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-压缩" tabindex="-1"><a class="header-anchor" href="#_3-压缩"><span>3. <strong>压缩</strong></span></a></h4><ul><li><p><strong><code>optimizeCss</code></strong>：启用 CSS 压缩。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">optimizeCss</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">  enabled</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">},</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>compress</code></strong>：启用 JavaScript 压缩。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">compress</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="_4-资源加载" tabindex="-1"><a class="header-anchor" href="#_4-资源加载"><span>4. <strong>资源加载</strong></span></a></h4><ul><li><p><strong><code>proxy</code></strong>：配置代理服务器，这对于开发阶段的 API 调用很有用。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">proxy</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">  &#39;/api&#39;</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    target:</span><span style="color:#CE9178;"> &#39;http://localhost:3000&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">},</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>extraBabelPlugins</code></strong>：添加额外的 Babel 插件。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">extraBabelPlugins</span><span style="color:#D4D4D4;">: [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  [</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">    &#39;import&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">libraryName:</span><span style="color:#CE9178;"> &#39;antd&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">style:</span><span style="color:#CE9178;"> &#39;css&#39;</span><span style="color:#D4D4D4;"> },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  ],</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">],</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_5-分析工具" tabindex="-1"><a class="header-anchor" href="#_5-分析工具"><span>5. <strong>分析工具</strong></span></a></h4><ul><li><p><strong><code>analysis</code></strong>：开启 Webpack Bundle Analyzer 来分析打包后的文件大小。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">analysis</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong><code>disableCSSnano</code></strong>：禁用 CSS 压缩工具 CSSnano。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">disableCSSnano</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong><code>hash</code></strong>：为输出文件添加哈希值。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">hash</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong><code>define</code></strong>：定义全局变量。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">define</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">  &#39;process.env&#39;</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    NODE_ENV:</span><span style="color:#CE9178;"> &#39;&quot;production&quot;&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">},</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="umi中userequest的底层是什么" tabindex="-1"><a class="header-anchor" href="#umi中userequest的底层是什么"><span>umi中useRequest的底层是什么</span></a></h3><p>Umi.js 中的 <code>useRequest</code> 是一个基于 React Hooks 的功能，用于简化发起网络请求的操作，并且自动处理请求的状态（如 loading、error）。<code>useRequest</code> 的底层实现主要依赖于几个关键部分：</p><ol><li><p><strong>React Hooks</strong>：</p><ul><li><code>useEffect</code>：用于监听请求的触发条件，并在条件变化时执行请求。</li><li><code>useState</code>：用于管理请求的状态（如 loading 状态、错误信息等）。</li></ul></li><li><p><strong>请求处理</strong>：</p><ul><li>Umi 的 <code>request</code> 方法：如前所述，这是基于 <code>fetch</code> API 的封装，负责实际的网络请求。</li></ul></li><li><p><strong>状态管理</strong>：</p><ul><li>通过 <code>useState</code> 创建的状态来跟踪请求的进度（如 loading、error、data）。</li></ul></li></ol><p>具体来说，<code>useRequest</code> 的工作流程大致如下：</p><ol><li><strong>初始化状态</strong>：使用 <code>useState</code> 初始化请求的状态，如 <code>loading</code>、<code>error</code> 和 <code>data</code>。</li><li><strong>注册请求函数</strong>：通过 <code>useCallback</code> 创建一个请求函数，这个函数会在每次调用时返回一个新的函数实例，保证每次请求都是独立的。</li><li><strong>监听依赖项变化</strong>：使用 <code>useEffect</code> 监听依赖项的变化，当依赖项改变时触发请求。</li><li><strong>处理请求结果</strong>： <ul><li>请求成功时更新数据状态。</li><li>请求失败时处理错误，并更新错误状态。</li></ul></li><li><strong>清理副作用</strong>：在组件卸载或不再需要请求时，取消请求，防止内存泄漏。</li></ol><p><strong>示例代码</strong></p><p>假设有一个简单的 <code>useRequest</code> 实现（简化版）：</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useCallback</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">request</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@umijs/max&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> useRequest</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;"> = {}) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">loading</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setLoading</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setError</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">data</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setData</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">useState</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> fetchData</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useCallback</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      setLoading</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> request</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      setData</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      setError</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      setLoading</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }, [</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    fetchData</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }, [</span><span style="color:#9CDCFE;">fetchData</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// 依赖项中包含 fetchData，确保每次依赖项改变时重新请求</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">loading</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">refetch:</span><span style="color:#9CDCFE;"> fetchData</span><span style="color:#D4D4D4;"> };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mfsu是什么" tabindex="-1"><a class="header-anchor" href="#mfsu是什么"><span>MFSU是什么</span></a></h3><p>MFSU 是一种<strong>基于 webpack5 新特性 Module Federation（模块联邦）</strong> 的打包提速方案。</p><blockquote><p><a href="https://webpack.docschina.org/concepts/module-federation/" target="_blank" rel="noopener noreferrer">Module Federation</a> 是 Webpack 5 引入的一项新特性，它允许你将应用拆分成多个可以互相共享模块的“远程”应用。这些应用可以独立部署，并且在运行时按需加载彼此的模块。</p></blockquote><p>其核心的思路是通过分而治之，将应用源代码的编译和应用依赖的编译分离，将变动较小的应用依赖构建为一个 Module Federation 的 remote 应用，以免去应用热更新时对依赖的编译。</p><p>开启mfsu可以<strong>大幅减少启动项目和热更新所需的时间</strong>。在生产模式，也可以通过提前编译依赖，大幅提升部署效率。</p><h4 id="mfsu-的底层实现" tabindex="-1"><a class="header-anchor" href="#mfsu-的底层实现"><span>MFSU 的底层实现</span></a></h4><h5 id="_1-webpack-module-federation" tabindex="-1"><a class="header-anchor" href="#_1-webpack-module-federation"><span>1. <strong>Webpack Module Federation</strong></span></a></h5><p>Module Federation 提供了以下关键特性：</p><ul><li><strong>Remote Entry Files</strong>：每个应用会生成一个或多个远程入口文件（remote entry file），其中包含模块的元数据和加载地址。</li><li><strong>Shared Modules</strong>：定义哪些模块可以被共享，并且可以被其他应用使用。</li><li><strong>Exposure and Consumption</strong>：定义模块的暴露和消费方式。</li></ul><h5 id="_2-umijs-plugin-mfsu" tabindex="-1"><a class="header-anchor" href="#_2-umijs-plugin-mfsu"><span>2. <strong>@umijs/plugin-mfsu</strong></span></a></h5><p>Umi.js 提供了一个名为 <code>@umijs/plugin-mfsu</code> 的插件，它负责配置和管理 Module Federation 的相关设置。这个插件为 Umi.js 添加了对 Module Federation 的支持，并提供了许多便捷的功能，如自动代码分割、动态加载子应用等。</p><p><strong>总结</strong></p><p>MFSU 的底层实现主要依赖于 Webpack Module Federation 和 Umi.js 的 <code>@umijs/plugin-mfsu</code> 插件。通过这些技术，Umi.js 能够支持微前端架构，使得应用可以被拆分成多个独立部署的子应用，并且在运行时动态加载和组合这些子应用。这种架构模式不仅提高了应用的可维护性和灵活性，还可以显著改善应用的性能和加载速度。</p><h4 id="为什么比vite还快" tabindex="-1"><a class="header-anchor" href="#为什么比vite还快"><span>为什么比vite还快</span></a></h4><p>主要是因为它在微前端场景下进行了专门的优化，尤其是在<strong>动态加载和代码分割</strong>方面。</p><ol><li><strong>模块联邦</strong>：MFSU 利用了 Module Federation，这使得微前端架构下的子应用可以动态加载，减少了初始加载时间。</li><li><strong>代码分割</strong>：MFSU 提供了更细粒度的代码分割，使得每个子应用都可以作为一个独立的模块加载，而不是一次性加载整个应用。</li><li><strong>全局状态管理</strong>：MFSU 支持全局状态管理，这在微前端场景下非常有用，可以减少状态同步的复杂性。</li></ol><p>在某些特定场景下，如：</p><ul><li><strong>大规模应用</strong>：对于非常大的应用，MFSU 的模块联邦和代码分割策略可以显著提高应用的加载速度。</li><li><strong>高并发请求</strong>：在需要频繁加载不同子应用的情况下，MFSU 的按需加载策略可以减少不必要的资源加载。</li></ul><p>相比之下，Vite 更适合快速开发和迭代，特别是在较小规模的应用中。</p><p>如果你的应用是一个大型微前端项目，MFSU 可能更适合你；如果你的应用规模较小，或者更关注开发体验，那么 Vite 可能是一个更好的选择。</p><h3 id="umi和next的区别" tabindex="-1"><a class="header-anchor" href="#umi和next的区别"><span>umi和next的区别</span></a></h3><p><strong>Umi.js</strong></p><ul><li><strong>目标定位</strong>：Umi.js 是一个可插拔的<strong>企业级前端应用框架</strong>，专为构建大型企业应用而设计。</li><li><strong>适用场景</strong>：适合构建大型单页应用（SPA）、多页应用（MPA）以及微前端应用。Umi 提供了很多企业级功能，如代码分割、国际化支持、主题定制等。</li></ul><p><strong>Next.js</strong></p><ul><li><strong>目标定位</strong>：Next.js 是一个用于构建现代 Web 应用的框架，尤其适合构建**服务端渲染（SSR）**和静态站点生成（SSG）的应用。</li><li><strong>适用场景</strong>：适合构建高性能的 Web 应用，尤其是需要 SEO 优化的电商网站、博客、新闻网站等。Next.js 支持 SSR、SSG、增量静态再生成（ISR）等多种渲染模式。</li></ul><h2 id="项目相关" tabindex="-1"><a class="header-anchor" href="#项目相关"><span>项目相关</span></a></h2><h3 id="权限设计方案" tabindex="-1"><a class="header-anchor" href="#权限设计方案"><span>权限设计方案</span></a></h3><p>三种前后端权限管理方案：</p><p>1、通过用户角色来过滤菜单(前端方式控制)，路由在前端配置，通过API返回角色过滤</p><p>2、通过后台来动态生成路由表(后台方式控制)</p><p>3、通过后台返回所有权限集合（包括菜单和按钮），前端固定路由，进行过滤</p><h3 id="多页签中的右键选中-是如何做到把浏览器原生右键打开的弹窗覆盖掉的" tabindex="-1"><a class="header-anchor" href="#多页签中的右键选中-是如何做到把浏览器原生右键打开的弹窗覆盖掉的"><span>多页签中的右键选中，是如何做到把浏览器原生右键打开的弹窗覆盖掉的？</span></a></h3><p><strong>自定义右键菜单具体实现</strong></p><p>1、禁用浏览器弹出默认菜单的行为，通过阻止<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event" target="_blank" rel="noopener noreferrer">contextMenu</a>事件的默认行为，并同时触发自定义菜单的显示</p><p>2、通过Dropdown实现菜单样式，触发器<code>trigger</code>配置<code>contextMenu</code>，从而实现鼠标右键触发下拉菜单</p><div class="language-React line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="React" data-title="React"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-React;"><code><span class="line"><span class="line"><span>const setTab = useMemoizedFn((tab, key, index) =&gt; (</span></span></span>
<span class="line"><span class="line"><span>  &lt;span onContextMenu={(event) =&gt; event.preventDefault()}&gt;</span></span></span>
<span class="line"><span class="line"><span>      &lt;Dropdown overlay={setMenu(key, index)} trigger={[&#39;contextMenu&#39;]}&gt;</span></span></span>
<span class="line"><span class="line"><span>        &lt;span className={styles.tabTitle}&gt;{tab}&lt;/span&gt;</span></span></span>
<span class="line"><span class="line"><span>      &lt;/Dropdown&gt;</span></span></span>
<span class="line"><span class="line"><span>  &lt;/span&gt;</span></span></span>
<span class="line"><span class="line"><span>));</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="竞态问题-todo" tabindex="-1"><a class="header-anchor" href="#竞态问题-todo"><span>竞态问题（TODO）</span></a></h3><p>AbortController</p><p>https://juejin.cn/post/6970710521104302110</p><p>竞态问题（Race Condition）是指在并发编程中，当多个操作顺序不确定时，可能导致意外的结果。在前端开发中，竞态问题通常出现在异步操作中，比如 AJAX 请求、事件监听器的回调、定时器等。下面详细介绍如何解决前端开发中的竞态问题。</p><h4 id="常见的竞态问题场景" tabindex="-1"><a class="header-anchor" href="#常见的竞态问题场景"><span>常见的竞态问题场景</span></a></h4><ol><li><strong>多次请求同一资源</strong>：例如，当用户快速点击按钮时，可能会触发多次 AJAX 请求。</li><li><strong>状态更新冲突</strong>：多个异步操作可能同时更新同一个状态，导致数据不一致。</li><li><strong>异步回调顺序</strong>：多个异步操作的回调函数执行顺序不确定，可能导致逻辑错误。</li></ol><h4 id="解决竞态问题的方法" tabindex="-1"><a class="header-anchor" href="#解决竞态问题的方法"><span>解决竞态问题的方法</span></a></h4><h5 id="_1-使用-promises-和-async-await" tabindex="-1"><a class="header-anchor" href="#_1-使用-promises-和-async-await"><span>1. 使用 Promises 和 async/await</span></a></h5><p>Promises 和 async/await 可以帮助你更好地控制异步操作的执行顺序，避免竞态问题。</p><p><strong>示例代码</strong>：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Error fetching data:&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 使用 async/await 控制异步操作顺序</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  await</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;https://api.example.com/data1&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  await</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;https://api.example.com/data2&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})();</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-使用防抖-debounce-和节流-throttle" tabindex="-1"><a class="header-anchor" href="#_2-使用防抖-debounce-和节流-throttle"><span>2. 使用防抖（Debounce）和节流（Throttle）</span></a></h5><p>防抖（Debounce）和节流（Throttle）技术可以减少不必要的重复操作，防止在短时间内触发多次异步请求或事件处理。</p><p><strong>防抖（Debounce）</strong>：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> debounce</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">func</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">wait</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> timeoutId</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    clearTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">timeoutId</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    timeoutId</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> func</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">wait</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> buttonClickHandler</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">debounce</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Button clicked&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">300</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>节流（Throttle）</strong>：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> throttle</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">func</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">limit</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> inThrottle</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> args</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">inThrottle</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      func</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      inThrottle</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">inThrottle</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">limit</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> resizeHandler</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">throttle</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Window resized&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-使用锁机制-lock" tabindex="-1"><a class="header-anchor" href="#_3-使用锁机制-lock"><span>3. 使用锁机制（Lock）</span></a></h5><p>在某些情况下，可以使用锁机制来确保同一时间内只有一个操作可以执行。这种方法适用于状态更新等场景。</p><p><strong>示例代码</strong>：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> lock</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> updateState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newState</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  lock</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 更新状态</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;State updated to:&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newState</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 模拟异步操作</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    lock</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;button&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  updateState</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;new state&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-使用原子操作" tabindex="-1"><a class="header-anchor" href="#_4-使用原子操作"><span>4. 使用原子操作</span></a></h5><p>在更新状态时，尽量使用不可分割的操作，确保状态的一致性。</p><p><strong>示例代码</strong>：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> counter</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> incrementCounter</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 原子操作</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  counter</span><span style="color:#D4D4D4;">++;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Counter incremented to:&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">counter</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">incrementCounter</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">incrementCounter</span><span style="color:#D4D4D4;">();</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-使用状态管理库" tabindex="-1"><a class="header-anchor" href="#_5-使用状态管理库"><span>5. 使用状态管理库</span></a></h5><p>状态管理库如 Redux、MobX 等可以帮助你更好地管理应用的状态，避免竞态问题。</p><p><strong>Redux 示例</strong>：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createStore</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;redux&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Provider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react-redux&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> initialState</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> };</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> reducer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">initialState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  switch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    case</span><span style="color:#CE9178;"> &#39;INCREMENT&#39;</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;"> { ...</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> };</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    default</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createStore</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Provider</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">store</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;INCREMENT&#39;</span><span style="color:#D4D4D4;"> })</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        Increment</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">Provider</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-使用中间件" tabindex="-1"><a class="header-anchor" href="#_6-使用中间件"><span>6. 使用中间件</span></a></h5><p>在使用 Redux 等状态管理库时，可以使用中间件如 <code>redux-thunk</code> 或 <code>redux-saga</code> 来处理异步操作，并确保操作的顺序。</p><p><strong>Redux Thunk 示例</strong>：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createStore</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">applyMiddleware</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;redux&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> thunk</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;redux-thunk&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Provider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react-redux&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> initialState</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> };</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> reducer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">initialState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  switch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    case</span><span style="color:#CE9178;"> &#39;INCREMENT&#39;</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;"> { ...</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> };</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    default</span><span style="color:#D4D4D4;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createStore</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">applyMiddleware</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">thunk</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> incrementAsync</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      dispatch</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">type:</span><span style="color:#CE9178;"> &#39;INCREMENT&#39;</span><span style="color:#D4D4D4;"> });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> App</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Provider</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">store</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">incrementAsync</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        Increment Async</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">Provider</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>解决前端竞态问题的关键在于控制异步操作的执行顺序和频率。通过使用 Promises 和 async/await、防抖和节流技术、锁机制、原子操作、状态管理库以及中间件等方法，可以有效地避免竞态问题的发生，提高应用的可靠性和性能。在实际开发中，根据具体情况选择合适的方法来解决竞态问题是至关重要的。</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="什么是服务端渲染-ssr" tabindex="-1"><a class="header-anchor" href="#什么是服务端渲染-ssr"><span>什么是服务端渲染？(SSR)⭐</span></a></h3><p>服务端渲染（Server-Side Rendering，简称 SSR）是一种<strong>将网页内容在服务器端动态生成并发送给客户端的技术</strong>。传统的客户端渲染（Client-Side Rendering，简称 CSR）是在客户端浏览器中使用 JavaScript 动态生成页面内容。</p><p>在传统的客户端渲染中，浏览器首先下载一个空的 HTML 页面，然后通过 JavaScript 请求数据并生成页面内容。这种方式的优点是可以提供更丰富的交互和动态效果，但也存在一些缺点。例如，搜索引擎爬虫可能无法正确解析和索引页面内容，导致 SEO（搜索引擎优化）问题。同时，初始加载时用户可能会看到空白的页面或者出现闪烁的内容。</p><p>相比之下，服务端渲染通过在服务器上预先生成完整的 HTML 页面，将其发送给客户端浏览器。这样，浏览器在接收到页面时就能够立即显示完整的内容，而不需要等待 JavaScript 的下载和执行。这样可以提高页面的加载速度和首次渲染速度，并且对于搜索引擎爬虫来说更容易解析和索引页面内容，有利于 SEO。</p><p><strong>客户端渲染：获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。</strong></p><p><strong>服务端渲染：服务端返回 HTML 文件，客户端只需解析 HTML。</strong></p><ul><li>优点：首屏渲染快，SEO 好。</li><li>缺点：配置麻烦，增加了服务器的计算压力。</li></ul><h4 id="客户端渲染过程" tabindex="-1"><a class="header-anchor" href="#客户端渲染过程"><span>客户端渲染过程</span></a></h4><ol><li>访问客户端渲染的网站。</li><li>服务器返回一个包含了引入资源语句和 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 的 HTML 文件。</li><li>客户端通过 HTTP 向服务器请求资源，当必要的资源都加载完毕后，执行 <code>new Vue()</code> 开始实例化并渲染页面。</li></ol><h4 id="服务端渲染过程" tabindex="-1"><a class="header-anchor" href="#服务端渲染过程"><span>服务端渲染过程</span></a></h4><ol><li>访问服务端渲染的网站。</li><li>服务器会查看当前路由组件需要哪些资源文件，然后将这些文件的内容填充到 HTML 文件。如果有 ajax 请求，就会执行它进行数据预取并填充到 HTML 文件里，最后返回这个 HTML 页面。</li><li>当客户端接收到这个 HTML 页面时，可以马上就开始渲染页面。与此同时，页面也会加载资源，当必要的资源都加载完毕后，开始执行 <code>new Vue()</code> 开始实例化并接管页面。</li></ol><p>从上述两个过程中可以看出，区别就在于第二步。客户端渲染的网站会直接返回 HTML 文件，而服务端渲染的网站则会渲染完页面再返回这个 HTML 文件。</p><h3 id="nuxt-js、next-js、nest-js的区别" tabindex="-1"><a class="header-anchor" href="#nuxt-js、next-js、nest-js的区别"><span>Nuxt.js、Next.js、Nest.js的区别</span></a></h3><ul><li>Nuxt.js 和 Next.js 都是用于构建服务器渲染应用的框架（SSR），分别基于 Vue.js 和 React。</li><li>Nuxt.js 适用于构建 Vue.js 应用程序，提供了默认的配置和约定，使得开发 SSR 应用更加简单。</li><li>Next.js 适用于构建 React 应用程序，具有出色的性能和开发体验，并支持静态生成和服务器端渲染。</li><li>Nest.js 是一个用于构建 Node.js 服务器端应用的框架，结合了 TypeScript 和面向对象编程的概念，提供了模块化的架构设计和丰富的功能。</li></ul><h3 id="什么是seo-怎么解决seo不友好" tabindex="-1"><a class="header-anchor" href="#什么是seo-怎么解决seo不友好"><span>什么是SEO，怎么解决SEO不友好</span></a></h3><p>seo是搜索引擎优化。在搜索引擎自然排名机制的基础上,对网站进行内部及外部的调整优化,改进网站在搜索引擎中的关键词自然排名,获得更多的流量</p><p>单页面的内容是根据路由变化动态生成并展示出来的，很多页面的内容是通过ajax异步获取的,网络抓取工具并不会等待异步请求完成后再行抓取页面内容</p><p>搜索引擎爬虫是不会等待异步请求数据结束后再抓取信息的</p><p>解决方式可以使用<code>SSR(服务端渲染)</code>或者是<code>预渲染</code></p><h3 id="requestanimationframe和settimeout有什么区别" tabindex="-1"><a class="header-anchor" href="#requestanimationframe和settimeout有什么区别"><span>requestAnimationFrame和setTimeout有什么区别？</span></a></h3><p>引擎层面：setTimeout 属于 JS 引擎，存在事件轮询，存在事件队列。requestAnimationFrame 属于 GUI 引擎，发生在渲染过程的中重绘重排部分，与电脑分辨率保持一致。</p><p>性能层面：当页面被隐藏或最小化时，定时器 setTimeout 仍在后台执行动画任务。当页面处于未激活的状态下，该页面的屏幕刷新任务会被系统暂停，requestAnimationFrame 也会停止。</p><p>应用层面：利用 setTimeout，这种定时机制去做动画，模拟固定时间刷新页面。requestAnimationFrame 由浏览器专门为动画提供的 API，在运行时浏览器会自动优化方法的调用，在特定性环境下可以有效节省了CPU 开销</p><h3 id="canvas和svg-区别" tabindex="-1"><a class="header-anchor" href="#canvas和svg-区别"><span>canvas和svg 区别</span></a></h3><p>Canvas</p><ul><li>Canvas 是 HTML5 引入的一个绘图API，它使用一个叫做 <code>&lt;canvas&gt;</code> 的HTML元素来绘制图像。</li><li>Canvas 是像素级别的绘图，所有绘制的图形都是直接绘制到画布上的像素。</li><li>Canvas API 提供了一系列绘图方法（如 <code>fillRect</code>, <code>strokeRect</code>, <code>beginPath</code>, <code>arc</code> 等）来绘制图形。</li><li>Canvas 不保留绘制的路径信息，一旦绘制完成，就无法单独修改或操作任何部分，除非重新绘制。</li><li>因为它是在像素级别操作的，所以对于复杂的动画或大量的图形更新，Canvas 可能会有更好的性能表现。</li><li>Canvas 适合于动态内容和大量数据的实时渲染。</li></ul><p>SVG</p><ul><li>SVG 是一种基于 XML 的矢量图形格式，用于描述二维图形及图形应用。</li><li>SVG 图形是基于矢量的，这意味着它们可以无限放大而不会损失清晰度。</li><li>SVG 元素可以直接嵌入到 HTML 文档中，并且每个元素和属性都可以通过 CSS 来控制样式，也可以通过 JavaScript 来动态修改。</li><li>SVG 支持事件处理、交互性以及动画效果，并且图形对象可以被选择、缩放、着色或者进行其他操作。</li><li>SVG 适用于需要精细控制和可编辑性的图形，例如图表、图标等。</li></ul><p>总结：</p><ul><li>如果你需要高性能的渲染或大量动态数据的处理，Canvas 可能是一个更好的选择。</li><li>如果你需要图形的可编辑性、可交互性和可扩展性，SVG 会更适合。</li><li>在实际开发中，有时候也会将两者结合使用，取长补短。</li></ul>`,153)]))}const r=n(p,[["render",i],["__file","前端常见面试题.html.vue"]]),t=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"前端常见面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Vue常见面试题","slug":"vue常见面试题","link":"#vue常见面试题","children":[]},{"level":2,"title":"React常见面试题","slug":"react常见面试题","link":"#react常见面试题","children":[{"level":3,"title":"React和Vue的区别⭐","slug":"react和vue的区别","link":"#react和vue的区别","children":[]},{"level":3,"title":"Vue react jquery的区别","slug":"vue-react-jquery的区别","link":"#vue-react-jquery的区别","children":[]}]},{"level":2,"title":"前端工程化面试问题","slug":"前端工程化面试问题","link":"#前端工程化面试问题","children":[{"level":3,"title":"less在webpack中时如何被打包的","slug":"less在webpack中时如何被打包的","link":"#less在webpack中时如何被打包的","children":[]},{"level":3,"title":"ES6 Module和Common.js 的区别","slug":"es6-module和common-js-的区别","link":"#es6-module和common-js-的区别","children":[]}]},{"level":2,"title":"umi相关⭐","slug":"umi相关","link":"#umi相关","children":[{"level":3,"title":"umi中的基本配置项","slug":"umi中的基本配置项","link":"#umi中的基本配置项","children":[]},{"level":3,"title":"umi中useRequest的底层是什么","slug":"umi中userequest的底层是什么","link":"#umi中userequest的底层是什么","children":[]},{"level":3,"title":"MFSU是什么","slug":"mfsu是什么","link":"#mfsu是什么","children":[]},{"level":3,"title":"umi和next的区别","slug":"umi和next的区别","link":"#umi和next的区别","children":[]}]},{"level":2,"title":"项目相关","slug":"项目相关","link":"#项目相关","children":[{"level":3,"title":"权限设计方案","slug":"权限设计方案","link":"#权限设计方案","children":[]},{"level":3,"title":"多页签中的右键选中，是如何做到把浏览器原生右键打开的弹窗覆盖掉的？","slug":"多页签中的右键选中-是如何做到把浏览器原生右键打开的弹窗覆盖掉的","link":"#多页签中的右键选中-是如何做到把浏览器原生右键打开的弹窗覆盖掉的","children":[]},{"level":3,"title":"竞态问题（TODO）","slug":"竞态问题-todo","link":"#竞态问题-todo","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"什么是服务端渲染？(SSR)⭐","slug":"什么是服务端渲染-ssr","link":"#什么是服务端渲染-ssr","children":[]},{"level":3,"title":"Nuxt.js、Next.js、Nest.js的区别","slug":"nuxt-js、next-js、nest-js的区别","link":"#nuxt-js、next-js、nest-js的区别","children":[]},{"level":3,"title":"什么是SEO，怎么解决SEO不友好","slug":"什么是seo-怎么解决seo不友好","link":"#什么是seo-怎么解决seo不友好","children":[]},{"level":3,"title":"requestAnimationFrame和setTimeout有什么区别？","slug":"requestanimationframe和settimeout有什么区别","link":"#requestanimationframe和settimeout有什么区别","children":[]},{"level":3,"title":"canvas和svg 区别","slug":"canvas和svg-区别","link":"#canvas和svg-区别","children":[]}]}],"git":{"updatedTime":1729095078000,"contributors":[{"name":"csmSimona","email":"980715844@qq.com","commits":6},{"name":"chenshimeng","email":"chenshimeng@hyperchain.cn","commits":1}]},"filePathRelative":"前端基础汇总/前端常见面试题.md","readingTime":{"minutes":18.19,"words":5458}}');export{r as comp,t as data};
