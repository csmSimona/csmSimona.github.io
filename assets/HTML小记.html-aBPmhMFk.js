import{_ as e,c as l,o as i,a}from"./app-C5r9pUv_.js";const t={},p=a(`<h2 id="html小记-持续更新" tabindex="-1"><a class="header-anchor" href="#html小记-持续更新"><span>HTML小记（持续更新）</span></a></h2><h3 id="_1、html5中的新特性" tabindex="-1"><a class="header-anchor" href="#_1、html5中的新特性"><span>1、HTML5中的新特性</span></a></h3><p>1.图像 canvas</p><p>2.多媒体 video，audio</p><p>3.本地存储 localStorage、sessionStorage</p><p>4.语义化更好的内容元素 article、header、footer、nav、section</p><p>5.表单控件 date、time、canlendar、url、search</p><p>6.新的技术 webworker、websocket、Geolocation</p><p>移除的元素</p><p>1.纯表现的元素 u、big、center、strike、tt、font、basefont</p><p>2.框架集 frame、frameset、noframes</p><h3 id="_2、什么是svg" tabindex="-1"><a class="header-anchor" href="#_2、什么是svg"><span>2、什么是SVG?</span></a></h3><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</p><p>SVG 用来定义用于网络的基于矢量的图形</p><p>SVG 使用 XML 格式定义图形</p><p>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失</p><p>SVG 是万维网联盟的标准</p><p>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体</p><p>SVG是HTML下的一个分支</p><h3 id="_3、说一下web-quality-无障碍" tabindex="-1"><a class="header-anchor" href="#_3、说一下web-quality-无障碍"><span>3、说一下web Quality（无障碍）</span></a></h3><p>能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站。</p><p>残障人士指的是那些带有残疾或者身体不健康的用户。</p><p>使用alt属性：</p><p><code>&lt;img src=&quot;person.jpg&quot;  alt=&quot;this is a person&quot;/&gt;</code></p><ul><li><p>有时候浏览器会无法显示图像。具体的原因有：</p></li><li><p>用户关闭了图像显示</p></li><li><p>浏览器是不支持图形显示的迷你浏览器</p></li><li><p>浏览器是语音浏览器（供盲人和弱视人群使用）</p></li></ul><p>如果您使用了alt 属性，那么浏览器至少可以显示或读出有关图像的描述。</p><h3 id="_4、iframe" tabindex="-1"><a class="header-anchor" href="#_4、iframe"><span>4、iframe</span></a></h3><p>定义：iframe元素会创建包含另一个文档的内联框架</p><p>提示：可以将提示文字放在<code>&lt;iframe&gt;&lt;/iframe&gt;</code>之间，来提示某些不支持iframe的浏览器</p><p>优点</p><ul><li><p>解决加载缓慢的第三方内容如图标和广告等的加载问题</p></li><li><p>Security sandbox</p></li><li><p>并行加载脚本</p></li></ul><p>缺点</p><ul><li><p>会阻塞主页面的onload事件</p></li><li><p>搜索引擎无法解读这种页面，不利于SEO</p></li><li><p>iframe和主页面共享连接池，而浏览器对相同区域有限制所以会影响性能。</p></li><li><p>没有语义</p></li></ul><p>使用场景</p><ul><li><p>与第三方域名下的页面共享cookie</p></li><li><p>上传图片，避免当前页刷新</p></li><li><p>左边固定右边自适应的布局</p></li><li><p>资源加载</p></li></ul><h3 id="_5、doctype作用-严格模式与混杂模式如何区分-它们有何意义" tabindex="-1"><a class="header-anchor" href="#_5、doctype作用-严格模式与混杂模式如何区分-它们有何意义"><span>5、Doctype作用?严格模式与混杂模式如何区分？它们有何意义?</span></a></h3><p>转载：<a href="https://www.cnblogs.com/wuqiutong/p/5986191.html" target="_blank" rel="noopener noreferrer">Doctype作用？严格模式与混杂模式如何区分？它们有何差异？</a></p><p>Doctype声明于文档最前面，告诉浏览器以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。</p><p>**严格模式：**又称标准模式，是指浏览器按照 W3C 标准解析代码。严格模式的排版和JS运作模式是以该浏览器支持的最高标准运行。</p><p>**混杂模式：**又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。</p><p><strong>严格模式与混杂模式的语句解析不同点有哪些？</strong></p><p>1）盒模型的高宽包含内边距padding和边框border</p><p>​ 在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在IE5.5及以下的浏览器及其他版本的Quirks模式下，IE的宽度和高度还包含了padding和border。</p><p>2）可以设置行内元素的高宽</p><p>​ 在Standards模式下，给span等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。</p><p>3）可设置百分比的高度</p><p>​ 在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。</p><p>​ 当你让一个元素的高度设定为百分比高度时，是相对于父元素的高度根据百分比来计算高度。当没有给父元素设置高度（height）时或设置的高度值百分比不生效时，浏览器会根据其子元素来确定父元素的高度，所以当无法根据获取父元素的高度，也就无法计算自己高度。 换句话说，父元素的高度只是一个缺省值：height: auto;。当你要求浏览器根据这样一个缺省值来计算百分比高度时，只能得到undefined的结果，也就是一个null值，浏览器不会对这个值有任何的反应。</p><p>4）用margin:0 auto设置水平居中在IE下会失效</p><p>​ 使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效,quirk模式下的解决办法，用text-align属性:</p><p>body{text-align:center};#content{text-align:left}</p><p>5）quirk模式下设置图片的padding会失效</p><p>6）quirk模式下table中的字体属性不能继承上层的设置</p><p>7）quirk模式下white-space:pre（保留空白）会失效</p><h3 id="_6、click在ios上有300ms延迟-原因及如何解决" tabindex="-1"><a class="header-anchor" href="#_6、click在ios上有300ms延迟-原因及如何解决"><span>6、click在ios上有300ms延迟，原因及如何解决？</span></a></h3><p>转载自<a href="https://www.cnblogs.com/zhaodahai/p/6831165.html" target="_blank" rel="noopener noreferrer">移动端click事件延迟300ms到底是怎么回事，该如何解决？</a></p><p>这要追溯至 2007 年初。苹果公司在发布首款 iPhone 前夕，遇到一个问题：当时的网站都是为大屏幕设备所设计的。于是苹果的工程师们做了一些约定，应对 iPhone 这种小屏幕浏览桌面端站点的问题。</p><p>这当中最出名的，当属双击缩放(double tap to zoom)，这也是会有上述 300 毫秒延迟的主要原因。双击缩放，顾名思义，即用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</p><p>那么这和 300 毫秒延迟有什么联系呢？</p><p>假定这么一个场景。用户在 iOS Safari 里边点击了一个链接。由于用户可以进行双击缩放或者双击滚动的操作，当用户一次点击屏幕之后，浏览器并不能立刻判断用户是确实要打开这个链接，还是想要进行双击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。</p><p>鉴于iPhone的成功，其他移动浏览器都复制了 iPhone Safari 浏览器的多数约定，包括双击缩放，几乎现在所有的移动端浏览器都有这个功能。之前人们刚刚接触移动端的页面，在欣喜的时候往往不会care这个300ms的延时问题，可是如今touch端界面如雨后春笋，用户对体验的要求也更高，这300ms带来的卡顿慢慢变得让人难以接受。</p><p>(1)粗暴型，禁用缩放</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot;&gt;</code></p><p>(2)利用FastClick，其原理是：</p><p>检测到touched事件后，立刻出发模拟click事件，并且把浏览器300毫秒之后真正触发的事件给阻断掉</p><h3 id="_7、判断span的width和height" tabindex="-1"><a class="header-anchor" href="#_7、判断span的width和height"><span>7、判断span的width和height</span></a></h3><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> style</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;width: 400px; height: 200px;&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">span</span><span style="color:#9CDCFE;"> style</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;float: left; width: auto; height: 100%&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">i</span><span style="color:#9CDCFE;"> style</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;position:absolute; float: left; width: 100px; height: 50px;&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">hello</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">i</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>span不是块级元素，是不支持行高的，但是style中有了个<code>float: left;</code>就使得span变成了块级元素支持宽高，<code>height: 100%;</code>即为，200，宽度由内容撑开。</p><p>但是内容中的i是绝对定位，脱离了文档流，所以不占父级空间，所以span的width = 0</p><p>所以，width = 0px，height = 200px</p><h3 id="_8、html元素层级" tabindex="-1"><a class="header-anchor" href="#_8、html元素层级"><span>8、html元素层级</span></a></h3><ul><li><p>在html中，帧元素（frameset）的优先级最高，表单元素比非表单元素的优先级要高。</p><p>表单元素包括：文本输入框，密码输入框，单选框，复选框，文本输入域，列表框等等；</p><p>非表单元素包括：连接（a），div,table,span等。</p></li><li><p>所有的html元素又可以根据其显示分成两类：有窗口元素以及无窗口元素。有窗口元素总是显示在无窗口元素的前面。</p><p>有窗口元素包括：select元素，object元素，以及frames元素等等。</p><p>无窗口元素：大部分html元素都是无窗口元素。</p></li></ul><h3 id="_9、dhtml" tabindex="-1"><a class="header-anchor" href="#_9、dhtml"><span>9、DHTML</span></a></h3><ul><li><p>DHTML是Dynamic HTML的简称，就是动态的HTML(标准通用标记语言下的一个应用)，是相对传统的静态的htm而言的一种制作网页的概念。</p></li><li><p>DHTML只是HTML、CSS和客户端脚本的一种集成，即一个页面中包括html+css+javascript(或其它客户端脚本）。</p></li><li><p>html+css+javascript(或其他脚本）的优点：html确定页面框架，css和脚本决定页面样式、动态内容和动态定位。</p></li></ul><h3 id="_10、块级元素、行内元素与行块级元素" tabindex="-1"><a class="header-anchor" href="#_10、块级元素、行内元素与行块级元素"><span>10、块级元素、行内元素与行块级元素</span></a></h3><p>1.常见的块级元素（自动换行，可设置高宽)有： div，h1-h6，p，pre，ul，ol，li，form，table等。</p><p>2.常见的行内元素（无法自动换行，无法设置宽高）有： a，img，span，i（斜体），em（强调），sub（下标），sup（上标），label等。</p><p>3.常见的行块级元素（拥有内在尺寸，可设置宽高，不会自动换行）有： button，input，textarea，select等。</p><h3 id="_11、position-relative-不会使div脱离文档流-只是相对常规流偏移" tabindex="-1"><a class="header-anchor" href="#_11、position-relative-不会使div脱离文档流-只是相对常规流偏移"><span>11、position: relative 不会使div脱离文档流，只是相对常规流偏移</span></a></h3><p>所谓的文档流，指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。脱离文档流即是元素打乱了这个排列，或是从排版中拿走。 position:absolute;和position:fixed;会直接将元素从排版中拿走从而脱离文档流之外，设置float对象也会“打乱这个排列”从而也被称为脱离文档流。</p><h3 id="_12、手动写动画最小时间间隔为16-7ms" tabindex="-1"><a class="header-anchor" href="#_12、手动写动画最小时间间隔为16-7ms"><span>12、手动写动画最小时间间隔为16.7ms</span></a></h3><p>显示器默认频率60hz，时间为1/60hz=16.7ms</p><h3 id="_13、html5中-area-base-br-col-command-embed-hr-img-input-keygen-link-meta-param-source-track-wbr等空标签可以不用自闭合-了" tabindex="-1"><a class="header-anchor" href="#_13、html5中-area-base-br-col-command-embed-hr-img-input-keygen-link-meta-param-source-track-wbr等空标签可以不用自闭合-了"><span>13、HTML5中，area, base, br, col, command, embed, hr, img, input, keygen, link, meta, param, source, track, wbr等空标签可以不用自闭合（/&gt;）了</span></a></h3><h3 id="_14、白屏时间first-paint和可交互时间dom-ready的关系" tabindex="-1"><a class="header-anchor" href="#_14、白屏时间first-paint和可交互时间dom-ready的关系"><span>14、白屏时间first paint和可交互时间dom ready的关系</span></a></h3><p>先触发first paint，后触发dom ready</p><p>页面的性能指标详解：</p><p>白屏时间（first paint time）：用户从打开页面开始到页面开始有东西呈现为止</p><p>首屏时间：用户浏览器首屏内所有内容都呈现出来所花费的时间</p><p>用户可操作时间（dom interactive）：用户可以进行正常的点击、输入等操作，默认可以统计dom ready的时间，因为通常会在这时候绑定事件操作</p><p>总下载时间：页面所有资源都加载完成并呈现出来所花的时间，即页面onload的时间</p><h3 id="_15、浏览器兼容性问题" tabindex="-1"><a class="header-anchor" href="#_15、浏览器兼容性问题"><span>15、浏览器兼容性问题</span></a></h3><p>参考：<a href="https://blog.csdn.net/wanmeiyinyue315/article/details/79654984" target="_blank" rel="noopener noreferrer">前端常见的浏览器兼容性问题及解决方案</a></p><p>1、不同浏览器的标签默认的外补丁( margin )和内补丁(padding)不同 解决方案： css 里增加通配符 * { margin: 0; padding: 0; }</p><p>2、IE6双边距问题；在 IE6中设置了float , 同时又设置margin , 就会出现边距问题 解决方案：设置display:inline;</p><p>3、当标签的高度设置小于10px，在IE6、IE7中会超出自己设置的高度 解决方案：超出高度的标签设置overflow:hidden,或者设置line-height的值小于你的设置高度</p><p>4、图片默认有间距 解决方案：使用float 为img 布局</p><p>5、IE9以下浏览器不能使用opacity 解决方案： opacity: 0.5;</p><p>filter: alpha(opacity = 50);</p><p>filter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);（ie提供的css渲染）</p><p>6、边距重叠问题；当相邻两个元素都设置了margin 边距时，margin 将取最大值，舍弃最小值； 解决方案：为了不让边重叠，可以给子元素增加一个父级元素，并设置父级元素为overflow:hidden；</p><p>7、cursor:hand 显示手型在safari 上不支持 解决方案：统一使用 cursor:pointer</p><p>8、两个块级元素，父元素设置了overflow:auto；子元素设置了position:relative ;且高度大于父元素，在IE6、IE7会被隐藏而不是溢出； 解决方案：父级元素设置position:relative</p><h3 id="_16、浏览器渲染页面的过程" tabindex="-1"><a class="header-anchor" href="#_16、浏览器渲染页面的过程"><span>16、浏览器渲染页面的过程</span></a></h3><ul><li><p>根据 HTML 结构生成 DOM 树</p></li><li><p>根据 CSS 生成 CSSOM</p></li><li><p>将 DOM 和 CSSOM 整合形成 RenderTree</p></li><li><p>根据 RenderTree 开始渲染和展示</p></li><li><p>遇到<code>&lt;script&gt;</code>时，会执行并阻塞渲染</p></li></ul><p>在构建CSSOM树时，会阻塞渲染，直至CSSOM树构建完成。并且构建CSSOM树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，越是具体的CSS选择器，执行速度越慢。</p><p>当HTML解析到script标签时，会暂停构建DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载js文件。并且CSS也会影响js的执行，只有当解析完样式表才会执行js，所以也可以认为这种情况下，css也会暂停构建DOM。</p><h3 id="_17、对语义化的理解" tabindex="-1"><a class="header-anchor" href="#_17、对语义化的理解"><span>17、对语义化的理解</span></a></h3><p>1、去掉或者丢失样式的时候能够让页面呈现出清晰的结构</p><p>2、有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；</p><p>3、方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</p><p>4，便于团队开发和维护，语义化更具可读性，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</p><h3 id="_18、xhtml与html的区别" tabindex="-1"><a class="header-anchor" href="#_18、xhtml与html的区别"><span>18、XHTML与HTML的区别</span></a></h3><p>1.所有的标记都必须要有一个相应的结束标记</p><p>2.所有标签的元素和属性的名字都必须使用小写</p><p>3.所有的XML标记都必须合理嵌套</p><p>4.所有的属性必须用引号&quot;&quot;括起来</p><p>5.把所有&lt;和&amp;特殊符号用编码表示</p><p>6.给所有属性赋一个值</p><p>7.不要在注释内容中使“--”</p><p>8.图片必须有说明文字</p><h3 id="_19、优雅降级和渐进增强" tabindex="-1"><a class="header-anchor" href="#_19、优雅降级和渐进增强"><span>19、优雅降级和渐进增强</span></a></h3><p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效.</p><p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p><h3 id="_20、clientheight-scrollheight-offsetheight-以及scrolltop-offsettop-clienttop" tabindex="-1"><a class="header-anchor" href="#_20、clientheight-scrollheight-offsetheight-以及scrolltop-offsettop-clienttop"><span>20、clientHeight，scrollHeight，offsetHeight 以及scrollTop，offsetTop，clientTop</span></a></h3><p>clientHeight：表示的是可视区域的高度，不包含border和滚动条</p><p>offsetHeight：表示可视区域的高度，包含了border和滚动条</p><p>scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分。</p><p>clientTop：表示边框border的厚度，在未指定的情况下一般为0</p><p>scrollTop：滚动后被隐藏的高度，获取对象相对于由offsetParent属性指定的父坐标(css定位的元素或body元素)距离顶端的高度。</p><p>offsetTop：子元素的外边框到父元素的内边框的垂直距离 （没边框时自然就是content到content的距离）</p><h3 id="_21、重绘-repaint-和重排-reflow" tabindex="-1"><a class="header-anchor" href="#_21、重绘-repaint-和重排-reflow"><span>21、重绘（repaint）和重排（reflow）</span></a></h3><p><strong>重排</strong></p><p>当改变 DOM 元素位置或大小时，会导致浏览器重新生成渲染树，这个过程叫重排。</p><p><strong>重绘</strong></p><p>当重新生成渲染树后，就要将渲染树每个节点绘制到屏幕，这个过程叫重绘。</p><ul><li>不是所有的动作都会导致重排，例如改变字体颜色等元素的外观发生变化的情况，只会导致重绘。</li><li>重排会导致重绘，重绘不会导致重排 。</li><li>重排和重绘这两个操作都是非常昂贵的，因为 JavaScript 引擎线程与 GUI 渲染线程是互斥，它们同时只能一个在工作。</li></ul><p><strong>什么情况下会触发重排</strong></p><ul><li>页面渲染初始化（这个无法避免）</li><li>浏览器窗口改变尺寸</li><li>元素位置改变</li><li>元素尺寸改变</li><li>元素内容改变</li><li>添加或删除可见的DOM 元素</li></ul><p><strong>如何减少重排重绘</strong></p><ul><li><p>减少DOM操作</p><ul><li><p><strong>避免频繁的DOM查询</strong>：对于需要频繁访问的DOM元素，将其查询结果缓存起来，避免多次调用<code>document.querySelector</code>或<code>getElementById</code>等方法。</p></li><li><p>批量操作DOM</p><p>：</p><ul><li><strong>使用文档片段（DocumentFragment）</strong>：在操作多个DOM节点时，先将它们添加到<code>DocumentFragment</code>中，最后一次性插入DOM。</li><li><strong>离线操作DOM</strong>：将元素从DOM树中移除<code>（display:none等脱离文档流方式）</code>，完成操作后再插入。比如操作表格时可以先将表格移出文档流，更新后再插回去。</li></ul></li><li><p><strong>使用虚拟DOM</strong>：如果使用React、Vue等框架，这些框架的虚拟DOM机制可以大幅减少实际的DOM操作。虚拟DOM通过对比新旧DOM树的差异来最小化实际的DOM操作次数。</p></li><li><p>**合并DOM更新：**在动画或大量DOM更新时，将操作放入<code>requestAnimationFrame</code>回调中，以确保它们在同一帧内进行，避免多次重排</p></li><li><p>使用<code>resize</code>事件时，做<strong>防抖</strong>和<strong>节流</strong>处理</p></li></ul></li><li><p>CSS优化</p><ul><li><strong>查找元素的优化</strong>：应该尽可能的通过ID或者类来查找元素，避免通过属性来查找元素。</li><li><strong>避免使用CSS表达式</strong>：CSS表达式会导致每次重排时都重新计算，增加重排次数。通过<strong>更改 className 批量修改元素样式</strong></li><li><strong>避免使用</strong>**<code>width: auto</code>**：使用明确的宽度值可以减少浏览器计算和重排的频率。</li><li>尽量少使用<code>dispaly:none</code>，可以使用<code>visibility:hidden</code>代替，<code>dispaly:none</code>会造成<strong>重排</strong>，<code>visibility:hidden</code>会造成<strong>重绘</strong>。</li><li>尽量<strong>减少深度嵌套或复杂选择器的使用</strong>，以提高 CSS 渲染效率。</li><li><strong>避免使用表格布局</strong>：因为在表格元素上触发回流会导致其中所有其他元素的回流</li></ul></li><li><p>动画相关优化</p><ul><li>将<strong>复杂的动画元素定位为 fixed 或 absolute</strong> 减少重排</li><li><strong>使用will-change属性</strong>：对于可能频繁改变的元素，可以设置<code>will-change</code>属性来提示浏览器提前进行优化。（但避免过度使用 will-change；在动画中遇到性能问题时考虑使用它）</li><li>在 GPU 上渲染动画：浏览器已经优化了 CSS 动画，使其适用于触发动画属性的重绘（因此也包括回流）。为了提高性能，<strong>将具有动画效果的元素移动到 GPU 上</strong>。**可以触发 GPU 硬件加速的 CSS 属性包括 transform、filter、will-change 和 position:fixed。**动画将在 GPU 上处理，提高性能，特别是在移动设备上（但避免过度使用，因为可能会导致性能问题）。</li></ul></li></ul>`,140),s=[p];function n(o,r){return i(),l("div",null,s)}const h=e(t,[["render",n],["__file","HTML小记.html.vue"]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/HTML%E5%B0%8F%E8%AE%B0.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"HTML小记（持续更新）","slug":"html小记-持续更新","link":"#html小记-持续更新","children":[{"level":3,"title":"1、HTML5中的新特性","slug":"_1、html5中的新特性","link":"#_1、html5中的新特性","children":[]},{"level":3,"title":"2、什么是SVG?","slug":"_2、什么是svg","link":"#_2、什么是svg","children":[]},{"level":3,"title":"3、说一下web Quality（无障碍）","slug":"_3、说一下web-quality-无障碍","link":"#_3、说一下web-quality-无障碍","children":[]},{"level":3,"title":"4、iframe","slug":"_4、iframe","link":"#_4、iframe","children":[]},{"level":3,"title":"5、Doctype作用?严格模式与混杂模式如何区分？它们有何意义?","slug":"_5、doctype作用-严格模式与混杂模式如何区分-它们有何意义","link":"#_5、doctype作用-严格模式与混杂模式如何区分-它们有何意义","children":[]},{"level":3,"title":"6、click在ios上有300ms延迟，原因及如何解决？","slug":"_6、click在ios上有300ms延迟-原因及如何解决","link":"#_6、click在ios上有300ms延迟-原因及如何解决","children":[]},{"level":3,"title":"7、判断span的width和height","slug":"_7、判断span的width和height","link":"#_7、判断span的width和height","children":[]},{"level":3,"title":"8、html元素层级","slug":"_8、html元素层级","link":"#_8、html元素层级","children":[]},{"level":3,"title":"9、DHTML","slug":"_9、dhtml","link":"#_9、dhtml","children":[]},{"level":3,"title":"10、块级元素、行内元素与行块级元素","slug":"_10、块级元素、行内元素与行块级元素","link":"#_10、块级元素、行内元素与行块级元素","children":[]},{"level":3,"title":"11、position: relative 不会使div脱离文档流，只是相对常规流偏移","slug":"_11、position-relative-不会使div脱离文档流-只是相对常规流偏移","link":"#_11、position-relative-不会使div脱离文档流-只是相对常规流偏移","children":[]},{"level":3,"title":"12、手动写动画最小时间间隔为16.7ms","slug":"_12、手动写动画最小时间间隔为16-7ms","link":"#_12、手动写动画最小时间间隔为16-7ms","children":[]},{"level":3,"title":"13、HTML5中，area, base, br, col, command, embed, hr, img, input, keygen, link, meta, param, source, track, wbr等空标签可以不用自闭合（/>）了","slug":"_13、html5中-area-base-br-col-command-embed-hr-img-input-keygen-link-meta-param-source-track-wbr等空标签可以不用自闭合-了","link":"#_13、html5中-area-base-br-col-command-embed-hr-img-input-keygen-link-meta-param-source-track-wbr等空标签可以不用自闭合-了","children":[]},{"level":3,"title":"14、白屏时间first paint和可交互时间dom ready的关系","slug":"_14、白屏时间first-paint和可交互时间dom-ready的关系","link":"#_14、白屏时间first-paint和可交互时间dom-ready的关系","children":[]},{"level":3,"title":"15、浏览器兼容性问题","slug":"_15、浏览器兼容性问题","link":"#_15、浏览器兼容性问题","children":[]},{"level":3,"title":"16、浏览器渲染页面的过程","slug":"_16、浏览器渲染页面的过程","link":"#_16、浏览器渲染页面的过程","children":[]},{"level":3,"title":"17、对语义化的理解","slug":"_17、对语义化的理解","link":"#_17、对语义化的理解","children":[]},{"level":3,"title":"18、XHTML与HTML的区别","slug":"_18、xhtml与html的区别","link":"#_18、xhtml与html的区别","children":[]},{"level":3,"title":"19、优雅降级和渐进增强","slug":"_19、优雅降级和渐进增强","link":"#_19、优雅降级和渐进增强","children":[]},{"level":3,"title":"20、clientHeight，scrollHeight，offsetHeight 以及scrollTop，offsetTop，clientTop","slug":"_20、clientheight-scrollheight-offsetheight-以及scrolltop-offsettop-clienttop","link":"#_20、clientheight-scrollheight-offsetheight-以及scrolltop-offsettop-clienttop","children":[]},{"level":3,"title":"21、重绘（repaint）和重排（reflow）","slug":"_21、重绘-repaint-和重排-reflow","link":"#_21、重绘-repaint-和重排-reflow","children":[]}]}],"git":{"updatedTime":1724740884000,"contributors":[{"name":"csmSimona","email":"980715844@qq.com","commits":1}]},"filePathRelative":"前端基础汇总/HTML小记.md","readingTime":{"minutes":16.13,"words":4840}}');export{h as comp,d as data};
