import{_ as a,c as r,a as s,b as n,d as p,t as o,o as i}from"./app-Dbx6xvs6.js";const t={};function c(l,e){return i(),r("div",null,[e[2]||(e[2]=s(`<h1 id="vue-js源码全方位深入解析" tabindex="-1"><a class="header-anchor" href="#vue-js源码全方位深入解析"><span>Vue.js源码全方位深入解析</span></a></h1><h2 id="认识flow" tabindex="-1"><a class="header-anchor" href="#认识flow"><span>认识Flow</span></a></h2><p>Flow是facebook出品的JavaScript静态类型检查工具。Vue.js源码利用率Flow做了静态检查。</p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-bash;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> install</span><span style="color:#569CD6;"> -g</span><span style="color:#CE9178;"> flow</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">flow</span><span style="color:#CE9178;"> init</span><span style="color:#CE9178;">  //</span><span style="color:#CE9178;"> 生成.flowconfig</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">flow</span><span style="color:#CE9178;"> //</span><span style="color:#CE9178;"> 运行</span><span style="color:#CE9178;"> 检查</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断"><span><strong>类型判断</strong></span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">/*@flow*/</span><span style="color:#6A9955;">      // 该标记说明需要进行flow检查</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> split</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;"> return</span><span style="color:#9CDCFE;"> str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">11</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flow 检查上述代码后会报错，因为函数 split 期待的参数是字符串，而我们输入了数字。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">/*@flow*/</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;"> return</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">11</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flow 检查上述代码时检查不出任何错误，因为从语法层面考虑， + 即可以用在字符串上，也可以用在数字上，我们并没有明确指出 add() 的参数必须为数字。</p><h3 id="类型注释" tabindex="-1"><a class="header-anchor" href="#类型注释"><span><strong>类型注释</strong></span></a></h3><p>在这种情况下，我们可以借助类型注释来指明期望的类型。类型注释是以冒号 : 开头，可以在函数参数，返回值，变量声明中使用。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">/*@flow*/</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;"> return</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">11</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 Flow 就能检查出错误，因为函数参数的期待类型为数字，而我们提供了字符串。</p><p>上面的例子是针对函数的类型注释。接下来我们来看看 Flow 能支持的一些常见的类型注释。</p><h3 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象"><span><strong>类和对象</strong></span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">/*@flow*/</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Bar</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;           </span><span style="color:#6A9955;">// x 是字符串</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;  </span><span style="color:#6A9955;">// y 可以是字符串或者数字</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  z</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">x</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">z</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> bar</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Bar</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Bar</span><span style="color:#D4D4D4;"> } = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  a:</span><span style="color:#CE9178;"> &#39;hello&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  b:</span><span style="color:#B5CEA8;"> 11</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  c:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;world&#39;</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  d:</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Bar</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类的类型注释格式如上，可以对类自身的属性做类型检查，也可以对构造函数的参数做类型检查。这里需要注意的是，属性 y 的类型中间用 | 做间隔，表示 y 的类型即可以是字符串也可以是数字。</p><p>对象的注释类型类似于类，需要指定对象属性的类型。</p><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null"><span>Null</span></a></h3><p>若想任意类型 T 可以为 null 或者 undefined，只需类似如下写成 ?T 的格式即可。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">/*@flow*/</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> foo</span><span style="color:#D4D4D4;">: ?</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，foo 可以为字符串，也可以为 null。</p><p>目前我们只列举了 Flow 的一些常见的类型注释。如果想了解所有类型注释，请移步 Flow 的<a href="https://flow.org/en/docs/types/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><h2 id="flow-在-vue-js-源码中的应用" tabindex="-1"><a class="header-anchor" href="#flow-在-vue-js-源码中的应用"><span>Flow 在 Vue.js 源码中的应用</span></a></h2><p>有时候我们想引用第三方库，或者自定义一些类型，但 Flow 并不认识，因此检查的时候会报错。为了解决这类问题，Flow 提出了一个 libdef 的概念，可以用来识别这些第三方库或者是自定义类型，而 Vue.js 也利用了这一特性。</p><p>在 Vue.js 的主目录下有 .flowconfig 文件， 它是 Flow 的配置文件，感兴趣的同学可以看<a href="https://flow.org/en/docs/config/" target="_blank" rel="noopener noreferrer">官方文档</a>。这其中的 [libs] 部分用来描述包含指定库定义的目录，默认是名为 flow-typed 的目录。</p><p>这里 [libs] 配置的是 flow，表示指定的库定义都在 flow 文件夹内。我们打开这个目录，会发现文件如下：</p><p>flow</p><p>├── compiler.js # 编译相关</p><p>├── component.js # 组件数据结构</p><p>├── global-api.js # Global API 结构</p><p>├── modules.js # 第三方库定义</p><p>├── options.js # 选项相关</p><p>├── ssr.js # 服务端渲染相关</p><p>├── vnode.js # 虚拟 node 相关</p><p>可以看到，Vue.js 有很多自定义类型的定义，在阅读源码的时候，如果遇到某个类型并想了解它完整的数据结构的时候，可以回来翻阅这些数据结构的定义。</p><p>通过对 Flow 的认识，有助于我们阅读 Vue 的源码，并且这种静态类型检查的方式非常有利于大型项目源码的开发和维护。类似 Flow 的工具还有如 TypeScript，感兴趣的同学也可以自行去了解一下。</p><h1 id="vue-js-源码目录设计" tabindex="-1"><a class="header-anchor" href="#vue-js-源码目录设计"><span>Vue.js 源码目录设计</span></a></h1><p>Vue.js 的源码都在 src 目录下，其目录结构如下。</p><p>src</p><p>├── compiler # 编译相关</p><p>├── core # 核心代码</p><p>├── platforms # 不同平台的支持</p><p>├── server # 服务端渲染</p><p>├── sfc # .vue 文件解析</p><p>├── shared # 共享代码</p><h2 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler"><span><strong>compiler</strong></span></a></h2><p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。</p><p>编译的工作可以在构建时做（借助 webpack、vue-loader 等辅助插件）；也可以在运行时做，使用包含构建功能的 Vue.js。显然，编译是一项耗性能的工作，所以更推荐前者——离线编译。</p><h2 id="core" tabindex="-1"><a class="header-anchor" href="#core"><span><strong>core</strong></span></a></h2><p>core 目录包含了 Vue.js 的核心代码，包括内置组件、全局 API 封装，Vue 实例化、观察者、虚拟 DOM、工具函数等等。</p><p>这里的代码可谓是 Vue.js 的灵魂，也是我们之后需要重点分析的地方。</p><h2 id="platform" tabindex="-1"><a class="header-anchor" href="#platform"><span><strong>platform</strong></span></a></h2><p>Vue.js 是一个跨平台的 MVVM 框架，它可以跑在 web 上，也可以配合 weex 跑在 natvie 客户端上。platform 是 Vue.js 的入口，2 个目录代表 2 个主要入口，分别打包成运行在 web 上和 weex 上的 Vue.js。</p><p>我们会重点分析 web 入口打包后的 Vue.js，对于 weex 入口打包的 Vue.js，感兴趣的同学可以自行研究。</p><h2 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span><strong>server</strong></span></a></h2><p>Vue.js 2.0 支持了服务端渲染，所有服务端渲染相关的逻辑都在这个目录下。注意：这部分代码是跑在服务端的 Node.js，不要和跑在浏览器端的 Vue.js 混为一谈。</p><p>服务端渲染主要的工作是把组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将静态标记&quot;混合&quot;为客户端上完全交互的应用程序。</p><h2 id="sfc" tabindex="-1"><a class="header-anchor" href="#sfc"><span><strong>sfc</strong></span></a></h2><p>通常我们开发 Vue.js 都会借助 webpack 构建， 然后通过 .vue 单文件的编写组件。</p><p>这个目录下的代码逻辑会把 .vue 文件内容解析成一个 JavaScript 的对象。</p><h2 id="shared" tabindex="-1"><a class="header-anchor" href="#shared"><span><strong>shared</strong></span></a></h2><p>Vue.js 会定义一些工具方法，这里定义的工具方法都是会被浏览器端的 Vue.js 和服务端的 Vue.js 所共享的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>从 Vue.js 的目录设计可以看到，作者把功能模块拆分的非常清楚，相关的逻辑放在一个独立的目录下维护，并且把复用的代码也抽成一个独立目录。</p><p>这样的目录设计让代码的阅读性和可维护性都变强，是非常值得学习和推敲的。</p><p><strong>任务</strong></p><p>aaaaa</p><p><strong>Vue.js 源码构建</strong></p><h1 id="vue-js-源码构建" tabindex="-1"><a class="header-anchor" href="#vue-js-源码构建"><span><strong>Vue.js 源码构建</strong></span></a></h1><p>Vue.js 源码是基于 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener noreferrer">Rollup</a> 构建的，它的构建相关配置都在 scripts 目录下。</p><h2 id="构建脚本" tabindex="-1"><a class="header-anchor" href="#构建脚本"><span><strong>构建脚本</strong></span></a></h2><p>通常一个基于 NPM 托管的项目都会有一个 package.json 文件，它是对项目的描述文件，它的内容实际上是一个标准的 JSON 对象。</p><p>我们通常会配置 script 字段作为 NPM 的执行脚本，Vue.js 源码构建的脚本如下：</p><p>{</p><p>&quot;script&quot;: {</p><p>&quot;build&quot;: &quot;node scripts/build.js&quot;,</p><p>&quot;build:ssr&quot;: &quot;npm run build -- web-runtime-cjs,web-server-renderer&quot;,</p><p>&quot;build:weex&quot;: &quot;npm run build --weex&quot;</p><p>}</p><p>}</p><p>这里总共有 3 条命令，作用都是构建 Vue.js，后面 2 条是在第一条命令的基础上，添加一些环境参数。</p><p>当在命令行运行 npm run build 的时候，实际上就会执行 node scripts/build.js，接下来我们来看看它实际是怎么构建的。</p><h2 id="构建过程" tabindex="-1"><a class="header-anchor" href="#构建过程"><span><strong>构建过程</strong></span></a></h2><p>我们对于构建过程分析是基于源码的，先打开构建的入口 JS 文件，在 scripts/build.js 中：</p><p>let builds = require(&#39;./config&#39;).getAllBuilds()</p><p>// filter builds via command line arg</p><p>if (process.argv[2]) {</p><p>const filters = process.argv[2].split(&#39;,&#39;)</p><p>builds = builds.filter(b =&gt; {</p><p>return filters.some(f =&gt; b.output.file.indexOf(f) &gt; -1 || b._name.indexOf(f) &gt; -1)</p><p>})</p><p>} else {</p><p>// filter out weex builds by default</p><p>builds = builds.filter(b =&gt; {</p><p>return b.output.file.indexOf(&#39;weex&#39;) === -1</p><p>})</p><p>}</p><p>build(builds)</p><p>这段代码逻辑非常简单，先从配置文件读取配置，再通过命令行参数对构建配置做过滤，这样就可以构建出不同用途的 Vue.js 了。接下来我们看一下配置文件，在 scripts/config.js 中：</p><p>const builds = {</p><p>// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</p><p>&#39;web-runtime-cjs&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime.js&#39;),</p><p>dest: resolve(&#39;dist/vue.runtime.common.js&#39;),</p><p>format: &#39;cjs&#39;,</p><p>banner</p><p>},</p><p>// Runtime+compiler CommonJS build (CommonJS)</p><p>&#39;web-full-cjs&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime-with-compiler.js&#39;),</p><p>dest: resolve(&#39;dist/vue.common.js&#39;),</p><p>format: &#39;cjs&#39;,</p><p>alias: { he: &#39;./entity-decoder&#39; },</p><p>banner</p><p>},</p><p>// Runtime only (ES Modules). Used by bundlers that support ES Modules,</p><p>// e.g. Rollup &amp; Webpack 2</p><p>&#39;web-runtime-esm&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime.js&#39;),</p><p>dest: resolve(&#39;dist/vue.runtime.esm.js&#39;),</p><p>format: &#39;es&#39;,</p><p>banner</p><p>},</p><p>// Runtime+compiler CommonJS build (ES Modules)</p><p>&#39;web-full-esm&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime-with-compiler.js&#39;),</p><p>dest: resolve(&#39;dist/vue.esm.js&#39;),</p><p>format: &#39;es&#39;,</p><p>alias: { he: &#39;./entity-decoder&#39; },</p><p>banner</p><p>},</p><p>// runtime-only build (Browser)</p><p>&#39;web-runtime-dev&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime.js&#39;),</p><p>dest: resolve(&#39;dist/vue.runtime.js&#39;),</p><p>format: &#39;umd&#39;,</p><p>env: &#39;development&#39;,</p><p>banner</p><p>},</p><p>// runtime-only production build (Browser)</p><p>&#39;web-runtime-prod&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime.js&#39;),</p><p>dest: resolve(&#39;dist/vue.runtime.min.js&#39;),</p><p>format: &#39;umd&#39;,</p><p>env: &#39;production&#39;,</p><p>banner</p><p>},</p><p>// Runtime+compiler development build (Browser)</p><p>&#39;web-full-dev&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime-with-compiler.js&#39;),</p><p>dest: resolve(&#39;dist/vue.js&#39;),</p><p>format: &#39;umd&#39;,</p><p>env: &#39;development&#39;,</p><p>alias: { he: &#39;./entity-decoder&#39; },</p><p>banner</p><p>},</p><p>// Runtime+compiler production build (Browser)</p><p>&#39;web-full-prod&#39;: {</p><p>entry: resolve(&#39;web/entry-runtime-with-compiler.js&#39;),</p><p>dest: resolve(&#39;dist/vue.min.js&#39;),</p><p>format: &#39;umd&#39;,</p><p>env: &#39;production&#39;,</p><p>alias: { he: &#39;./entity-decoder&#39; },</p><p>banner</p><p>},</p><p>// ...</p><p>}</p><p>这里列举了一些 Vue.js 构建的配置，关于还有一些服务端渲染 webpack 插件以及 weex 的打包配置就不列举了。</p><p>对于单个配置，它是遵循 Rollup 的构建规则的。其中 entry 属性表示构建的入口 JS 文件地址，dest 属性表示构建后的 JS 文件地址。format 属性表示构建的格式，cjs 表示构建出来的文件遵循 <a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="noopener noreferrer">CommonJS</a> 规范，es 表示构建出来的文件遵循 <a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener noreferrer">ES Module</a> 规范。 umd 表示构建出来的文件遵循 <a href="https://github.com/umdjs/umd" target="_blank" rel="noopener noreferrer">UMD</a> 规范。</p><p>以 web-runtime-cjs 配置为例，它的 entry 是 resolve(&#39;web/entry-runtime.js&#39;)，先来看一下 resolve 函数的定义。</p><p>源码目录：scripts/config.js</p><p>const aliases = require(&#39;./alias&#39;)</p><p>const resolve = p =&gt; {</p><p>const base = p.split(&#39;/&#39;)[0]</p><p>if (aliases[base]) {</p><p>return path.resolve(aliases[base], p.slice(base.length + 1))</p><p>} else {</p><p>return path.resolve(__dirname, &#39;../&#39;, p)</p><p>}</p><p>}</p><p>这里的 resolve 函数实现非常简单，它先把 resolve 函数传入的参数 p 通过 / 做了分割成数组，然后取数组第一个元素设置为 base。在我们这个例子中，参数 p 是 web/entry-runtime.js，那么 base 则为 web。base 并不是实际的路径，它的真实路径借助了别名的配置，我们来看一下别名配置的代码，在 scripts/alias 中：</p><p>const path = require(&#39;path&#39;)</p><p>module.exports = {</p><p>vue: path.resolve(__dirname, &#39;../src/platforms/web/entry-runtime-with-compiler&#39;),</p><p>compiler: path.resolve(__dirname, &#39;../src/compiler&#39;),</p><p>core: path.resolve(__dirname, &#39;../src/core&#39;),</p><p>shared: path.resolve(__dirname, &#39;../src/shared&#39;),</p><p>web: path.resolve(__dirname, &#39;../src/platforms/web&#39;),</p><p>weex: path.resolve(__dirname, &#39;../src/platforms/weex&#39;),</p><p>server: path.resolve(__dirname, &#39;../src/server&#39;),</p><p>entries: path.resolve(__dirname, &#39;../src/entries&#39;),</p><p>sfc: path.resolve(__dirname, &#39;../src/sfc&#39;)</p><p>}</p><p>很显然，这里 web 对应的真实的路径是 path.resolve(__dirname, &#39;../src/platforms/web&#39;)，这个路径就找到了 Vue.js 源码的 web 目录。然后 resolve 函数通过 path.resolve(aliases[base], p.slice(base.length + 1)) 找到了最终路径，它就是 Vue.js 源码 web 目录下的 entry-runtime.js。因此，web-runtime-cjs 配置对应的入口文件就找到了。</p><p>它经过 Rollup 的构建打包后，最终会在 dist 目录下生成 vue.runtime.common.js。</p><h2 id="runtime-only-vs-runtime-compiler" tabindex="-1"><a class="header-anchor" href="#runtime-only-vs-runtime-compiler"><span><strong>Runtime Only VS Runtime+Compiler</strong></span></a></h2><p>通常我们利用 vue-cli 去初始化我们的 Vue.js 项目的时候会询问我们用 Runtime Only 版本的还是 Runtime+Compiler 版本。下面我们来对比这两个版本。</p><p>· Runtime Only</p><p>我们在使用 Runtime Only 版本的 Vue.js 的时候，通常需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript，因为是在编译阶段做的，所以它只包含运行时的 Vue.js 代码，因此代码体积也会更轻量。</p><p>· Runtime+Compiler</p><p>我们如果没有对代码做预编译，但又使用了 Vue 的 template 属性并传入一个字符串，则需要在客户端编译模板，如下所示：</p><p>// 需要编译器的版本</p><p>new Vue({</p>`,204)),n("p",null,[e[0]||(e[0]=p("template: '")),n("div",null,o(l.hi),1),e[1]||(e[1]=p("'"))]),e[3]||(e[3]=s('<p>})</p><p>// 这种情况不需要</p><p>new Vue({</p><p>render (h) {</p><p>return h(&#39;div&#39;, this.hi)</p><p>}</p><p>})</p><p>因为在 Vue.js 2.0 中，最终渲染都是通过 render 函数，如果写 template 属性，则需要编译成 render 函数，那么这个编译过程会发生运行时，所以需要带有编译器的版本。</p><p>很显然，这个编译过程对性能会有一定损耗，所以通常我们更推荐使用 Runtime-Only 的 Vue.js。</p><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span><strong>总结</strong></span></a></h2><p>通过这一节的分析，我们可以了解到 Vue.js 的构建打包过程，也知道了不同作用和功能的 Vue.js 它们对应的入口以及最终编译生成的 JS 文件。尽管在实际开发过程中我们会用 Runtime Only 版本开发比较多，但为了分析 Vue 的编译过程，我们这门课重点分析的源码是 Runtime+Compiler 的 Vue.js。</p><h1 id="从入口开始" tabindex="-1"><a class="header-anchor" href="#从入口开始"><span><strong>从入口开始</strong></span></a></h1><p>我们之前提到过 Vue.js 构建过程，在 web 应用下，我们来分析 Runtime + Compiler 构建出来的 Vue.js，它的入口是 src/platforms/web/entry-runtime-with-compiler.js：</p><p>/* @flow */</p><p>import config from &#39;core/config&#39;</p><p>import { warn, cached } from &#39;core/util/index&#39;</p><p>import { mark, measure } from &#39;core/util/perf&#39;</p><p>import Vue from &#39;./runtime/index&#39;</p><p>import { query } from &#39;./util/index&#39;</p><p>import { compileToFunctions } from &#39;./compiler/index&#39;</p><p>import { shouldDecodeNewlines, shouldDecodeNewlinesForHref } from &#39;./util/compat&#39;</p><p>const idToTemplate = cached(id =&gt; {</p><p>const el = query(id)</p><p>return el &amp;&amp; el.innerHTML</p><p>})</p><p>const mount = Vue.prototype.$mount</p><p>Vue.prototype.$mount = function (</p><p>el?: string | Element,</p><p>hydrating?: boolean</p><p>): Component {</p><p>el = el &amp;&amp; query(el)</p><p>/* istanbul ignore if */</p><p>if (el === document.body || el === document.documentElement) {</p><p>process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(</p><p><code>Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.</code></p><p>)</p><p>return this</p><p>}</p><p>const options = this.$options</p><p>// resolve template/el and convert to render function</p><p>if (!options.render) {</p><p>let template = options.template</p><p>if (template) {</p><p>if (typeof template === &#39;string&#39;) {</p><p>​ if (template.charAt(0) === &#39;#&#39;) {</p><p>​ template = idToTemplate(template)</p><p>​ /* istanbul ignore if */</p><p>​ if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; !template) {</p><p>​ warn(</p><p>​ <code>Template element not found or is empty: ${options.template}</code>,</p><p>​ this</p><p>​ )</p><p>​ }</p><p>​ }</p><p>} else if (template.nodeType) {</p><p>​ template = template.innerHTML</p><p>} else {</p><p>​ if (process.env.NODE_ENV !== &#39;production&#39;) {</p><p>​ warn(&#39;invalid template option:&#39; + template, this)</p><p>​ }</p><p>​ return this</p><p>}</p><p>} else if (el) {</p><p>template = getOuterHTML(el)</p><p>}</p><p>if (template) {</p><p>/* istanbul ignore if */</p><p>if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; config.performance &amp;&amp; mark) {</p><p>​ mark(&#39;compile&#39;)</p><p>}</p><p>const { render, staticRenderFns } = compileToFunctions(template, {</p><p>​ shouldDecodeNewlines,</p><p>​ shouldDecodeNewlinesForHref,</p><p>​ delimiters: options.delimiters,</p><p>​ comments: options.comments</p><p>}, this)</p><p>options.render = render</p><p>options.staticRenderFns = staticRenderFns</p><p>/* istanbul ignore if */</p><p>if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; config.performance &amp;&amp; mark) {</p><p>​ mark(&#39;compile end&#39;)</p><p>​ measure(<code>vue ${this._name} compile</code>, &#39;compile&#39;, &#39;compile end&#39;)</p><p>}</p><p>}</p><p>}</p><p>return mount.call(this, el, hydrating)</p><p>}</p><p>/**</p><p>* Get outerHTML of elements, taking care</p><p>* of SVG elements in IE as well.</p><p>*/</p><p>function getOuterHTML (el: Element): string {</p><p>if (el.outerHTML) {</p><p>return el.outerHTML</p><p>} else {</p><p>const container = document.createElement(&#39;div&#39;)</p><p>container.appendChild(el.cloneNode(true))</p><p>return container.innerHTML</p><p>}</p><p>}</p><p>Vue.compile = compileToFunctions</p><p>export default Vue</p><p>那么，当我们的代码执行 import Vue from &#39;vue&#39; 的时候，就是从这个入口执行代码来初始化 Vue， 那么 Vue 到底是什么，它是怎么初始化的，我们来一探究竟。</p><h2 id="vue-的入口" tabindex="-1"><a class="header-anchor" href="#vue-的入口"><span><strong>Vue 的入口</strong></span></a></h2><p>在这个入口 JS 的上方我们可以找到 Vue 的来源：import Vue from &#39;./runtime/index&#39;，我们先来看一下这块儿的实现，它定义在 src/platforms/web/runtime/index.js 中：</p><p>import Vue from &#39;core/index&#39;</p><p>import config from &#39;core/config&#39;</p><p>import { extend, noop } from &#39;shared/util&#39;</p><p>import { mountComponent } from &#39;core/instance/lifecycle&#39;</p><p>import { devtools, inBrowser, isChrome } from &#39;core/util/index&#39;</p><p>import {</p><p>query,</p><p>mustUseProp,</p><p>isReservedTag,</p><p>isReservedAttr,</p><p>getTagNamespace,</p><p>isUnknownElement</p><p>} from &#39;web/util/index&#39;</p><p>import { patch } from &#39;./patch&#39;</p><p>import platformDirectives from &#39;./directives/index&#39;</p><p>import platformComponents from &#39;./components/index&#39;</p><p>// install platform specific utils</p><p>Vue.config.mustUseProp = mustUseProp</p><p>Vue.config.isReservedTag = isReservedTag</p><p>Vue.config.isReservedAttr = isReservedAttr</p><p>Vue.config.getTagNamespace = getTagNamespace</p><p>Vue.config.isUnknownElement = isUnknownElement</p><p>// install platform runtime directives &amp; components</p><p>extend(Vue.options.directives, platformDirectives)</p><p>extend(Vue.options.components, platformComponents)</p><p>// install platform patch function</p><p>Vue.prototype.<strong>patch</strong> = inBrowser ? patch : noop</p><p>// public mount method</p><p>Vue.prototype.$mount = function (</p><p>el?: string | Element,</p><p>hydrating?: boolean</p><p>): Component {</p><p>el = el &amp;&amp; inBrowser ? query(el) : undefined</p><p>return mountComponent(this, el, hydrating)</p><p>}</p><p>// ...</p><p>export default Vue</p><p>这里关键的代码是 import Vue from &#39;core/index&#39;，之后的逻辑都是对 Vue 这个对象做一些扩展，可以先不用看，我们来看一下真正初始化 Vue 的地方，在 src/core/index.js 中：</p><p>import Vue from &#39;./instance/index&#39;</p><p>import { initGlobalAPI } from &#39;./global-api/index&#39;</p><p>import { isServerRendering } from &#39;core/util/env&#39;</p><p>import { FunctionalRenderContext } from &#39;core/vdom/create-functional-component&#39;</p><p>initGlobalAPI(Vue)</p><p>Object.defineProperty(Vue.prototype, &#39;$isServer&#39;, {</p><p>get: isServerRendering</p><p>})</p><p>Object.defineProperty(Vue.prototype, &#39;$ssrContext&#39;, {</p><p>get () {</p><p>/* istanbul ignore next */</p><p>return this.$vnode &amp;&amp; this.$vnode.ssrContext</p><p>}</p><p>})</p><p>// expose FunctionalRenderContext for ssr runtime helper installation</p><p>Object.defineProperty(Vue, &#39;FunctionalRenderContext&#39;, {</p><p>value: FunctionalRenderContext</p><p>})</p><p>Vue.version = &#39;<strong>VERSION</strong>&#39;</p><p>export default Vue</p><p>这里有 2 处关键的代码，import Vue from &#39;./instance/index&#39; 和 initGlobalAPI(Vue)，初始化全局 Vue API（我们稍后介绍），我们先来看第一部分，在 src/core/instance/index.js 中：</p><h3 id="vue-的定义" tabindex="-1"><a class="header-anchor" href="#vue-的定义"><span><strong>Vue 的定义</strong></span></a></h3><p>import { initMixin } from &#39;./init&#39;</p><p>import { stateMixin } from &#39;./state&#39;</p><p>import { renderMixin } from &#39;./render&#39;</p><p>import { eventsMixin } from &#39;./events&#39;</p><p>import { lifecycleMixin } from &#39;./lifecycle&#39;</p><p>import { warn } from &#39;../util/index&#39;</p><p>function Vue (options) {</p><p>if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;</p><p>!(this instanceof Vue)</p><p>) {</p><p>warn(&#39;Vue is a constructor and should be called with the <code>new</code> keyword&#39;)</p><p>}</p><p>this._init(options)</p><p>}</p><p>initMixin(Vue)</p><p>stateMixin(Vue)</p><p>eventsMixin(Vue)</p><p>lifecycleMixin(Vue)</p><p>renderMixin(Vue)</p><p>export default Vue</p><p>在这里，我们终于看到了 Vue 的庐山真面目，它实际上就是一个用 Function 实现的类，我们只能通过 new Vue 去实例化它。</p><p>有些同学看到这不禁想问，为何 Vue 不用 ES6 的 Class 去实现呢？我们往后看这里有很多 xxxMixin 的函数调用，并把 Vue 当参数传入，它们的功能都是给 Vue 的 prototype 上扩展一些方法（这里具体的细节会在之后的文章介绍，这里不展开），Vue 按功能把这些扩展分散到多个模块中去实现，而不是在一个模块里实现所有，这种方式是用 Class 难以实现的。这么做的好处是非常方便代码的维护和管理，这种编程技巧也非常值得我们去学习。</p><h3 id="initglobalapi" tabindex="-1"><a class="header-anchor" href="#initglobalapi"><span>initGlobalAPI</span></a></h3><p>Vue.js 在整个初始化过程中，除了给它的原型 prototype 上扩展方法，还会给 Vue 这个对象本身扩展全局的静态方法，它的定义在 src/core/global-api/index.js 中：</p><p>export function initGlobalAPI (Vue: GlobalAPI) {</p><p>// config</p><p>const configDef = {}</p><p>configDef.get = () =&gt; config</p><p>if (process.env.NODE_ENV !== &#39;production&#39;) {</p><p>configDef.set = () =&gt; {</p><p>warn(</p><p>​ &#39;Do not replace the Vue.config object, set individual fields instead.&#39;</p><p>)</p><p>}</p><p>}</p><p>Object.defineProperty(Vue, &#39;config&#39;, configDef)</p><p>// exposed util methods.</p><p>// NOTE: these are not considered part of the public API - avoid relying on</p><p>// them unless you are aware of the risk.</p><p>Vue.util = {</p><p>warn,</p><p>extend,</p><p>mergeOptions,</p><p>defineReactive</p><p>}</p><p>Vue.set = set</p><p>Vue.delete = del</p><p>Vue.nextTick = nextTick</p><p>Vue.options = Object.create(null)</p><p>ASSET_TYPES.forEach(type =&gt; {</p><p>Vue.options[type + &#39;s&#39;] = Object.create(null)</p><p>})</p><p>// this is used to identify the &quot;base&quot; constructor to extend all plain-object</p><p>// components with in Weex&#39;s multi-instance scenarios.</p><p>Vue.options._base = Vue</p><p>extend(Vue.options.components, builtInComponents)</p><p>initUse(Vue)</p><p>initMixin(Vue)</p><p>initExtend(Vue)</p><p>initAssetRegisters(Vue)</p><p>}</p><p>这里就是在 Vue 上扩展的一些全局方法的定义，Vue 官网中关于全局 API 都可以在这里找到，这里不会介绍细节，会在之后的章节我们具体介绍到某个 API 的时候会详细介绍。有一点要注意的是，Vue.util 暴露的方法最好不要依赖，因为它可能经常会发生变化，是不稳定的。</p><h2 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span><strong>总结</strong></span></a></h2><p>那么至此，Vue 的初始化过程基本介绍完毕。这一节的目的是让同学们对 Vue 是什么有一个直观的认识，它本质上就是一个用 Function 实现的 Class，然后它的原型 prototype 以及它本身都扩展了一系列的方法和属性，那么 Vue 能做什么，它是怎么做的，我们会在后面的章节一层层帮大家揭开 Vue 的神秘面纱。</p><p><strong>任务</strong></p><p>请仔细阅读本文档，为下面学习视频内容做准备</p>',231))])}const u=a(t,[["render",c],["__file","Vue.js源码全方位深入解析.html.vue"]]),m=JSON.parse('{"path":"/%E5%85%B6%E4%BB%96/Vue.js%E6%BA%90%E7%A0%81%E5%85%A8%E6%96%B9%E4%BD%8D%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90.html","title":"Vue.js源码全方位深入解析","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"认识Flow","slug":"认识flow","link":"#认识flow","children":[{"level":3,"title":"类型判断","slug":"类型判断","link":"#类型判断","children":[]},{"level":3,"title":"类型注释","slug":"类型注释","link":"#类型注释","children":[]},{"level":3,"title":"类和对象","slug":"类和对象","link":"#类和对象","children":[]},{"level":3,"title":"Null","slug":"null","link":"#null","children":[]}]},{"level":2,"title":"Flow 在 Vue.js 源码中的应用","slug":"flow-在-vue-js-源码中的应用","link":"#flow-在-vue-js-源码中的应用","children":[]},{"level":2,"title":"compiler","slug":"compiler","link":"#compiler","children":[]},{"level":2,"title":"core","slug":"core","link":"#core","children":[]},{"level":2,"title":"platform","slug":"platform","link":"#platform","children":[]},{"level":2,"title":"server","slug":"server","link":"#server","children":[]},{"level":2,"title":"sfc","slug":"sfc","link":"#sfc","children":[]},{"level":2,"title":"shared","slug":"shared","link":"#shared","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"构建脚本","slug":"构建脚本","link":"#构建脚本","children":[]},{"level":2,"title":"构建过程","slug":"构建过程","link":"#构建过程","children":[]},{"level":2,"title":"Runtime Only VS Runtime+Compiler","slug":"runtime-only-vs-runtime-compiler","link":"#runtime-only-vs-runtime-compiler","children":[]},{"level":2,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":2,"title":"Vue 的入口","slug":"vue-的入口","link":"#vue-的入口","children":[{"level":3,"title":"Vue 的定义","slug":"vue-的定义","link":"#vue-的定义","children":[]},{"level":3,"title":"initGlobalAPI","slug":"initglobalapi","link":"#initglobalapi","children":[]}]},{"level":2,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]}],"git":{"updatedTime":1726590005000,"contributors":[{"name":"csmSimona","email":"980715844@qq.com","commits":1}]},"filePathRelative":"其他/Vue.js源码全方位深入解析.md","readingTime":{"minutes":14.71,"words":4414}}');export{u as comp,m as data};
