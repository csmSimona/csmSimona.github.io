import{_ as s,c as n,o as a,a as l}from"./app-BWw5vpul.js";const e="/csmSimona.github.io/assets/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-192AbPQE.png",p="/csmSimona.github.io/assets/redux%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B-CFl7v63-.png",o={},i=l(`<h1 id="react小记" tabindex="-1"><a class="header-anchor" href="#react小记"><span>React小记</span></a></h1><h2 id="react基本使用" tabindex="-1"><a class="header-anchor" href="#react基本使用"><span>React基本使用</span></a></h2><h3 id="_1、jsx" tabindex="-1"><a class="header-anchor" href="#_1、jsx"><span>1、JSX</span></a></h3><p>React发明了JSX，利用HTML语法来创建虚拟DOM。React的核心机制之一就是可以在内存中创建虚拟的DOM元素。以此来减少对实际DOM的操作从而提升性能。JSX即JavaScript XML，它是对JavaScript的语法扩展，React使用JSX来替代常规的JS。</p><p><strong>JSX的优点</strong></p><ul><li>JSX执行更快，因为它在编译为JS代码进行了优化</li><li>它是类型安全的，在编译过程中就能发现错误 <ul><li>React DOM 在渲染所有输入内容之前，默认会进行转义。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止XSS（cross-site-scripting, 跨站脚本）攻击。</li></ul></li><li>使用JSX编写模板更加简单快速</li></ul><p><strong>JSX语法</strong></p><p>1、我们可以在代码中嵌套多个HTML标签，需要使用一个div元素包裹它。也可以用<code>&lt;Fragment&gt;&lt;/Fragment&gt;</code>（相当于占位符，但不会增加元素）来包裹</p><p>2、添加自定义属性需要使用“data-”前缀。实例中的p元素添加了自定义属性data-myattribute</p><p>3、我们可以在JSX中使用JS表达式（不能适用于语句），表达式写在大括号“{}”中</p><ul><li><p><code>{2+2}</code> <code>{user.firstName}</code> <code>{formatName(user)}</code></p></li><li><p>在JSX中不能使用if-else语句，但可以使用conditional（三元运算）表达式来替代</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> show</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">{</span><span style="color:#9CDCFE;">show</span><span style="color:#D4D4D4;"> ? </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">img</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;xxx.png&quot;</span><span style="color:#808080;">/&gt;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>循环</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> list</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">item</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>4、样式</p><ul><li><p>React推荐使用内联样式。我们可以使用camelCase语法设置内联样式。</p><p>React会在指定元素数字后自动添加px</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> myStyle</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    fontSize:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">,  </span><span style="color:#6A9955;">// css中为font-size</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    color:</span><span style="color:#CE9178;"> &#39;#FF0000&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#9CDCFE;"> style</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">myStyle</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#9CDCFE;"> style</span><span style="color:#F44747;"> =</span><span style="color:#9CDCFE;"> {{background: red;}}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;"> //两个大括号</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">red</span><span style="color:#D4D4D4;">-</span><span style="color:#9CDCFE;">btn</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    background</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">red</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#9CDCFE;"> className</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;red-btn&#39;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;">  // 使用className而不是class</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>5、注释</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">{</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // （单行注释要换行）</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、数组</p><p>JSX允许在模板中插入数组，数组会自动展开所有成员</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">xxx</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">arr</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、向事件处理程序传递参数" tabindex="-1"><a class="header-anchor" href="#_2、向事件处理程序传递参数"><span>2、向事件处理程序传递参数</span></a></h3><p>在循环中，通常我们会为事件处理函数传递额外的参数。例如，若 id 是你要删除那一行的 ID，以下两种方式都可以向事件处理函数传递参数：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">deleteRow</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete Row</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">deleteRow</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete Row</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两种方式是等价的，分别通过箭头函数和 Function.prototype.bind 来实现。</p><h3 id="_3、state" tabindex="-1"><a class="header-anchor" href="#_3、state"><span>3、state</span></a></h3><ul><li><p>不要直接修改state</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">comment</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// wrong</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    comment:</span><span style="color:#CE9178;"> &#39;hello&#39;</span><span style="color:#D4D4D4;">;  </span><span style="color:#6A9955;">//right</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数是唯一可以给this.state赋值的地方</p></li><li><p>State 的更新可能是异步的</p></li></ul><p>出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。 因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。 例如，此代码可能会无法更新计数器：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// Wrong</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  counter:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counter</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">increment</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要解决这个问题，可以让 setState() 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// Correct</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  counter:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counter</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">increment</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}));</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、阻止默认行为" tabindex="-1"><a class="header-anchor" href="#_4、阻止默认行为"><span>4、阻止默认行为</span></a></h3><p>不能通过返回 false 的方式阻止默认行为。必须显式的使用 preventDefault 。</p><p>例如，传统的 HTML 中阻止链接默认打开一个新页面，你可以这样写： <code>&lt;a href=&quot;#&quot; onclick=&quot;console.log(&#39;The link was clicked.&#39;); return false&quot;&gt;</code></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">a</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Click me</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">a</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> ActionLink</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> handleClick</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">preventDefault</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;The link was clicked.&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">a</span><span style="color:#9CDCFE;"> href</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;#&quot;</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">handleClick</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      Click me</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">a</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，e 是一个合成事件。React 根据 W3C 规范来定义这些合成事件，所以你不需要担心跨浏览器的兼容性问题。</p><h3 id="_5、阻止组件渲染" tabindex="-1"><a class="header-anchor" href="#_5、阻止组件渲染"><span>5、阻止组件渲染</span></a></h3><p>在极少数情况下，你可能希望能隐藏组件，即使它已经被其他组件渲染。若要完成此操作，你<strong>可以让 render 方法直接返回 null</strong>，而不进行任何渲染。 下面的示例中，<code>&lt;WarningBanner /&gt; </code>会根据 prop 中 warn 的值来进行条件渲染。如果 warn 的值是 false，那么组件则不会渲染:</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> WarningBanner</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">warn</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> className</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;warning&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      Warning!</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Page</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">showWarning:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleToggleClick</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleToggleClick</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  handleToggleClick</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      showWarning:</span><span style="color:#D4D4D4;"> !</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">showWarning</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }));</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#4EC9B0;">WarningBanner</span><span style="color:#9CDCFE;"> warn</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">showWarning</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleToggleClick</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">          {this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">showWarning</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&#39;Hide&#39;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&#39;Show&#39;</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">ReactDOM</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#4EC9B0;">Page</span><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;root&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、一个元素的-key" tabindex="-1"><a class="header-anchor" href="#_6、一个元素的-key"><span>6、一个元素的 key</span></a></h3><p>最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用来自数据 id 来作为元素的 key：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> todoItems</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">todos</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    {</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">text</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> todoItems</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">todos</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // Only do this if items have no stable IDs</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    {</span><span style="color:#9CDCFE;">todo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">text</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**循环中的key值最好不是index，原始虚拟DOM树和新的虚拟DOM树的key值一致能提升虚拟DOM比对的性能，而列表项目的顺序可能会变化，index是不稳定的，经常会改变。使用index做key值会导致性能变差，还可能引起组件状态的问题。**如果你选择不指定显式的 key 值，那么 React 将默认使用索引用作为列表项目的 key 值。</p><h3 id="_7、setstate的过程" tabindex="-1"><a class="header-anchor" href="#_7、setstate的过程"><span>7、setState的过程</span></a></h3><ul><li>每个组件实例，都有renderComponent方法</li><li>执行renderComponent会重新执行执行的render</li><li>render函数返回newVnode，然后拿到vnode</li><li>执行patch(vnode, newVnode)</li></ul><h3 id="_8、pwa" tabindex="-1"><a class="header-anchor" href="#_8、pwa"><span>8、PWA</span></a></h3><p><strong>什么是PWA</strong></p><p>PWA全称Progressive Web App，即渐进式WEB应用。</p><p>写网页的形式写手机APP应用。</p><blockquote><p>1、可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏 2、实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能 3、实现了消息推送</p></blockquote><p>registerServiceWorker</p><p>引用它，网页上线到支持https协议的服务器上。第一次访问时需联网才能看到，但突然断网，第二次访问时依然可以看到之前访问过的页面，因为registerServiceWorker会把之前的网页存储在浏览器内。</p><h3 id="_9、html元素转义" tabindex="-1"><a class="header-anchor" href="#_9、html元素转义"><span>9、html元素转义</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">\`&lt;h1&gt;hello&lt;/h1&gt;\`</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">li</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleItemDelete</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    dangerouslySetInnerHTML</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">__html</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">item</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、扩大点击区域" tabindex="-1"><a class="header-anchor" href="#_10、扩大点击区域"><span>10、扩大点击区域</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">label</span><span style="color:#9CDCFE;"> htmlFor</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;insertArea&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">输入内容</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">label</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;">  // 不用for，与循环for有歧义</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;insertArea&quot;</span><span style="color:#808080;">/&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、react的思考" tabindex="-1"><a class="header-anchor" href="#_11、react的思考"><span>11、react的思考</span></a></h3><ul><li>声名式开发</li><li>可以与其它框架并存</li><li>组件化</li><li>单向数据流</li><li>视图层框架</li><li>函数式编程</li></ul><h3 id="_12、父子组件的通信" tabindex="-1"><a class="header-anchor" href="#_12、父子组件的通信"><span>12、父子组件的通信</span></a></h3><h4 id="父传子" tabindex="-1"><a class="header-anchor" href="#父传子"><span>父传子</span></a></h4><ul><li><p>父组件通过属性形式向子组件传递参数，子组件通过props接收父组件传递过来的参数</p><p>无论是使用函数声明还是class声明，都绝不能改变自身的props，所有React组件都必须像纯函数一样保护它们的props不被改变</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">TodoItem</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	delete</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleDelete</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	content</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">item</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	index</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">handleDelete</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">delete</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">index</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleDelete</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">content</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>子组件如果想与父组件通信，子组件要调用父组件传过来的方法</p></li><li><p>子组件只能使用父组件传递过来的值，但不能改变值（单向数据流）</p></li></ul><h4 id="子传父" tabindex="-1"><a class="header-anchor" href="#子传父"><span>子传父</span></a></h4><p>1、通过refs传递</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">QueryBox</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;queryBox&quot;</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> onSearch</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onSearch</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> onCount</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onCount</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> QueryBoxInstance</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">refs</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">queryBox</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> QueryBox</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">QueryBoxInstance</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onChange</span><span style="color:#D4D4D4;">();</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、通过回调函数传递</p><p>父：<code>&lt;Child onHandleChild=&quot;函数&quot;/&gt;</code> 父组件 =&gt; 函数(参数){ }</p><p>子：this.props.onHandleChild(传值) 在子组件中执行这个函数,会传值到父组件</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 父组件</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">AddModal</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    onOk</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">score</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">review</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">handleOk</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">score</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">review</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> any</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    onCancel</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hideModal</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> any</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    loading</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">loading</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    studentInfo</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">studentInfo</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 子组件</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;"> &lt;</span><span style="color:#4EC9B0;">Modal</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    visible</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{true}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    title</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;评分&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    onOk</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onOk</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">score</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">review</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    onCancel</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onCancel</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    confirmLoading</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">loading</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    okText</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;确认&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    className</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;review&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    cancelText</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;取消&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">  \\&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13、子组件proptypes和defaultprops" tabindex="-1"><a class="header-anchor" href="#_13、子组件proptypes和defaultprops"><span>13、子组件PropTypes和DefaultProps</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> PropTypes</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;prop-types&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 属性类型校验</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">TodoItem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">propTypes</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  test:</span><span style="color:#9CDCFE;"> PropTypes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">isRequired</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  content:</span><span style="color:#9CDCFE;"> PropTypes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  deleteItem:</span><span style="color:#9CDCFE;"> PropTypes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">func</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  index:</span><span style="color:#9CDCFE;"> PropTypes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 定义属性默认值</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">TodoItem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">defaultProps</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  test:</span><span style="color:#CE9178;"> &#39;hello world&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14、props-state与render函数" tabindex="-1"><a class="header-anchor" href="#_14、props-state与render函数"><span>14、props，state与render函数</span></a></h3><p>当组件的state或props发生改变的时候，render函数就会重新执行。</p><p>当父组件的render函数被运行时，它的子组件的render都将被重新运行一次。</p><h3 id="_15、虚拟dom" tabindex="-1"><a class="header-anchor" href="#_15、虚拟dom"><span>⭐15、虚拟DOM</span></a></h3><p>什么是虚拟DOM？用JS模拟DOM结构，DOM变化的对比，放在JS层进行（因为前端语言中只有JS是图灵完备语言）<a href="https://blog.csdn.net/Roselane_Begger/article/details/101176694" target="_blank" rel="noopener noreferrer">什么是图灵完备语言？</a></p><p>创建真实DOM损耗的性能远大于创建虚拟DOM损耗的性能。</p><p>虚拟DOM提高性能，不是说不操作DOM，而是减少操作DOM的次数，减少回流和重绘。</p><p>虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 <strong>dom diff 算法避免了没有必要的 dom 操作</strong>，从而提高性能。</p><p>1）用 JavaScript 对象结构表示 DOM 树的结构；</p><p>2）然后用这个树构建一个真正的 DOM 树，插到文档当中</p><p>3）当状态变更的时候，重新构造一棵新的对象树</p><p>4）然后用新的树和旧的树进行比较，记录两棵树差异</p><p>5）把所记录的差异应用到步骤 2) 所构建的真正的 DOM 树上，视图就更新了</p><p>使用diff算法比较新旧虚拟DOM----即比较两个js对象不怎么耗性能，而比较两个真实的DOM比较耗性能，从而虚拟DOM极大的提升了性能</p><p><strong>虚拟DOM发生比对的时机</strong>：当数据发生变化的时候会发生虚拟DOM的比对（props和state发生变化，而props的变化是父组件的state发生变化，归根结底就是调用setState()的时候state发生变化，然后虚拟DOM发生比对）。</p><p><strong>setState()方法是异步的</strong>，从而提升性能-----例如调用3次setState()变更数据，而调用时间间隔小，React可以将3次setState合并成一次setState，只做一次虚拟DOM比对，然后对DOM更新，从而省去两次额外虚拟DOM比对的性能损耗</p><h4 id="diff算法-同层比对-列表使用不同的key值" tabindex="-1"><a class="header-anchor" href="#diff算法-同层比对-列表使用不同的key值"><span>diff算法：同层比对，列表使用不同的key值</span></a></h4><p>[一个元素的 key](# 6、一个元素的 key)</p><ul><li>把树形结构按照层级分解，只比较同级元素。</li><li>给列表结构的每个单元添加唯一的 key 属性，方便比较。</li><li>React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）</li><li>合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component ，然后重新绘制.</li><li>选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能</li></ul><p><strong>React的DOM是同层比对的</strong></p><p>diff算法指的就是<strong>两个虚拟DOM作比对</strong>，在diff算法中有个概念就是<strong>同级比对</strong>，首先比对顶层虚拟DOM节点是否一致，如果一样就接着比对下一层，如果不一样，就停止向下比对，将原始页面中这个DOM及 下面的DOM全部删除掉，重新生成新的虚拟DOM，然后替换掉原始页面的DOM</p><p><strong>存在问题</strong>：如果第一层虚拟DOM节点不同，下面的都相同，使用虚拟DOM的diff算法，则这些节点都不能使用了，会造成重新渲染的浪费。</p><p><strong>优点</strong>：同层虚拟DOM比对，只需要一层层的比较，算法简单，比对的速度快</p><p>虽然会造成重新渲染的浪费，但是会大大减少两个虚拟DOM比对的性能消耗</p><p><strong>diff算法实现（简洁版，不是真正的实现方式）</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// patch(container, vnode)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> tag</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">tag</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> attrs</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">attrs</span><span style="color:#D4D4D4;"> || {};</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> children</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;"> || [];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">tag</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> elem</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">tag</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// 创建真实的DOM元素</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> attrName</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">attrName</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> attr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">attrs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">attrName</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            elem</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setAttribute</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">attrName</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">attrs</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">attrName</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// 给elem添加属性</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    children</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">childVnode</span><span style="color:#D4D4D4;">) { </span><span style="color:#6A9955;">// 子元素</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        elem</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">appendChild</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">childVnode</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">// 给elem添加子元素、递归 </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> elem</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 返回真实的DOM元素</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// patch(vnode, newVnode)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> updateChildren</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newVode</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> children</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;"> || [];</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> newChildren</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">newVnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;"> || [];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    children</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> newChildVnode</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">newChildren</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">childVnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">tag</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">newChildVnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">tag</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            updateChildren</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">childVnode</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newChildVnode</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 深层次对比，递归</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            replaceNode</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">childVnode</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newChildVnode</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 替换</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> replaceNode</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newVnode</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> elem</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elem</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 真实的DOM节点</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> newElem</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newVnode</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 下一步进行替换</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重点-虚拟dom实现" tabindex="-1"><a class="header-anchor" href="#重点-虚拟dom实现"><span>（重点）虚拟DOM实现</span></a></h4><p><strong>1、state数据</strong></p><p><strong>2、JSX模板</strong></p><p><strong>3、数据+模板 生成虚拟DOM（虚拟DOM就是一个JS对象，用它来描述真实DOM）（损耗了性能）</strong></p><p><code>[&#39;div&#39;, {id: &#39;abc&#39;}, [&#39;span&#39;, {}, &#39;hello world&#39;]]</code></p><p><strong>4、用虚拟DOM的结构，生成真实的DOM来显示</strong></p><p><code>&lt;div id=&#39;abc&#39;&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;/div&gt;</code></p><p><strong>5、state发生变化</strong></p><p><strong>6、数据+模板 生成新的虚拟DOM（极大地提升了性能）</strong></p><p><code>[&#39;div&#39;, {id: &#39;abc&#39;}, [&#39;span&#39;, {}, &#39;byebye&#39;]]</code></p><p><strong>7、比较原始虚拟DOM和新的虚拟DOM的区别，找到区别是span中的内容（极大地提升了性能）</strong></p><p><strong>8、直接操作DOM，改变span中的内容</strong></p><p>JSX =&gt; createElement =&gt; 虚拟DOM（JS对象）=&gt; 真实DOM</p><p><code>return &lt;div&gt;item&lt;/div&gt;</code> 等价于 <code>return ReactElement(&#39;div&#39;, {}, &#39;item&#39;)</code></p><p><strong>虚拟DOM的优点</strong></p><p>1、提高重绘性能</p><p>2、它使得跨端应用得以实现 （React Native）</p><h3 id="_16、react中ref的使用-不过尽量少用" tabindex="-1"><a class="header-anchor" href="#_16、react中ref的使用-不过尽量少用"><span>16、React中ref的使用（不过尽量少用）</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">inputValue</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">;}</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> onChange</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleInputChange</span><span style="color:#569CD6;">}</span><span style="color:#808080;">  /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">handleInputChange</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> value</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;  </span><span style="color:#6A9955;">//替换e.target.value</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        inputValue:</span><span style="color:#9CDCFE;"> value</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17、生命周期" tabindex="-1"><a class="header-anchor" href="#_17、生命周期"><span>17、生命周期</span></a></h3><p>生命周期函数指在某一时刻组件会自动调用执行的函数。</p><p><img src="`+e+`" alt="react生命周期"></p><ul><li><p>constructor：在组件一创建的时刻就被调用。但不归类在React的生命周期中，因为它是ES6里面的东西，不是React独有的。</p></li><li><p>componentWillMount：在组件即将被挂载到页面的时刻自动执行。</p></li><li><p>componentDidMount：在组件被挂载后自动执行。</p></li><li><p>shouldComponentUpdate：组件被更新之前，自动被执行需要返回一个布尔值。true 更新 false 不会被更新</p></li><li><p>componentWillUpdate：组件被更新之前，它会自动执行，但是它在shouldComponentUpdate之后被执行，如果返回true就执行，如果返回false，这个函数就不会被执行了。</p></li><li><p>componentDidUpdate：组件被更新之后自动执行。</p></li><li><p>componentWillReceiveProps：一个组件要从父组件接受参数。只要父组件的render函数被重新执行了，子组件的这个生命周期函数就会被执行（如果这个组件第一次存在与父组件中，不会执行；如果这个组件之前已经存在于父组件中，才会执行）</p></li><li><p>componentWillUnmount：当这个组件即将被从页面中剔除的时候，会被执行。</p></li></ul><h3 id="_18、性能提升" tabindex="-1"><a class="header-anchor" href="#_18、性能提升"><span>18、性能提升</span></a></h3><p>这篇文章挺好的：https://www.jianshu.com/p/333f390f2e84</p><p>1、<code>this.handleClick = this.handleClick.bind(this);</code></p><p>将这种作用域的修改放在constructor中，保证作用域绑定操作只执行一次。</p><p>2、setState异步函数：能将多个数据的改变结合成一次来做，降低虚拟DOM的比对频率。</p><p>3、虚拟DOM，同层比对</p><p>4、借助<strong>shouldComponentUpdate</strong>避免组件做多次无谓的render操作</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">shouldComponentUpdate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nextState</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nextProps</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    ...</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、ajax请求放在<strong>componentDidMount</strong>里</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">componentDidMount</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    axios</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/api/todolist&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> { </span><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;succ&#39;</span><span style="color:#D4D4D4;">); })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> { </span><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error&#39;</span><span style="color:#D4D4D4;">) })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19、react的css过渡动画" tabindex="-1"><a class="header-anchor" href="#_19、react的css过渡动画"><span>19、React的css过渡动画</span></a></h3><div class="language-css line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-css;"><code><span class="line"><span class="line"><span style="color:#D7BA7D;">.show</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    transition</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">all</span><span style="color:#B5CEA8;"> 1s</span><span style="color:#CE9178;"> ease-in</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">.hide</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    animation</span><span style="color:#D4D4D4;">: hide-item </span><span style="color:#B5CEA8;">2s</span><span style="color:#CE9178;"> ease-in</span><span style="color:#D4D4D4;"> forwords; // 保持动画最后一帧css的样式</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">@keyframes</span><span style="color:#9CDCFE;"> hide-item</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    0% {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        color</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">red</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    50% {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        color</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">green</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    100% {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        color</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">blue</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20、使用react-transition-group实现动画" tabindex="-1"><a class="header-anchor" href="#_20、使用react-transition-group实现动画"><span>20、使用react-transition-group实现动画</span></a></h3><div class="language-css line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-css;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">import {CSSTransition} from &#39;</span><span style="color:#569CD6;">react-transition-group</span><span style="color:#D4D4D4;">&#39;;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">&lt;CSSTransition </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	onEntered={(el) =&gt; {el.</span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> = &#39;blue&#39;;}}  // 结束时为蓝色</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    in={this.state.show}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    className=&#39;fade&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	timeout={1000}  // 动画执行时间</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	appear={true}  // 第一次展现也有动画效果</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	unmountOnExit // DOM消失时被移除</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        &lt;</span><span style="color:#D7BA7D;">div</span><span style="color:#D4D4D4;">&gt;hello&lt;/</span><span style="color:#D7BA7D;">div</span><span style="color:#D4D4D4;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">&lt;/CSSTransition&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">.fade-enter</span><span style="color:#D4D4D4;">, </span><span style="color:#D7BA7D;">.fade-appear</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">.fade-enter-active</span><span style="color:#D4D4D4;">, </span><span style="color:#D7BA7D;">.fade-appear-active</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    transition</span><span style="color:#D4D4D4;">: opacity </span><span style="color:#B5CEA8;">1s</span><span style="color:#CE9178;"> ease-in</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">.fade-enter-done</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    color</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">red</span><span style="color:#D4D4D4;">;  // 结束之后为红色</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">.fade-exit</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">.fade-exit-active</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    transition</span><span style="color:#D4D4D4;">: opacity </span><span style="color:#B5CEA8;">1s</span><span style="color:#CE9178;"> ease-in</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">.fade-exit-done</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    opacity</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21、redux" tabindex="-1"><a class="header-anchor" href="#_21、redux"><span>⭐21、Redux</span></a></h3><p>Redux是js应用的 一种可预测的状态容器</p><p><strong>用户页面行为触发一个<code>Action</code>，然后，<code>Store </code>自动调用 <code>Reducer</code>，并且传入两个参数：当前 State 和收到的 Action。Reducer 会返回新的 State 。每当state更新之后，<code>view</code>会根据state触发重新渲染。</strong></p><p>Redux = Reducer + Flux</p><p>工作流程</p><p><img src="`+p+`" alt="redux的工作流程"></p><p>使用</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// store/index.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> {</span><span style="color:#9CDCFE;">createStore</span><span style="color:#D4D4D4;">} </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;redux&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> reducer</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./reducer&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createStore</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	reducer</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__REDUX_DEVTOOLS_EXTENSION__</span><span style="color:#D4D4D4;"> &amp;&amp;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">__REDUX_DEVTOOLS_EXTENSION__</span><span style="color:#D4D4D4;">()  </span><span style="color:#6A9955;">// 用于redux调试</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// store/reducer.js</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> defaultState</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    inputValue:</span><span style="color:#CE9178;"> &#39;&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    list:</span><span style="color:#D4D4D4;"> []</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// reducer 可以接收state，但绝不能修改state，所以要另外拷贝一个</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">defaultState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;change_input_value&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 深拷贝</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> newState</span><span style="color:#D4D4D4;"> = </span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        newState</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">inputValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> newState</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Todolist.js (部分)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> store</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./store&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> TodoList</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleInputChange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleInputChange</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleStoreChange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleStoreChange</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleStoreChange</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// 订阅方法设置更新数据</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">TodoListUI</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        inputValue</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">inputValue</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        list</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">list</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        handleInputChange</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleInputChange</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        handleBtnClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleBtnClick</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        handleItemDelete</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">handleItemDelete</span><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  handleInputChange</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> action</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getInputChangeAction</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  handleStoreChange</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">());</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改变store里的数据</strong></p><p>1、先派发一个action，通过dispatch方法传递给store</p><p>2、store 自动调用 reducer，reducer中接收state和action进行处理，返回一个新的state返回给store，替换原来的store</p><p>3、store中数据改变react感知到store数据的改变，通过store.subscribe()订阅方法设置更新数据</p><p><strong>Redux设计和使用的三项原则</strong></p><p>1.store是唯一的</p><p>2.只有store能改变自己的内容</p><p>3.reducer必须是纯函数</p><p><strong>纯函数</strong>：给定固定的输入，就一定会有固定的输出，而且不会有任何的副作用</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 这样的函数被称为纯函数，因为该函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的参数。</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">funcition</span><span style="color:#DCDCAA;"> sum</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 下面不是，自己更改了入参</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> withdraw</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">account</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">amount</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    account</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">total</span><span style="color:#D4D4D4;"> -= </span><span style="color:#9CDCFE;">amount</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Redux核心API</strong></p><p>1、createStore ——创建store</p><p>2、store.dispatch ——派发action，这个action会传递给store</p><p>3、store.getState ——获取store中所有的数据内容</p><p>4、store.subscribe ——订阅store的改变，只要store发生改变，subscribe中接收的回调函数就会被执行</p><h3 id="_22、redux的中间件" tabindex="-1"><a class="header-anchor" href="#_22、redux的中间件"><span>22、Redux的中间件</span></a></h3><p>对dispatch方法进行升级：</p><p>接收对象，和原来一样，直接传递对象给store</p><p>接收函数，先执行函数，执行完后需要调用store再操作</p><p>如：</p><p>redux-thunk中间件——改造store.dispatch使得后者可以接受函数作为参数</p><p>redux-saga——单独把逻辑拆分出来放到另一个文件中管理</p><p><strong>ps：中间是指action和store的中间，中间件是Redux的中间件，而不是react</strong></p><p><strong>redux-thunk的使用</strong></p><p><strong>redux-saga的使用</strong></p><h3 id="_23、react-redux" tabindex="-1"><a class="header-anchor" href="#_23、react-redux"><span>23、React-Redux</span></a></h3><p><strong>核心API</strong>：</p><p>Provider：作用：连接store，内部组件都有能力获取store的内容</p><p>connect：组件与store作连接</p><p>mapStateToProps：把store中state映射成组件中的props</p><p>mapDispatchToProps：将store.dispatch挂载到props上</p><p><strong>使用</strong></p><h3 id="_24、style-components" tabindex="-1"><a class="header-anchor" href="#_24、style-components"><span>24、style-components</span></a></h3><p>是针对React写的一套css in js框架，简单来讲，就是在js中写css。相对于预处理器（sass，less）的好处是，css in js使用的是js语法，不用重新再学习新技术，也不会多一道编译步骤，加快网页速度。</p>`,174),c=[i];function r(t,D){return a(),n("div",null,c)}const y=s(o,[["render",r],["__file","React小记.html.vue"]]),v=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/React%E5%B0%8F%E8%AE%B0.html","title":"React小记","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"React基本使用","slug":"react基本使用","link":"#react基本使用","children":[{"level":3,"title":"1、JSX","slug":"_1、jsx","link":"#_1、jsx","children":[]},{"level":3,"title":"2、向事件处理程序传递参数","slug":"_2、向事件处理程序传递参数","link":"#_2、向事件处理程序传递参数","children":[]},{"level":3,"title":"3、state","slug":"_3、state","link":"#_3、state","children":[]},{"level":3,"title":"4、阻止默认行为","slug":"_4、阻止默认行为","link":"#_4、阻止默认行为","children":[]},{"level":3,"title":"5、阻止组件渲染","slug":"_5、阻止组件渲染","link":"#_5、阻止组件渲染","children":[]},{"level":3,"title":"6、一个元素的 key","slug":"_6、一个元素的-key","link":"#_6、一个元素的-key","children":[]},{"level":3,"title":"7、setState的过程","slug":"_7、setstate的过程","link":"#_7、setstate的过程","children":[]},{"level":3,"title":"8、PWA","slug":"_8、pwa","link":"#_8、pwa","children":[]},{"level":3,"title":"9、html元素转义","slug":"_9、html元素转义","link":"#_9、html元素转义","children":[]},{"level":3,"title":"10、扩大点击区域","slug":"_10、扩大点击区域","link":"#_10、扩大点击区域","children":[]},{"level":3,"title":"11、react的思考","slug":"_11、react的思考","link":"#_11、react的思考","children":[]},{"level":3,"title":"12、父子组件的通信","slug":"_12、父子组件的通信","link":"#_12、父子组件的通信","children":[]},{"level":3,"title":"13、子组件PropTypes和DefaultProps","slug":"_13、子组件proptypes和defaultprops","link":"#_13、子组件proptypes和defaultprops","children":[]},{"level":3,"title":"14、props，state与render函数","slug":"_14、props-state与render函数","link":"#_14、props-state与render函数","children":[]},{"level":3,"title":"⭐15、虚拟DOM","slug":"_15、虚拟dom","link":"#_15、虚拟dom","children":[]},{"level":3,"title":"16、React中ref的使用（不过尽量少用）","slug":"_16、react中ref的使用-不过尽量少用","link":"#_16、react中ref的使用-不过尽量少用","children":[]},{"level":3,"title":"17、生命周期","slug":"_17、生命周期","link":"#_17、生命周期","children":[]},{"level":3,"title":"18、性能提升","slug":"_18、性能提升","link":"#_18、性能提升","children":[]},{"level":3,"title":"19、React的css过渡动画","slug":"_19、react的css过渡动画","link":"#_19、react的css过渡动画","children":[]},{"level":3,"title":"20、使用react-transition-group实现动画","slug":"_20、使用react-transition-group实现动画","link":"#_20、使用react-transition-group实现动画","children":[]},{"level":3,"title":"⭐21、Redux","slug":"_21、redux","link":"#_21、redux","children":[]},{"level":3,"title":"22、Redux的中间件","slug":"_22、redux的中间件","link":"#_22、redux的中间件","children":[]},{"level":3,"title":"23、React-Redux","slug":"_23、react-redux","link":"#_23、react-redux","children":[]},{"level":3,"title":"24、style-components","slug":"_24、style-components","link":"#_24、style-components","children":[]}]}],"git":{"updatedTime":1724740884000,"contributors":[{"name":"csmSimona","email":"980715844@qq.com","commits":1}]},"filePathRelative":"前端基础汇总/React小记.md","readingTime":{"minutes":15.92,"words":4775}}');export{y as comp,v as data};
