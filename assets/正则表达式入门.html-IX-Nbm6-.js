import{_ as a,c as n,a as l,o as e}from"./app-CGPoDNHi.js";const p="/assets/image1-DMUZwDug.png",o="/assets/image2-D7MoIlby.png",t="/assets/image3-CgoyftDX.png",r="/assets/image4-BDOPtGJa.png",c={};function i(d,s){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="正则表达式入门" tabindex="-1"><a class="header-anchor" href="#正则表达式入门"><span>正则表达式入门</span></a></h1><p>参考来源：<a href="https://juejin.cn/post/6844903487155732494" target="_blank" rel="noopener noreferrer">JS正则表达式完整教程</a></p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>正则表达式其实就是一门工具，是一种<strong>用来描述规则的表达式</strong>，<strong>目的</strong>是为了字符串模式匹配，从而实现搜索和替换功能。</p><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p><p>可以利用工具很好地可视化自己写的正则表达式：</p><p><a href="https://regexper.com/" target="_blank" rel="noopener noreferrer">可视化正则表达式</a></p><p><a href="https://jex.im/regulex/#!flags=&amp;re=" target="_blank" rel="noopener noreferrer">可视化正则</a></p><h4 id="修饰语" tabindex="-1"><a class="header-anchor" href="#修饰语"><span>修饰语</span></a></h4><table><thead><tr><th style="text-align:center;">修饰语</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td style="text-align:center;">忽略大小写</td></tr><tr><td style="text-align:center;">g</td><td style="text-align:center;">全局搜索</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:center;">多行</td></tr></tbody></table><h4 id="相关操作api" tabindex="-1"><a class="header-anchor" href="#相关操作api"><span>相关操作api</span></a></h4><table><thead><tr><th>api</th><th>作用</th></tr></thead><tbody><tr><td>String#search</td><td>查找是否包含，返回找到的位置index</td></tr><tr><td>String#split</td><td>按照某个正则表达式将字符串分隔开</td></tr><tr><td>String#match</td><td>返回你所匹配到的内容</td></tr><tr><td>String#replace</td><td>替换字符串中的匹配内容</td></tr><tr><td>RegExp#test</td><td>测试是否包含，返回一个boolean变量</td></tr><tr><td>RegExp#exec</td><td>实现匹配全局，并返回分组的结果</td></tr></tbody></table><h2 id="匹配字符" tabindex="-1"><a class="header-anchor" href="#匹配字符"><span><strong>匹配字符</strong></span></a></h2><h3 id="精确匹配" tabindex="-1"><a class="header-anchor" href="#精确匹配"><span>精确匹配</span></a></h3><p>精确匹配字面量</p><p><strong>字面量</strong>，匹配一个具体字符，包括不用转义的和需要转义的。比如a匹配字符&quot;a&quot;，又比如\\n匹配换行符，又比如.匹配小数点。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /hello/</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;hello&quot;</span><span style="color:#D4D4D4;">)); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; true</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模糊匹配" tabindex="-1"><a class="header-anchor" href="#模糊匹配"><span>模糊匹配</span></a></h3><h4 id="横向模糊匹配" tabindex="-1"><a class="header-anchor" href="#横向模糊匹配"><span>横向模糊匹配</span></a></h4><ul><li>可匹配的字符串的长度不是固定的</li><li>通过使用量词来实现</li></ul><p>例 <code>{m,n}</code>：连续出现最少m次，最多n次。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /ab</span><span style="color:#D7BA7D;">{2,5}</span><span style="color:#D16969;">c/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;abc abbc abbbc abbbbc abbbbbc abbbbbbc&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">)); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;abbc&quot;, &quot;abbbc&quot;, &quot;abbbbc&quot;, &quot;abbbbbc&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可视化：<a href="https://jex.im/regulex/#!flags=&amp;re=ab%7B2%2C5%7Dc" target="_blank" rel="noopener noreferrer">/ab{2,5}c/g</a></p><p><img src="`+p+`" alt=""></p><h5 id="量词" tabindex="-1"><a class="header-anchor" href="#量词"><span>量词</span></a></h5><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">*</td><td style="text-align:left;">匹配0~n位字符。如 /b*/g，就是可以不出现b，也可以出现一次或多次。</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">匹配1~n位字符。如 /b+/g，就是至少出现一次b。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">？之前字符可选，0或1位。如 /colou?r/g，就是可以匹配color或colour。</td></tr><tr><td style="text-align:left;">{n}</td><td style="text-align:left;">匹配确定的 n 位。例如，&#39;o{2}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。</td></tr><tr><td style="text-align:left;">{n,}</td><td style="text-align:left;">至少匹配 n 位。例如，&#39;o{2,}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;foooood&quot; 中的所有 o。&#39;o{1,}&#39; 等价于 &#39;o+&#39;。&#39;o{0,}&#39; 则等价于 &#39;o*&#39;。</td></tr><tr><td style="text-align:left;">{n,m}</td><td style="text-align:left;">匹配n~m位字符。如 /b{n,m}/g，就是最少出现n次b，最多出现m次b。</td></tr></tbody></table><h4 id="纵向模糊匹配" tabindex="-1"><a class="header-anchor" href="#纵向模糊匹配"><span>纵向模糊匹配</span></a></h4><ul><li>匹配字符串，具体到某一位字符时，可以有多种可能</li><li>使用字符组[]来实现</li></ul><p>例 <code>[abc]</code>：匹配abc中的一个</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /1</span><span style="color:#CE9178;">[</span><span style="color:#D16969;">abc</span><span style="color:#CE9178;">]</span><span style="color:#D16969;">2/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;1a2 1b2 1c2 1d2 1e2&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;1a2&quot;, &quot;1b2&quot;, &quot;1c2&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可视化：<a href="https://regexper.com/#%2F1%5Babc%5D2%2Fg" target="_blank" rel="noopener noreferrer">/1[abc]2/g</a></p><p><img src="`+o+`" alt=""></p><h5 id="字符组" tabindex="-1"><a class="header-anchor" href="#字符组"><span>字符组</span></a></h5><p>1、排除字符组</p><p>字符组的第一位放<code>^</code>（脱字符），表示求反的概念。</p><p>例如<code>[^abc]</code>，表示是一个除&quot;a&quot;、&quot;b&quot;、&quot;c&quot;之外的任意一个字符。</p><p>2、范围表示法</p><p>用连字符<code>-</code>来省略和简写。</p><p>比如<code>[123456abcdefGHIJKLM]</code>，可以写成<code>[1-6a-fG-M]</code>。</p><p>3、常见简写</p><table><thead><tr><th style="text-align:center;">简写</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">word的简写。匹配字母、数字、下划线。</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">匹配非字母、数字、下划线。</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">space的简写。匹配任意的空白符，包括空格、制表符、换行符、回车符、换页符。</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">匹配非空白符。</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">digit的简写。匹配数字。</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">匹配非数字。</td></tr><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配任意除了换行符（回车键）之外的单个字符。</td></tr></tbody></table><p>**匹配任意字符：**可以使用[\\d\\D]、[\\w\\W]、[\\s\\S]和[^]中任何的一个。</p><h3 id="贪婪匹配-和-惰性匹配" tabindex="-1"><a class="header-anchor" href="#贪婪匹配-和-惰性匹配"><span>贪婪匹配 和 惰性匹配</span></a></h3><h4 id="量词的匹配" tabindex="-1"><a class="header-anchor" href="#量词的匹配"><span>量词的匹配</span></a></h4><p><strong>{m,n}默认是贪婪匹配，它会尽可能多的匹配</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /\\d</span><span style="color:#D7BA7D;">{2,5}</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;123 1234 12345 123456&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正则<code>/\\d{2,5}/</code>，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p><p><strong>惰性匹配，就是尽可能少的匹配。通过在量词后面加个问号就能实现惰性匹配。</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /\\d</span><span style="color:#D7BA7D;">{2,5}?</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;123 1234 12345 123456&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>/\\d{2,5}?/</code>表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p><h4 id="分支结构的匹配" tabindex="-1"><a class="header-anchor" href="#分支结构的匹配"><span>分支结构的匹配</span></a></h4><h5 id="多选分支" tabindex="-1"><a class="header-anchor" href="#多选分支"><span>多选分支</span></a></h5><p>多选分支可以支持多个子模式任选其一。</p><p>具体形式如下：<code>(p1|p2|p3)</code>，其中<code>p1</code>、<code>p2</code>和<code>p3</code>是子模式，用<code>|</code>（管道符）分隔，表示其中任何之一。</p><p>例如要匹配&quot;good&quot;和&quot;nice&quot;可以使用<code>/good|nice/</code>。测试如下：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /good</span><span style="color:#DCDCAA;">|</span><span style="color:#D16969;">nice/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;good idea, nice try.&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分支结构属于惰性匹配。 如果前面的匹配上了，后面就不再尝试了</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /good</span><span style="color:#DCDCAA;">|</span><span style="color:#D16969;">goodbye/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;goodbye goodnight&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;good&quot;, &quot;good&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /goodbye</span><span style="color:#DCDCAA;">|</span><span style="color:#D16969;">good/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;goodbye goodnight&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;goodbye&quot;, &quot;good&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><h4 id="匹配16进制颜色值" tabindex="-1"><a class="header-anchor" href="#匹配16进制颜色值"><span>匹配16进制颜色值</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /#</span><span style="color:#CE9178;">([</span><span style="color:#D16969;">0-9a-fA-F</span><span style="color:#CE9178;">]</span><span style="color:#D7BA7D;">{6}</span><span style="color:#DCDCAA;">|</span><span style="color:#CE9178;">[</span><span style="color:#D16969;">0-9a-fA-F</span><span style="color:#CE9178;">]</span><span style="color:#D7BA7D;">{3}</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;#ffbbad #Fc01DF #FFF #ffE&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;#ffbbad&quot;, &quot;#Fc01DF&quot;, &quot;#FFF&quot;, &quot;#ffE&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匹配位置" tabindex="-1"><a class="header-anchor" href="#匹配位置"><span><strong>匹配位置</strong></span></a></h2><h3 id="锚点" tabindex="-1"><a class="header-anchor" href="#锚点"><span>锚点</span></a></h3><p>匹配一个位置，而不是字符。</p><table><thead><tr><th style="text-align:center;">锚点</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">^</td><td style="text-align:center;">匹配开头，在多行匹配中匹配行开头。</td></tr><tr><td style="text-align:center;">$</td><td style="text-align:center;">匹配结尾，在多行匹配中匹配行结尾。</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">匹配单词的开始和结束也包括<code>\\w</code>和<code>^</code>之间的位置，也包括<code>\\w</code>和<code>$</code>之间的位置。</td></tr><tr><td style="text-align:center;">\\B</td><td style="text-align:center;">非单词边界</td></tr><tr><td style="text-align:center;">(?=pattern)</td><td style="text-align:center;">正向先行断言，匹配pattern前面的位置</td></tr><tr><td style="text-align:center;">(?!pattern)</td><td style="text-align:center;">反向先行断言，匹配不是pattern前面的位置</td></tr><tr><td style="text-align:center;">(?&lt;=pattern)</td><td style="text-align:center;">正向后行断言，匹配pattern后面的位置</td></tr><tr><td style="text-align:center;">(?&lt;!pattern)</td><td style="text-align:center;">反向后行断言，匹配不是pattern后面的位置</td></tr></tbody></table><h3 id="开始-结束" tabindex="-1"><a class="header-anchor" href="#开始-结束"><span>开始 ^ 结束 $</span></a></h3><p>例：将字符串的开头和结尾用&quot;#&quot;替换（位置也可以替换成字符）</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;hello&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">^|$</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;#hello#&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行匹配模式时，二者是行的概念，这个需要我们的注意：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;How</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">are</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">you&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">^|$</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">gm</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">/*</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">#How#</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">#are#</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">#you#</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">*/</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单词边界-b-b" tabindex="-1"><a class="header-anchor" href="#单词边界-b-b"><span>单词边界 \\b \\B</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;Hey!Good morning&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">\\b</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;#Hey#!#Good# #morning#&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;Hey!Good morning&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">\\B</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;H#e#y!G#o#o#d m#o#r#n#i#n#g&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正向先行断言-pattern" tabindex="-1"><a class="header-anchor" href="#正向先行断言-pattern"><span>正向先行断言 (?=pattern)</span></a></h3><p>匹配pattern前面的位置</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;goodbye&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#CE9178;">(?=</span><span style="color:#D16969;">good</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;#goodbye&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反向先行断言-pattern" tabindex="-1"><a class="header-anchor" href="#反向先行断言-pattern"><span>反向先行断言 (?!pattern)</span></a></h3><p>匹配不是pattern前面的位置，与上述匹配相反的位置</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;goodbye&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#CE9178;">(?!</span><span style="color:#D16969;">good</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;g#o#o#d#b#y#e#&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正向后行断言-pattern" tabindex="-1"><a class="header-anchor" href="#正向后行断言-pattern"><span>正向后行断言 (?&lt;=pattern)</span></a></h3><p>匹配pattern后面的位置</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;goodbye&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#CE9178;">(?&lt;=</span><span style="color:#D16969;">good</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;good#bye&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反向后行断言-pattern" tabindex="-1"><a class="header-anchor" href="#反向后行断言-pattern"><span>反向后行断言 (?&lt;!pattern)</span></a></h3><p>匹配不是pattern后面的位置，与上述匹配相反的位置</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;goodbye&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#CE9178;">(?&lt;!</span><span style="color:#D16969;">good</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;#&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;#g#o#o#db#y#e#&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><h4 id="不匹配任何东西的正则" tabindex="-1"><a class="header-anchor" href="#不匹配任何东西的正则"><span>不匹配任何东西的正则</span></a></h4><p><code>/.^/</code> 匹配开头前面的任意字符</p><h4 id="金额的千位分隔符表示法" tabindex="-1"><a class="header-anchor" href="#金额的千位分隔符表示法"><span>金额的千位分隔符表示法</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;12345678.12 123456789.12&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">reg</span><span style="color:#D4D4D4;"> = </span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">\\B</span><span style="color:#CE9178;">(?=(</span><span style="color:#D16969;">\\d</span><span style="color:#D7BA7D;">{3}</span><span style="color:#CE9178;">)</span><span style="color:#D7BA7D;">+</span><span style="color:#DCDCAA;">\\b</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reg</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;,&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;12,345,678.12 123,456,789.12&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可视化：[/\\B(?=(\\d{3})+\\b)/g](https://jex.im/regulex/#!flags=&amp;re=%5CB(%3F%3D(%5Cd%7B3%7D)%2B%5Cb)</p><p><img src="`+t+`" alt=""></p><h2 id="分组-括号的使用" tabindex="-1"><a class="header-anchor" href="#分组-括号的使用"><span>分组（括号的使用）</span></a></h2><p>我们知道<code>/a+/</code>匹配连续出现的“a”，而要匹配连续出现的“ab”时，需要使用<code>/(ab)+/</code>。</p><p>其中括号是提供分组功能，使量词<code>+</code>作用于“ab”这个整体，测试如下：</p><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /</span><span style="color:#CE9178;">(</span><span style="color:#D16969;">ab</span><span style="color:#CE9178;">)</span><span style="color:#D7BA7D;">+</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;ababa abbb ababab&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引用分组" tabindex="-1"><a class="header-anchor" href="#引用分组"><span>引用分组</span></a></h3><p>一个括号表示一个分组，通过<code>$1</code>、<code>$2</code>引用分组</p><p>比如，想把yyyy-mm-dd格式，替换成mm/dd/yyyy怎么做？</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /</span><span style="color:#CE9178;">(</span><span style="color:#D16969;">\\d</span><span style="color:#D7BA7D;">{4}</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">-</span><span style="color:#CE9178;">(</span><span style="color:#D16969;">\\d</span><span style="color:#D7BA7D;">{2}</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">-</span><span style="color:#CE9178;">(</span><span style="color:#D16969;">\\d</span><span style="color:#D7BA7D;">{2}</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;2021-08-19&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;$2/$3/$1&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;06/12/2017&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>replace</code>中的，第二个参数里用<code>$1</code>、<code>$2</code>、<code>$3</code>指代相应的分组。</p><h3 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用"><span>反向引用</span></a></h3><p>除了使用相应API来引用分组，也可以在<strong>正则本身里引用分组</strong>。但只能引用之前出现的分组，即反向引用。</p><p>通过<code>\\1</code>、<code>\\2</code>进行引用 <code>\\0</code>则表示整个表达式</p><p>例：匹配成对标签</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /&lt;</span><span style="color:#CE9178;">([^</span><span style="color:#D16969;">&gt;</span><span style="color:#CE9178;">]</span><span style="color:#D7BA7D;">+</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">&gt;</span><span style="color:#CE9178;">[</span><span style="color:#D16969;">\\d\\D</span><span style="color:#CE9178;">]</span><span style="color:#D7BA7D;">*</span><span style="color:#D16969;">&lt;</span><span style="color:#D7BA7D;">\\/</span><span style="color:#569CD6;">\\1</span><span style="color:#D16969;">&gt;/</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string1</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&lt;title&gt;regular expression&lt;/title&gt;&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string2</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&lt;p&gt;laoyao bye bye&lt;/p&gt;&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string3</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&lt;title&gt;wrong!&lt;/p&gt;&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">string1</span><span style="color:#D4D4D4;">) ); </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">string2</span><span style="color:#D4D4D4;">) ); </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">( </span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">string3</span><span style="color:#D4D4D4;">) ); </span><span style="color:#6A9955;">// false</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非捕获分组" tabindex="-1"><a class="header-anchor" href="#非捕获分组"><span>非捕获分组</span></a></h3><p><code> (?:pattern)</code> 非捕获分组匹配的值不会保存起来。 只保留括号最原始的功能，不会引用它。</p><p>即，既不在API里引用，也不在正则里反向引用。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> regex</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /</span><span style="color:#CE9178;">(?:</span><span style="color:#D16969;">ab</span><span style="color:#CE9178;">)</span><span style="color:#D7BA7D;">+</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;ababa abbb ababab&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">regex</span><span style="color:#D4D4D4;">)); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h3><h4 id="将每个单词的首字母转换为大写" tabindex="-1"><a class="header-anchor" href="#将每个单词的首字母转换为大写"><span>将每个单词的首字母转换为大写</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> titleize</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">	return</span><span style="color:#9CDCFE;"> str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toLowerCase</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#CE9178;">(?:</span><span style="color:#DCDCAA;">^|</span><span style="color:#D16969;">\\s</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">\\w/</span><span style="color:#569CD6;">g</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">		return</span><span style="color:#9CDCFE;"> c</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toUpperCase</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	});</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">titleize</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my name is ccc&#39;</span><span style="color:#D4D4D4;">) ); </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// =&gt; &quot;My Name Is Ccc&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="操作符优先级" tabindex="-1"><a class="header-anchor" href="#操作符优先级"><span>操作符优先级</span></a></h3><p>操作符的优先级从上至下，由高到低：</p><p>1.转义符 \\</p><p>2.括号和方括号 (...)、(?:...)、(?=...)、(?!...)、(?&lt;=...)、(?&lt;!...)、[...]</p><p>3.量词限定符 {m}、{m,n}、{m,}、?、*、+</p><p>4.位置和序列 ^ 、$、 \\元字符、 一般字符</p><p>5.管道符（竖杠）|</p><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例</span></a></h3><h4 id="匹配-ipv4" tabindex="-1"><a class="header-anchor" href="#匹配-ipv4"><span>匹配 ipv4</span></a></h4><p><code>/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])$/</code></p><p>结构：<code>((...)\\.){3}(...)</code></p><p>它是一个多选结构，分成5个部分：</p><ul><li><code>0{0,2}\\d</code>，匹配一位数，包括0补齐的。比如，9、09、009；</li><li><code>0?\\d{2}</code>，匹配两位数，包括0补齐的，也包括一位数；</li><li><code>1\\d{2}</code>，匹配100到199;</li><li><code>2[0-4]\\d</code>，匹配200-249；</li><li><code>25[0-5]</code>，匹配250-255。</li></ul><p><img src="`+r+'" alt=""></p><h2 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h2><p>《JavaScript权威指南》 第10章</p><p>《高性能JavaScript》 第5章</p><p>《JavaScript高级程序设计》 第5.4节</p>',133)]))}const y=a(c,[["render",i],["__file","正则表达式入门.html.vue"]]),u=JSON.parse('{"path":"/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8.html","title":"正则表达式入门","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"匹配字符","slug":"匹配字符","link":"#匹配字符","children":[{"level":3,"title":"精确匹配","slug":"精确匹配","link":"#精确匹配","children":[]},{"level":3,"title":"模糊匹配","slug":"模糊匹配","link":"#模糊匹配","children":[]},{"level":3,"title":"贪婪匹配 和 惰性匹配","slug":"贪婪匹配-和-惰性匹配","link":"#贪婪匹配-和-惰性匹配","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"匹配位置","slug":"匹配位置","link":"#匹配位置","children":[{"level":3,"title":"锚点","slug":"锚点","link":"#锚点","children":[]},{"level":3,"title":"开始 ^ 结束 $","slug":"开始-结束","link":"#开始-结束","children":[]},{"level":3,"title":"单词边界 \\\\b \\\\B","slug":"单词边界-b-b","link":"#单词边界-b-b","children":[]},{"level":3,"title":"正向先行断言 (?=pattern)","slug":"正向先行断言-pattern","link":"#正向先行断言-pattern","children":[]},{"level":3,"title":"反向先行断言 (?!pattern)","slug":"反向先行断言-pattern","link":"#反向先行断言-pattern","children":[]},{"level":3,"title":"正向后行断言 (?<=pattern)","slug":"正向后行断言-pattern","link":"#正向后行断言-pattern","children":[]},{"level":3,"title":"反向后行断言 (?<!pattern)","slug":"反向后行断言-pattern","link":"#反向后行断言-pattern","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"分组（括号的使用）","slug":"分组-括号的使用","link":"#分组-括号的使用","children":[{"level":3,"title":"引用分组","slug":"引用分组","link":"#引用分组","children":[]},{"level":3,"title":"反向引用","slug":"反向引用","link":"#反向引用","children":[]},{"level":3,"title":"非捕获分组","slug":"非捕获分组","link":"#非捕获分组","children":[]},{"level":3,"title":"示例","slug":"示例-2","link":"#示例-2","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"操作符优先级","slug":"操作符优先级","link":"#操作符优先级","children":[]},{"level":3,"title":"示例","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"拓展阅读","slug":"拓展阅读","link":"#拓展阅读","children":[]}],"git":{"updatedTime":1724988120000,"contributors":[{"name":"csmSimona","email":"980715844@qq.com","commits":1}]},"filePathRelative":"其他/正则表达式入门.md","readingTime":{"minutes":7.91,"words":2373}}');export{y as comp,u as data};
