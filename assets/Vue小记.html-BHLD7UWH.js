import{_ as n,c as a,a as l,o as e}from"./app-Z-8hw_Xm.js";const p="/assets/5-DRvlpguP.png",o="/assets/3-BUUCmoeQ.png",c="/assets/MVC%E5%92%8CMVVM-CAvdFQIt.png",t="/assets/vue23diff%E5%AF%B9%E6%AF%94-ReH9pulb.jpg",i={};function r(D,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue小记" tabindex="-1"><a class="header-anchor" href="#vue小记"><span>Vue小记</span></a></h1><h2 id="一、vue2使用" tabindex="-1"><a class="header-anchor" href="#一、vue2使用"><span>一、Vue2使用</span></a></h2><h3 id="_1、vue基本使用" tabindex="-1"><a class="header-anchor" href="#_1、vue基本使用"><span>1、Vue基本使用</span></a></h3><h4 id="vue的生命周期" tabindex="-1"><a class="header-anchor" href="#vue的生命周期"><span>Vue的生命周期</span></a></h4><p>生命周期函数就是vue实例在某一个时间点会自动执行的函数。</p><ul><li><p><code>beforeCreate</code></p></li><li><p><code>created</code>：在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。</p></li><li><p><code>beforeMount</code></p></li><li><p><code>mounted</code>：在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</p></li><li><p><code>beforeUpdate</code></p></li><li><p><code>updated</code></p></li><li><p><code>beforeDestory</code></p></li><li><p><code>destoryed</code></p></li></ul><h5 id="ajax请求应该放在哪个生命周期" tabindex="-1"><a class="header-anchor" href="#ajax请求应该放在哪个生命周期"><span>ajax请求应该放在哪个生命周期</span></a></h5><ul><li>mounted</li><li>JS是单线程的，ajax异步获取数据</li><li>放在mounted之前没有用，只会让逻辑更加混乱（event loop 因为生命周期是同步的，ajax是异步的，异步事件是在所有同步执行完成之后执行，放在created，会让人觉得ajax执行在mounted前，即mounted前就已经获得了ajax数据，其实ajax数据是在vue初始化完成后才获取的）</li></ul><h5 id="何时需要使用beforedestory" tabindex="-1"><a class="header-anchor" href="#何时需要使用beforedestory"><span>何时需要使用beforeDestory</span></a></h5><ul><li>解绑自定义事件<code>event.$off</code></li><li>清除定时器</li><li>解绑自定义的DOM事件，如<code>addEventListener</code>、<code>window</code>、<code>scroll</code>等</li></ul><h4 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h4><h5 id="插值" tabindex="-1"><a class="header-anchor" href="#插值"><span>插值</span></a></h5><p>区别：v-text不会转译，v-html会转译</p><p>v-html：会有XSS风险，会覆盖子组件（可以使用<code>&lt;pre&gt;</code>标签）</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    	&lt;!-- 插值表达式 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{name}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;">          &lt;!--  &lt;h1&gt;hello&lt;/h1&gt; --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		&lt;!-- v-text 与 {{}} 作用相同 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-text</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;">    &lt;!--  &lt;h1&gt;hello&lt;/h1&gt; --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-html</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#6A9955;">    &lt;!--  hello --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript <strong>表达式</strong>支持。注意：每个绑定都只能包含<strong>单个表达式</strong>。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">{{ number + 1 }}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">{{ ok ? &#39;YES&#39; : &#39;NO&#39; }}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">{{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 这是语句，不是表达式</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">{{ var a = 1 }}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="事件绑定-v-on" tabindex="-1"><a class="header-anchor" href="#事件绑定-v-on"><span>事件绑定：v-on</span></a></h5><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">       &lt;!--  事件绑定 v-on: 简写为 @ --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-on:click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleClick&quot;</span><span style="color:#808080;">&gt;&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{content}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;">&quot;#root&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				content:</span><span style="color:#CE9178;">&quot;hello&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;world&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="属性绑定-v-bind" tabindex="-1"><a class="header-anchor" href="#属性绑定-v-bind"><span>属性绑定：v-bind</span></a></h5><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	    &lt;!-- 属性绑定 v-bind: 简写为 : --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> :title</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;title&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">hello world</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;">&quot;#root&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				title:</span><span style="color:#CE9178;">&quot;this is hello world&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="双向数据绑定-v-model" tabindex="-1"><a class="header-anchor" href="#双向数据绑定-v-model"><span>双向数据绑定：v-model</span></a></h5><p>其实，<code>v-model</code> 就是 <code>v-bind</code> 和 <code>v-on</code> 的语法糖。</p><p><strong><code>v-model=&quot;message&quot;</code> 相当于 <code>v-bind:value=&quot;message&quot; v-on:input=&quot;message = $event.target.value&quot;</code></strong></p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		&lt;!-- 双向数据绑定 v-model --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;content&quot;</span><span style="color:#808080;">/&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{content}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;">&quot;#root&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				content:</span><span style="color:#CE9178;">&quot;this is content&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="v-if、v-else指令" tabindex="-1"><a class="header-anchor" href="#v-if、v-else指令"><span>v-if、v-else指令</span></a></h5><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		&lt;!-- v-if 条件渲染指令，存在与否，它根据表达式的真假来删除和插入元素  </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                  当show=false时，直接从dom中移除 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;show&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">hello world</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- v-if的值为false时显示v-else内容，v-if 与 v-else必须紧贴</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                另外 还有 v-else-if  --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-else</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">bye world</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleClick&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">toggle</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#root&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				show:</span><span style="color:#569CD6;"> true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">show</span><span style="color:#D4D4D4;"> = !</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">show</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="v-show指令" tabindex="-1"><a class="header-anchor" href="#v-show指令"><span>v-show指令</span></a></h5><p>v-if 和 v-show的区别：</p><ul><li><p>v-show通过css display控制显示和隐藏</p></li><li><p>v-if 组件真正的渲染和销毁DOM，而不是显示和隐藏</p></li><li><p>频繁切换显示状态用v-show，否则用v-if</p></li></ul><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- v-show 条件渲染指令，显示与否</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                    当show=false时，div中的display属性变为none，不会dom中移除。</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                    推荐使用v-show --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-show</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;show&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">hello world</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleClick&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">toggle</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#root&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				show:</span><span style="color:#569CD6;"> true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">show</span><span style="color:#D4D4D4;"> = !</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">show</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="v-for指令" tabindex="-1"><a class="header-anchor" href="#v-for指令"><span>v-for指令</span></a></h5><p><strong>v-for中的key的用处</strong></p><ul><li><p><strong>提高性能</strong>：当 Vue 更新视图时，它会根据 <code>key</code> 来识别哪些元素被修改、添加或移除。如果没有 <code>key</code>，Vue 会依赖其默认的算法（基于元素的位置）来比较元素，这样可能导致不必要的 DOM 操作。使用 <code>key</code> 后，Vue 能精确地找到每个项，从而减少不必要的 DOM 重排和重绘，提升性能。</p></li><li><p><strong>保持组件状态</strong>：如果渲染的是一个组件（而不是普通的 DOM 元素），使用 <code>key</code> 可以确保组件在渲染更新时保持正确的状态。例如，如果列表中有表单输入框，每个输入框都有自己的状态，使用 <code>key</code> 可以确保输入框状态不会因列表排序或元素移除而丢失。</p></li><li><p><strong>避免渲染错误</strong>：key 的存在可以帮助 Vue 确保在列表更新时，元素的顺序和内容保持稳定，避免出现不稳定的渲染或顺序错乱。</p></li></ul><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- v-for 循环显示  :key 提升每一项渲染效率，不能相同</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                   一般与后端数据库相连时该项为数据id --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">			&lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> v-for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;(item,index) of list&quot;</span><span style="color:#9CDCFE;"> :key</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;index&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{item}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#root&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				list:</span><span style="color:#D4D4D4;"> [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="计算属性-computed-、监听器-watch-与方法-methods" tabindex="-1"><a class="header-anchor" href="#计算属性-computed-、监听器-watch-与方法-methods"><span>计算属性（computed）、监听器（watch）与方法（methods）</span></a></h4><ul><li><p><strong>计算属性（computed）</strong></p><p>对于任何复杂逻辑，你都应当使用计算属性。</p><p>有缓存，data不变不会重新计算；提高性能</p><ul><li><p>计算属性缓存 vs 方法</p><p>我们可以通过在表达式中调用方法来达到同样的效果：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 在组件中</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">methods</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">  reversedMessage</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">reverse</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">join</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">computed</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">  now</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> Date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">now</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比之下，每当触发重新渲染时，<strong>调用方法将总会再次执行函数</strong>。</p></li><li><p>计算属性vs侦听属性</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  el:</span><span style="color:#CE9178;"> &#39;#demo&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    firstName:</span><span style="color:#CE9178;"> &#39;Foo&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    lastName:</span><span style="color:#CE9178;"> &#39;Bar&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    fullName:</span><span style="color:#CE9178;"> &#39;Foo Bar&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  watch:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    firstName</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fullName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lastName</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    lastName</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fullName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">firstName</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">val</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>侦听属性有缓存，但是代码是命令式且重复的。</p><p>将它与计算属性的版本进行比较：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  el:</span><span style="color:#CE9178;"> &#39;#demo&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    firstName:</span><span style="color:#CE9178;"> &#39;Foo&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    lastName:</span><span style="color:#CE9178;"> &#39;Bar&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  computed:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    fullName</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">firstName</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lastName</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>计算属性的setter</p><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// ...</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">computed</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">  fullName</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // getter</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    get</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">firstName</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lastName</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // setter</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    set</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      var</span><span style="color:#9CDCFE;"> names</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">firstName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">names</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lastName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">names</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">names</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// ...</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p></li></ul></li><li><p>监听器（watch）</p><p><strong>当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</strong></p><p><strong>当值第一次绑定时，不会执行监听函数，只有值发生改变时才会执行。如果我们需要在最初绑定值的时候也执行函数，则就需要用到immediate属性。</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">watch</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 普通监听</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    name</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">oldVal</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">oldVal</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    firstName</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        handler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newName</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldName</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fullName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">newName</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lastName</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 代表在watch里声明了firstName这个方法之后立即先去执行handler方法</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">        immediate</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,  	</span><span style="color:#6A9955;">// 是否最初绑定的时候就执行</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">        deep</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#6A9955;"> 			// 是否深度监听</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>deep</code>的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改<code>obj</code>里面任何一个属性都会触发这个监听器里的 handler。</p><p>优化，我们可以使用字符串形式监听。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">watch</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">  &#39;obj.a&#39;</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    handler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newName</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldName</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;obj.a changed&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    immediate:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // deep: true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：watch监听引用类型，拿不到oldVal</p></li></ul><p><strong>methods,watch,computed的区别</strong></p><ol><li>computed 属性的结果<strong>会被缓存</strong>，除非依赖的响应式属性<strong>变化才会重新计算</strong>。主要当作属性来使用</li><li>methods 方法表示一个具体的操作，主要书写业务逻辑</li><li>watch 一个对象，键是需要观察的表达式，值是对应回调函数。主要<strong>用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作</strong>；可以看作是 computed 和 methods 的结合体；<strong>(与computed的区别是，watch更加适用于监听某一个值的变化并做对应的操作，比如请求后台接口等，而computed适用于计算已有的值并返回结果)</strong></li></ol><h4 id="class与style绑定" tabindex="-1"><a class="header-anchor" href="#class与style绑定"><span>class与style绑定</span></a></h4><ul><li>使用动态属性</li><li>使用驼峰式写法</li></ul><p>下面通过一个点击改变颜色例子来说明样式绑定。</p><ul><li><p>class的对象绑定</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;!</span><span style="color:#569CD6;">DOCTYPE</span><span style="color:#9CDCFE;"> html</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">html</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;en&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">meta</span><span style="color:#9CDCFE;"> charset</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;UTF-8&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">class的对象绑定</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;./vue.js&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">style</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">        .activited</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        	color</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">red</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">style</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- 方法一：class的对象绑定 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleDivClick&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		     :class</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;{activited:isActivited}&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		     Hello world</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#app&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				isActivited:</span><span style="color:#569CD6;"> false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleDivClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">isActivited</span><span style="color:#D4D4D4;"> = ! </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">isActivited</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">html</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>class的数组绑定</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;!</span><span style="color:#569CD6;">DOCTYPE</span><span style="color:#9CDCFE;"> html</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">html</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;en&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">meta</span><span style="color:#9CDCFE;"> charset</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;UTF-8&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">class的数组绑定</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;./vue.js&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">style</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D7BA7D;">        .activited</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        	color</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">red</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">style</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- 方法二：class的数组绑定 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleDivClick1&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		     :class</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;[activited]&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		     Hello world!</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#app&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				activited:</span><span style="color:#CE9178;">&quot;&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleDivClick1</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">activited</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">activited</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;activited&quot;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;activited&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">html</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>style的对象绑定</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- 方法三：style的对象绑定 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleDivClick2&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		     :style</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;styleObj&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		     Hello world!!</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#app&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				styleObj:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					color:</span><span style="color:#CE9178;"> &quot;&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleDivClick2</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">styleObj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">styleObj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&quot;red&quot;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>style的数组绑定</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	&lt;!-- 方法四：style的数组绑定（与方法三相似） --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleDivClick3&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		     :style</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">[styleObj]</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		     Hello world!!!</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#app&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				styleObj:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					color:</span><span style="color:#CE9178;"> &quot;&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleDivClick3</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">styleObj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">styleObj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&quot;red&quot;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染"><span>条件渲染</span></a></h4><p><code>v-if</code>，<code>v-else</code>，<code>v-show</code>基础知识详见上文指令部分。</p><p><strong>v-if和v-show的区别</strong></p><p>v-show仅仅控制元素的显示方式，将display属性在block和none来回切换；</p><p>而v-if会控制这个dom节点的存在与否。</p><p>当我们需要经常切换某个元素的显示/隐藏时，使用v-show会更加节省性能上的开销；</p><p>当只需要一次显示或隐藏时，使用v-if更合理。</p><ul><li><p>在<code>&lt;template&gt;</code>元素上使用<code>v-if</code>条件渲染分组</p><p>当我们需要切换多个元素时，可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。</p><p>最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#9CDCFE;"> v-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ok&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Title</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Paragraph 1</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Paragraph 2</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>v-else-if</code></p><p>充当 <code>v-if</code> 的“else-if 块”，可以连续使用：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;type === &#39;A&#39;&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  A</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-else-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;type === &#39;B&#39;&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  B</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-else-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;type === &#39;C&#39;&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  C</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-else</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  Not A/B/C</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于 <code>v-else</code>，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p></li><li><p>用<code>key</code>管理可复用的元素</p><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。</p><p>但有时我们并不需要这样的功能，如当我们在使用账号登录时，可以选择用户名登录和邮箱登录，而这两者的信息可能是不一样的，这时我们可以增加key使切换时输入的内容清空。如下面的例子：</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 通过增加key能使v-if 与 v-else 切换时的内容清空 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;show&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			用户名：</span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;username&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-else</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			邮箱名：</span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;email&quot;</span><span style="color:#808080;">/&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;toggle&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">切换</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#app&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				show:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				toggle</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">show</span><span style="color:#D4D4D4;"> = !</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">show</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染"><span>列表渲染</span></a></h4><ul><li>用<code>v-for</code>把一个数组对应为一组元素</li></ul><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	&lt;!-- v-for 循环显示  :key 提升每一项渲染效率，不能相同 一般与后端数据库相连时该项为数据id --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	&lt;!-- 可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;(item, index) in list&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		     :key</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;item.id&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            {{index}}----{{item.text}}----{{item.id}}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#app&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				list:</span><span style="color:#D4D4D4;"> [{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					id:</span><span style="color:#CE9178;">&quot;010120201&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					text:</span><span style="color:#CE9178;">&quot;hello&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				},{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					id:</span><span style="color:#CE9178;">&quot;010120202&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					text:</span><span style="color:#CE9178;">&quot;hello&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				},{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					id:</span><span style="color:#CE9178;">&quot;010120203&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					text:</span><span style="color:#CE9178;">&quot;hello&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<img src="`+p+`" alt="5"></p><ul><li>一个对象的<code>v-for</code></li></ul><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;(value, key, index) in object&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">          {{ index }}. {{ key }}: {{ value }}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &quot;#app&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				object:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					firstName:</span><span style="color:#CE9178;"> &#39;John&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					lastName:</span><span style="color:#CE9178;"> &#39;Doe&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					age:</span><span style="color:#B5CEA8;"> 30</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<img src="`+o+`" alt="3"></p><ul><li><p><strong>v-for 和 v-if 不能一起使用</strong></p><p>v-for比v-if的优先级更高，这就说明在v-for的每次循环运行中每一次都会调用v-if的判断，所以不推荐v-if和v-for在同一个标签内同时使用。</p><p>解决方法：过滤一个列表中的项目 (比如 v-for=“user in users” v-if=“user.isActive”)。在这种情形下，请将 users替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表</p></li><li><p>当我们要在此基础上再加一个数据，在控制台中我们要重新定义该对象才能使页面改变。</p></li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">object</span><span style="color:#D4D4D4;">={</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				firstName:</span><span style="color:#CE9178;"> &#39;John&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				lastName:</span><span style="color:#CE9178;"> &#39;Doe&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				age:</span><span style="color:#B5CEA8;"> 30</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				address:</span><span style="color:#CE9178;"> &#39;hangzhou&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，我们还可以通过set方法向对象注入数据，同时页面更新。</p><p>方法一：<code>Vue.set(vm.object,&quot;address&quot;,&quot;hangzhou&quot;)</code></p><p>方法二：<code>vm.$set(vm.object,&quot;address&quot;,&quot;hangzhou&quot;)</code></p><ul><li><p>注意事项</p><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><p>​ 1.当你利用索引直接设置一个项时，例如：<code>vm.items[indexOfItem] = newValue</code></p><p>​ 2.当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></p><ul><li><p>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将触发状态更新：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// Vue.set</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">items</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">indexOfItem</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Array.prototype.splice</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">items</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">splice</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">indexOfItem</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>vm.$set</code> 实例方法，该方法是全局方法 Vue.set 的一个别名：</p><p><code>vm.$set(vm.items, indexOfItem, newValue)</code></p></li><li><p>为了解决第二类问题，你可以使用 splice：</p><p><code>vm.items.splice(newLength)</code></p></li></ul></li></ul><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h4><ul><li><p>event参数，自定义参数</p><p>1.event是原生的event对象，没有经过任何的装饰</p><p>2.事件被挂载到当前元素</p></li><li><p>事件修饰符</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">a</span><span style="color:#9CDCFE;"> v-on</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">stop</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">doThis</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">a</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 提交事件不再重载页面 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">form</span><span style="color:#9CDCFE;"> v-on</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">submit</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prevent</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">onSubmit</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">form</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 修饰符可以串联 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">a</span><span style="color:#9CDCFE;"> v-on</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">stop</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prevent</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">doThat</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">a</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 只有修饰符 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">form</span><span style="color:#9CDCFE;"> v-on</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">submit</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prevent</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">form</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 事件捕获：事件从最不精确的对象(document对象)开始触发，然后到最精确 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-on</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">capture</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">doThis</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-on</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">doThat</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>按键修饰符</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">button</span><span style="color:#D4D4D4;"> @</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">ctrl</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">onClick</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">A</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">button</span><span style="color:#D4D4D4;"> @</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">ctrl</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">exact</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">onCtrlClick</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">A</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">button</span><span style="color:#D4D4D4;"> @</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">exact</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">onCtrlClick</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">A</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="表单" tabindex="-1"><a class="header-anchor" href="#表单"><span>表单</span></a></h4><ul><li><p>v-model</p><p><code>&lt;textarea v-model=&quot;desc&quot;&gt;&lt;/textarea&gt;</code></p><p>注意：<code>&lt;textarea&gt;{{desc}}&lt;/textarea&gt;</code>是不允许的</p></li><li><p>常见的表单项 textarea checkbox radio select</p></li><li><p>修饰符 lazy number trim （v-model.lazy、v-model.number、v-model.trim）</p><ul><li>在输入框中，v-model 默认是同步数据，使用 <strong>.lazy</strong> 会转变为在 change 事件中同步 ， 也就是在<strong>失去焦点 或者 按下回车键时才更新</strong></li><li><strong>.number 修饰符可以将 输入的值转化为Number类型</strong> ，否则虽然你输入的是数字 但它的类型其实是String，在数字输入框中比较有用</li><li><strong>.trim</strong> 修饰符会自动过滤掉输入的<strong>首尾空格</strong></li></ul></li></ul><h3 id="_2、vue组件使用" tabindex="-1"><a class="header-anchor" href="#_2、vue组件使用"><span>2、Vue组件使用</span></a></h3><h4 id="组件使用中的细节点" tabindex="-1"><a class="header-anchor" href="#组件使用中的细节点"><span>组件使用中的细节点</span></a></h4><ul><li>table 中只能使用tr标签，不能使用子组件标签，需要使用is</li><li>子组件中定义data必须是一个函数 <ul><li><p>vue组件相当于class，它可能会被用到很多地方，这就类似于new class实例</p></li><li><p>而对于每一个实例，data都必须是独立的，所以要用函数返回</p></li><li><p>如果不用函数，那多个实例就公用一个data了</p></li></ul></li><li>使用ref操作dom: this.$refs.xx</li></ul><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		&lt;!-- table 中只能使用tr标签 因此使用is  同理还有select中只能用option标签，ul中li标签 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">table</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">			&lt;</span><span style="color:#569CD6;">tbody</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">				&lt;</span><span style="color:#569CD6;">tr</span><span style="color:#9CDCFE;"> is</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;row&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">				&lt;</span><span style="color:#569CD6;">tr</span><span style="color:#9CDCFE;"> is</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;row&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">				&lt;</span><span style="color:#569CD6;">tr</span><span style="color:#9CDCFE;"> is</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;row&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">			&lt;/</span><span style="color:#569CD6;">tbody</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">table</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		&lt;!-- 使用ref操作dom --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#F44747;">counter</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;one&quot;</span><span style="color:#9CDCFE;"> @change</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleChange&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">counter</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#F44747;">counter</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;two&quot;</span><span style="color:#9CDCFE;"> @change</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleChange&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">counter</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{total}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		// 子组件中定义data必须是一个函数</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;row&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">			data</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">				return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					content:</span><span style="color:#CE9178;"> &#39;this is a row&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			template:</span><span style="color:#CE9178;"> &#39;&lt;tr&gt;&lt;td&gt;{{content}}&lt;/td&gt;&lt;/tr&gt;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;counter&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			template:</span><span style="color:#CE9178;">&#39;&lt;div @click=&quot;handleClick&quot;&gt;{{number}}&lt;/div&gt;&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">			data</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">				return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					number:</span><span style="color:#B5CEA8;"> 0</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;"> ++</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;change&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;">&quot;#root&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				total:</span><span style="color:#B5CEA8;"> 0</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleChange</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">total</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$refs</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">one</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$refs</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">two</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">number</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="父子组件传值" tabindex="-1"><a class="header-anchor" href="#父子组件传值"><span>父子组件传值</span></a></h4><p>扩展阅读：</p><p><a href="https://blog.csdn.net/lander_xiong/article/details/79018737" target="_blank" rel="noopener noreferrer">Vue2.0的三种常用传值方式、父传子、子传父、非父子组件传值</a></p><p><a href="https://www.cnblogs.com/hpx2020/p/10936279.html" target="_blank" rel="noopener noreferrer">vue组件间通信六种方式（完整版）</a></p><ul><li><p>父组件通过属性形式向子组件传值</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">props</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    list</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">        type</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        default</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#D4D4D4;"> []</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>子组件通过事件触发形式向父组件传值</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$emit</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">事件方法</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">值</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#F44747;">counter</span><span style="color:#9CDCFE;"> :count</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;3&quot;</span><span style="color:#9CDCFE;"> @inc</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleIncrease&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">counter</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#F44747;">counter</span><span style="color:#9CDCFE;"> :count</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;2&quot;</span><span style="color:#9CDCFE;"> @inc</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleIncrease&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">counter</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{total}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 单向数据流：父组件可以向子组件传递任何数据，但是父组件传递过来的数据不能在子组件中直接修改，可以复制一个副本，更改副本</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> counter</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			props:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;count&#39;</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">			data</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">				return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					number:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			template:</span><span style="color:#CE9178;"> &#39;&lt;div @click=&quot;handleClick&quot;&gt;{{number}}&lt;/div&gt;&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;inc&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)	</span><span style="color:#6A9955;">// 子组件通过事件触发形式向父组件传值</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &#39;#root&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				total:</span><span style="color:#B5CEA8;"> 5</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			components:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				counter</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleIncrease</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">step</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">total</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">step</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue中父组件调用子组件方法" tabindex="-1"><a class="header-anchor" href="#vue中父组件调用子组件方法"><span>vue中父组件调用子组件方法</span></a></h4><p>用法： 子组件上定义<code>ref=&quot;refName&quot;</code>, 父组件的方法中用 <code>this.$refs.refName.method</code> 去调用子组件方法</p><p>详解： 父组件里面调用子组件的函数，父组件先把函数/方法以属性形式传给子组件；那么就需要先找到子组件对象 ，即 <code>this.$refs.refName</code>.然后再进行调用，也就是 <code>this.$refs.refName.method</code></p><p>1、在子组件中：<code>&lt;div&gt;&lt;/div&gt;</code>是必须要存在的</p><p>2、在父组件中：首先要引入子组件 <code>import Child from &#39;./child&#39;;</code></p><p>3、 <code>&lt;child ref=&quot;mychild&quot;&gt;&lt;/child&gt;</code>是在父组件中为子组件添加一个占位，<code>ref=&quot;mychild&quot;</code>是子组件在父组件中的名字</p><p>4、父组件中 components: {　　是声明子组件在父组件中的名字</p><p>5、在父组件的方法中调用子组件的方法，很重要 <code>this.$refs.mychild.parentHandleclick(&quot;嘿嘿嘿&quot;);</code></p><h4 id="组件参数校验" tabindex="-1"><a class="header-anchor" href="#组件参数校验"><span>组件参数校验</span></a></h4><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#F44747;">child</span><span style="color:#9CDCFE;"> content</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;hello world&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;child&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			props:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				content:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					type:</span><span style="color:#9CDCFE;"> String</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					required:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">,   </span><span style="color:#6A9955;">//如果是true，说明这个属性必传</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">					default:</span><span style="color:#CE9178;"> &#39;default value&#39;</span><span style="color:#D4D4D4;">,   </span><span style="color:#6A9955;">//当这个属性没有传递数据时，默认显示的值</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">					//校验</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">					validator</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">						return</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">					}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			template:</span><span style="color:#CE9178;"> &#39;&lt;div&gt;{{content}}&lt;/div&gt;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &#39;#root&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="给子组件绑定原生事件" tabindex="-1"><a class="header-anchor" href="#给子组件绑定原生事件"><span>给子组件绑定原生事件</span></a></h4><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#F44747;">child</span><span style="color:#9CDCFE;"> @click.native</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleClick&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;child&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			template:</span><span style="color:#CE9178;"> &#39;&lt;div&gt;Child&lt;/div&gt;&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &#39;#root&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">					alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="非父子组件的传值-bus-总线-发布订阅模式-观察者模式" tabindex="-1"><a class="header-anchor" href="#非父子组件的传值-bus-总线-发布订阅模式-观察者模式"><span>非父子组件的传值（Bus/总线/发布订阅模式/观察者模式）</span></a></h4><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  	&lt;</span><span style="color:#F44747;">child</span><span style="color:#9CDCFE;"> content</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;childOne&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  	&lt;</span><span style="color:#F44747;">child</span><span style="color:#9CDCFE;"> content</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;childTwo&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  	// bus 总线 进行非父子组件的传值</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">  	Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bus</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  	Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;child&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  		props:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;content&#39;</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  		data</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  			return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  				myContent:</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">content</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  		},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  		template:</span><span style="color:#CE9178;"> &#39;&lt;div @click=&quot;handleClick&quot;&gt;{{myContent}}&lt;/div&gt;&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  		methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  			handleClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                // 派发方法</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  				this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bus</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;change&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">myContent</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  		},</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      	// 生命周期钩子 该组件被挂载时会执行的函数</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  		mounted</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  			var</span><span style="color:#9CDCFE;"> this_</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 接收方法</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  			this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bus</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;change&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  				this_</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">myContent</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">content</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  			})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  		},</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 及时解绑自定义事件</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        beforeDestory</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 及时销毁，否则可能造成内存泄漏</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            event</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$off</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;change&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  				this_</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">myContent</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">content</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  			})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  	})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      el:</span><span style="color:#CE9178;"> &quot;#root&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期"><span>组件生命周期</span></a></h4><ul><li><p>单个组件</p><p>created 页面还没开始渲染，但Vue实例已经初始化完成</p><p>mounted 页面渲染完成 基本情况在mounted中进行操作，如ajax获取信息，绑定事件等</p><p>beforeDestroy 解除绑定，销毁子组件以及事件监听器，如自定义事件，setTimeout，window、document事件</p></li><li><p>父子组件</p><p>父组件先开始初始化，再子组件初始化，子组件渲染完成后，父组件才渲染完成</p><p>index created</p><p>list created</p><p>list mounted</p><p>index mounted</p><p>父组件先开始进入更新状态，再子组件，子组件更新完成后，父组件才更新完成</p><p>index beforeUpdate</p><p>list beforeUpdate</p><p>list updated</p><p>index updated</p><p>销毁destroy同理</p></li></ul><h3 id="_3、vue高级特性" tabindex="-1"><a class="header-anchor" href="#_3、vue高级特性"><span>3、Vue高级特性</span></a></h3><h4 id="自定义组件如何实现v-model" tabindex="-1"><a class="header-anchor" href="#自定义组件如何实现v-model"><span>自定义组件如何实现v-model⭐</span></a></h4><h5 id="vue2" tabindex="-1"><a class="header-anchor" href="#vue2"><span>Vue2</span></a></h5><p>在vue2中，自定义组件使用 <code>v-model</code> ，需要在组件内部定义 <code>value</code> prop，然后通过 <code>this.$emit(&#39;input&#39;, newValue)</code> 触发更新即可。</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- CustomInput.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> :value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;value&quot;</span><span style="color:#9CDCFE;"> @input</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;$emit(&#39;input&#39;, $event.target.value)&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  props:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;value&#39;</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式：</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">CustomInput</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">searchText</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;"> /&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3"><span>Vue3</span></a></h5><p>在Vue 3中，自定义组件实现<code>v-model</code>的方式与Vue 2有所不同。Vue 3中，<code>v-model</code>是<code>modelValue</code>属性和<code>update:modelValue</code>事件的语法糖。同时，Vue 3还支持多个<code>v-model</code>绑定。</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- CustomInput.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> :value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;modelValue&quot;</span><span style="color:#9CDCFE;"> @input</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;$emit(&#39;update:modelValue&#39;, $event.target.value)&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">defineProps</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;modelValue&#39;</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">defineEmits</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;update:modelValue&#39;</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式：</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">CustomInput</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">searchText</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;"> /&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Vue 3 支持在同一个组件上绑定多个 <code>v-model</code>：</strong></p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 父组件 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">UserForm</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  v-model</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">userName</span><span style="color:#D4D4D4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  v-model</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">userAge</span><span style="color:#D4D4D4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">/&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 子组件 UserForm.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">input</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#D4D4D4;"> @</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#DCDCAA;">$emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;update:name&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">$event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">&lt;input :value=&quot;age&quot; @input=&quot;$emit(&#39;update:age&#39;, $event.target.value)&quot;&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">&lt;script setup&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">defineProps([&#39;name&#39;, &#39;age&#39;])</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">defineEmits([&#39;update:name&#39;, &#39;update:age&#39;])</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">&lt;/script&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>👉注意，从 Vue 3.4 开始，官方推荐的实现方式是使用 defineModel() 宏：</strong></p><p>在 Vue 3.3 及以上版本中，引入了新的宏 <code>defineModel()</code>，它极大地简化了自定义组件中 <code>v-model</code> 的实现。<code>defineModel()</code> 是一个编译宏，它会自动声明一个 prop 和一个对应的更新事件。</p><p><strong>单值绑定</strong></p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 子组件 CustomInput.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 使用 defineModel() 自动创建 modelValue</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> model</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;model&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 父组件 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">CustomInput</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;message&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多个 v-model 绑定</strong></p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 子组件 UserForm.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> age</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;age&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;number&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 父组件 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">UserForm</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    v-model:name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;userName&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    v-model:age</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;userAge&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick"><span>nextTick⭐</span></a></h4><p><strong>核心作用：在下次 DOM 更新循环结束后执行回调，确保我们能操作到最新的 DOM 状态。</strong></p><ul><li>Vue是异步渲染</li><li>data改变之后，DOM不会立刻渲染</li><li>nextTick会在DOM渲染之后被触发，以获取最新DOM节点</li></ul><p><strong>数据变化后操作 DOM</strong></p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // DOM 还未更新</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;counter&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">textContent</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 0</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  await</span><span style="color:#DCDCAA;"> nextTick</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // DOM 此时已经更新</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;counter&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">textContent</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;counter&quot;</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;increment&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ count }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在生命周期钩子中操作 DOM</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">import </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onMounted</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nextTick</span><span style="color:#569CD6;"> }</span><span style="color:#D4D4D4;"> from &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">// 创建 DOM 引用</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const element = ref(null)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">onMounted(() =&gt; </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 直接访问可能未渲染完成</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">element</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">offsetHeight</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 0 或未定义</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 使用 nextTick 确保 DOM 已渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  nextTick</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">element</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">offsetHeight</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 实际高度</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  })</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在vue2中和vue3的选项式 API中，我们使用this.$nextTick(callback)的方式调用。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$nextTick</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$refs</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">innerText</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// &quot;更新后的文本&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽"><span>插槽⭐</span></a></h4><p>没有插槽的情况下在组件标签内写一些内容是不起任何作用的，当在组件中声明了slot元素后，在组件元素内写的内容就会替换slot。</p><p>用于父组件中往子组件中插入一段内容。</p><h5 id="单个插槽" tabindex="-1"><a class="header-anchor" href="#单个插槽"><span>单个插槽</span></a></h5><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">hello</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> child</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      template:</span><span style="color:#CE9178;"> &#39;&lt;div&gt;&lt;slot&gt;默认内容，即父组件没设置内容时，这里显示&lt;/slot&gt;&lt;/div&gt;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      components:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        child</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      el:</span><span style="color:#CE9178;"> &quot;#root&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="具名插槽" tabindex="-1"><a class="header-anchor" href="#具名插槽"><span>具名插槽</span></a></h5><p>通过给 <code>&lt;slot&gt;</code> 元素添加 <code>name</code> 属性来定义不同的插槽，这样就可以在父组件中指定具体的内容应该出现在哪个位置。</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- 缩写 &lt;template #header&gt; --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">template</span><span style="color:#9CDCFE;"> v-slot:header</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">将插入header slot中</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">将插入到main slot中，即未命名的slot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">template</span><span style="color:#9CDCFE;"> v-slot:footer</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">将插入footer slot中</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> child</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      template:</span><span style="color:#CE9178;"> \`&lt;div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                  &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                  &lt;div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                    &lt;h2&gt;content&lt;/h2&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                  &lt;/div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                  &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                &lt;/div&gt;\`</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      components:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        child:</span><span style="color:#9CDCFE;"> child</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      el:</span><span style="color:#CE9178;"> &quot;#root&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="作用域插槽" tabindex="-1"><a class="header-anchor" href="#作用域插槽"><span>作用域插槽</span></a></h5><p>允许子组件向父组件传递数据，并且在父组件中根据这些数据动态地生成内容。这通常通过 <code>&lt;slot&gt;</code> 标签的 <code>v-bind</code> 绑定来实现。</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">template</span><span style="color:#9CDCFE;"> v-slot</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;slotProps&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">              &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> v-for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;item in slotProps.items&quot;</span><span style="color:#9CDCFE;"> :key</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;item&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ item }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;/</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        &lt;!-- 使用解构 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">template</span><span style="color:#9CDCFE;"> v-slot</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;{ items }&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">              &lt;</span><span style="color:#569CD6;">li</span><span style="color:#9CDCFE;"> v-for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;item in items&quot;</span><span style="color:#9CDCFE;"> :key</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;item&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ item }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">            &lt;/</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#F44747;">child</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;child&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        data</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                items:</span><span style="color:#D4D4D4;"> [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        template:</span><span style="color:#CE9178;"> \`&lt;div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                    &lt;ul&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                        &lt;slot :items=&quot;items&quot;&gt;&lt;/slot&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                    &lt;/ul&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">                   &lt;/div&gt;\`</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        el:</span><span style="color:#CE9178;"> &#39;#root&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="具名作用域插槽" tabindex="-1"><a class="header-anchor" href="#具名作用域插槽"><span>具名作用域插槽</span></a></h5><p>具名作用域插槽的工作方式也是类似的，插槽 props 可以作为 <code>v-slot</code> 指令的值被访问到：<code>v-slot:name=&quot;slotProps&quot;</code>。</p><p>当使用缩写时是这样：</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">MyComponent</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  &lt;template #header=&quot;headerProps&quot;&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {{ headerProps }}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  &lt;/template&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  &lt;template #default=&quot;defaultProps&quot;&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {{ defaultProps }}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  &lt;/template&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  &lt;template #footer=&quot;footerProps&quot;&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {{ footerProps }}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  &lt;/template&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">MyComponent</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向具名插槽中传入 props：</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">slot</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;header&quot;</span><span style="color:#9CDCFE;"> message</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;hello&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">slot</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意插槽上的 <code>name</code> 是一个 Vue 特别保留的 attribute，不会作为 props 传递给插槽。因此最终 <code>headerProps</code> 的结果是 <code>{ message: &#39;hello&#39; }</code>。</p><h4 id="动态组件与v-once指令" tabindex="-1"><a class="header-anchor" href="#动态组件与v-once指令"><span>动态组件与v-once指令⭐</span></a></h4><ul><li><p>动态组件用法 <code>&lt;component :is=&quot;component-name&quot; /&gt;</code></p><p>被传给 <code>:is</code> 的值可以是以下几种：</p><ul><li>被注册的组件名</li><li>导入的组件对象</li></ul></li><li><p>需要根据数据，动态渲染的场景，如常见的有文本，视频，图片组件的新闻详情页。即组件类型不确定。</p></li><li><p>每次都会销毁和重建，为了性能优化，也可以使用keep-alive缓存</p></li></ul><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	    &lt;!-- 动态组件 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		&lt;!-- &lt;component :is=&quot;type&quot;&gt;&lt;/component&gt; --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	    &lt;!-- 使用v-once --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">child-one</span><span style="color:#9CDCFE;"> v-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;type ===&#39;child-one&#39;&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">child-one</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">child-two</span><span style="color:#9CDCFE;"> v-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;type ===&#39;child-two&#39;&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">child-two</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleBtnClick&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">change</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		// v-once修饰的组件会把该dom隐藏掉,它还在内存里面,等到你需要它的时候就可以迅速渲染,从而提升性能。</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;child-one&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			template:</span><span style="color:#CE9178;"> &#39;&lt;div v-once&gt;child-one&lt;/div&gt;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;child-two&#39;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			template:</span><span style="color:#CE9178;"> &#39;&lt;div v-once&gt;child-two&lt;/div&gt;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">		var</span><span style="color:#9CDCFE;"> vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			el:</span><span style="color:#CE9178;"> &#39;#root&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">				type:</span><span style="color:#CE9178;"> &#39;child-one&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			},</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">				handleBtnClick</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">					this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> = (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;child-one&#39;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&#39;child-two&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;child-one&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">				}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">			}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件"><span>异步组件</span></a></h4><p>使用import()函数按需加载</p><p>同步引入组件：<code>import formDemo from &#39;./formDemo&#39;</code></p><p>异步引入组件：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C8C8C8;">components</span><span style="color:#D4D4D4;">:{</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">	formDemo</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> import</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./formDemo&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>何时使用异步组件</p><ul><li>加载大组件</li><li>路由异步加载</li></ul><h4 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive"><span>keep-alive⭐</span></a></h4><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">keep-alive</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	&lt;KeepAliveStageA v-if=&quot;state === &#39;A&#39;&quot; /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;KeepAliveStageB v-if=&quot;state === &#39;B&#39;&quot; /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;KeepAliveStageC v-if=&quot;state === &#39;C&#39;&quot; /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">keep-alive</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>&lt;KeepAlive&gt;</code> 是一个内置组件，它的功能是在多个组件间动态切换时缓存被移除的组件实例。</p></li><li><p>频繁切换不需要重复渲染，用于tab切换等</p></li><li><p>Vue常见性能优化</p></li><li><p>v-show和keep-alive的区别：</p><p>v-show是在css层面，控制元素的显示方式，将display属性在block和none来回切换；</p><p>keep-alive是vue中的一个抽象组件，用于保存组件的渲染状态。</p></li></ul><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">keep-alive</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">include</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">whiteList</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">exclude</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">blackList</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">max</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">amount</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;router-view&gt;&lt;/router-view&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">keep-alive</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>include</strong>定义缓存白名单，keep-alive会缓存命中的组件；<strong>exclude</strong>定义缓存黑名单，被命中的组件将不会被缓存；<strong>max</strong>定义缓存组件上限，超出上限使用LRU的策略置换缓存数据。</p><blockquote><p>内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，操作系统会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。</p></blockquote><p><strong>何时使用keep-alive</strong></p><ul><li>缓存组件，不需要重复渲染</li><li>如多个静态tab页的切换</li><li>优化性能</li></ul><p><strong>Vue 3 的 keep-alive 的缓存机制原理</strong></p><ul><li>缓存池：keep-alive 内部<strong>使用一个 Map 存储已渲染的组件实例，键通常是组件的 key（或 name）</strong>。</li><li>激活与挂起：如果组件切换时已经缓存，直接复用缓存的组件实例；如果组件未缓存，则渲染并缓存新的组件实例。 此外，keep-alive 还会激活特殊的钩子函数：</li><li>当组件被缓存时，会触发 deactivated 钩子。</li><li>当组件从缓存中恢复时，会触发 activated 钩子。</li></ul><p>一个简单的实现如下：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> KeepAliveImpl</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;KeepAlive&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 已缓存的组件实例。</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  _cache:</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#D4D4D4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  _activeCache:</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#D4D4D4;">(),</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> vnode</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$slots</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">default</span><span style="color:#D4D4D4;">()[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// 获取动态组件的 vnode</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> key</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_cache</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">has</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> cachedVnode</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_cache</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_activeCache</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">cachedVnode</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> cachedVnode</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> vnode</span><span style="color:#6A9955;"> // 未缓存，直接渲染</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  mounted</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> key</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">key</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_cache</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">has</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_cache</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$vnode</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  beforeDestroy</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> key</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$vnode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">key</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_cache</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">delete</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、vuex使用" tabindex="-1"><a class="header-anchor" href="#_4、vuex使用"><span>4、Vuex使用</span></a></h3><p><code>Vuex</code>解决项目中多个组件之间的数据通信和状态管理。</p><p><a href="https://www.cnblogs.com/hpx2020/p/10936279.html" target="_blank" rel="noopener noreferrer">vue组件间通信六种方式（完整版）</a></p><h4 id="vuex五大核心属性" tabindex="-1"><a class="header-anchor" href="#vuex五大核心属性"><span>Vuex五大核心属性</span></a></h4><p><strong>state，getter，mutation，action，module</strong></p><ul><li>state：存储数据，存储状态；在根实例中注册了store 后，用 <code>this.$store.state</code> 来访问；对应vue里面的data；存放数据方式为响应式，vue组件从store中读取数据，如数据发生变化，组件也会对应的更新。</li><li>getter：可以认为是 store 的计算属性，它的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</li><li>mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</li><li>action：包含任意异步操作，通过提交 mutation 间接变更状态。</li><li>module：将 store 分割成模块，每个模块都具有state、mutation、action、getter、甚至是嵌套子模块。</li></ul><h4 id="vuex原理" tabindex="-1"><a class="header-anchor" href="#vuex原理"><span>Vuex原理</span></a></h4><p>Vuex实现了一个单向数据流，在全局拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过Mutation来修改State的数据。最后，根据State的变化，渲染到视图上。</p><h4 id="各模块在流程中的功能" tabindex="-1"><a class="header-anchor" href="#各模块在流程中的功能"><span>各模块在流程中的功能</span></a></h4><ul><li>Vue Components：Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。</li><li>dispatch：操作行为触发方法，是唯一能执行action的方法。</li><li>actions：<strong>操作行为处理模块,由组件中的$store.dispatch(&#39;action 名称&#39;, data1)来触发。然后由commit()来触发mutation的调用 , 间接更新 state</strong>。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。</li><li>commit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。</li><li>mutations：<strong>状态改变操作方法，由actions中的commit(&#39;mutation 名称&#39;)来触发</strong>。是Vuex修改state的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。</li><li>state：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。</li><li>getters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。</li></ul><h4 id="mutation-和-action-有什么区别" tabindex="-1"><a class="header-anchor" href="#mutation-和-action-有什么区别"><span>mutation 和 action 有什么区别</span></a></h4><p><code>mutation</code> 可以直接修改 <code>store</code> 中的 <strong>state</strong>值，它只支持同步操作。</p><p><code>Action</code> 不能直接修改 <strong>state</strong>，而是通过调用 <code>mutation</code> 来间接修改，它用于处理异步操作。</p><h4 id="vuex与localstorage" tabindex="-1"><a class="header-anchor" href="#vuex与localstorage"><span>Vuex与localStorage</span></a></h4><p>vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，<strong>具体做法应该在vuex里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来再替换store里的state。</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> defaultCity</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;上海&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {   </span><span style="color:#6A9955;">// 用户关闭了本地存储功能，此时在外层加个try...catch</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">defaultCity</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    defaultCity</span><span style="color:#D4D4D4;"> = </span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;defaultCity&#39;</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">){}</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> new</span><span style="color:#9CDCFE;"> Vuex</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Store</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  state:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    city:</span><span style="color:#9CDCFE;"> defaultCity</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  mutations:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    changeCity</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">city</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">city</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">city</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;defaultCity&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">city</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // 数据改变的时候把数据拷贝一份保存到localStorage里面</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是：由于vuex里，我们保存的状态，都是数组，而localStorage只支持字符串，所以需要用JSON转换：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">subscribeList</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// array -&gt; string</span></span></span>
<span class="line"><span class="line"><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;subscribeList&quot;</span><span style="color:#D4D4D4;">));    </span><span style="color:#6A9955;">// string -&gt; array</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、vue-router使用" tabindex="-1"><a class="header-anchor" href="#_5、vue-router使用"><span>5、Vue Router使用</span></a></h3><h4 id="路由模式" tabindex="-1"><a class="header-anchor" href="#路由模式"><span>路由模式</span></a></h4><h5 id="hash模式-默认" tabindex="-1"><a class="header-anchor" href="#hash模式-默认"><span>hash模式（默认）</span></a></h5><ul><li><p>通过监听url中的hash变化来进行路由跳转</p></li><li><p>可以通过<code>window.location.hash</code>属性获取和设置hash值。比如这个URL：http://www.abc.com/#/hello, hash 的值为#/hello。</p></li><li><p><strong>它的特点在于：hash 虽然出现URL中，但不会随请求发送到服务器端，因此改变hash不会重新加载页面。</strong></p></li><li><p>hash模式背后的原理是<strong>onhashchange</strong>事件，可以在window对象上监听这个事件</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 监听hash变化</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onhashchange</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;old url&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">oldURL</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;new url&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">newURL</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;hash:&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">location</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hash</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 进行一些操作</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>hash 变化方式</p><ul><li>JS 修改 url</li><li>手动修改 url 的 hash</li><li>浏览器前进、后退</li></ul></li></ul><h5 id="history路由-需要server端支持" tabindex="-1"><a class="header-anchor" href="#history路由-需要server端支持"><span>history路由(需要server端支持)</span></a></h5><p>利用了HTML5 History Interface 中新增的<code>pushState() </code>和<code>replaceState() </code>方法</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">go</span><span style="color:#D4D4D4;">(-</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);	</span><span style="color:#6A9955;">// 后退两次</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">go</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);	</span><span style="color:#6A9955;">// 前进两次</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">back</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 后退</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">hsitory</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forward</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 前进</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 参数：stateObj, title, url</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 浏览器不会刷新页面</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pushState</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">color:</span><span style="color:#CE9178;"> &#39;red&#39;</span><span style="color:#D4D4D4;">}, </span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 添加历史记录</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replaceState</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">color:</span><span style="color:#CE9178;"> &#39;red&#39;</span><span style="color:#D4D4D4;">}, </span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 修改历史记录</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 监听历史记录变化</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onpopstate</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;onpopstate&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">location</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pathname</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">     if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">           document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>history.pushState</strong>方法接受三个参数，依次为：</p><p>1、state：一个与指定网址相关的状态对象，popstate事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null。可用它来传一些数据</p><p>2、title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null。</p><p>3、url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。</p><p>history.replaceState方法跟pushState一样只不过replaceState是修改当前的状态。</p><h5 id="两者选择" tabindex="-1"><a class="header-anchor" href="#两者选择"><span>两者选择</span></a></h5><ul><li>toB 的系统推荐用hash，简单易用，对url规范不敏感</li><li>toC 的系统，可以考虑选择h5 history，但需要服务端支持</li></ul><h4 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由"><span>动态路由</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> User</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    template:</span><span style="color:#CE9178;"> &#39;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> router</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> VueRouter</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    routes:</span><span style="color:#D4D4D4;"> [</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 动态路径参数 以冒号开头 能命中&#39;/user/20&#39;,&#39;/user/10&#39;等格式的路由</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        { </span><span style="color:#9CDCFE;">path:</span><span style="color:#CE9178;"> &#39;/user/:id&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">components:</span><span style="color:#9CDCFE;"> User</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载"><span>懒加载</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> router</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> VueRouter</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    routes:</span><span style="color:#D4D4D4;"> [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        { </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            path:</span><span style="color:#CE9178;"> &#39;/user/:id&#39;</span><span style="color:#D4D4D4;">, </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 异步加载组件</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            components</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> import</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./../components/Navigator&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由"><span>嵌套路由</span></a></h4><p>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p><div class="language-css line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-css;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">/user/foo/profile                     /user/foo/posts</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">+------------------+                  +-----------------+</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">| User             |                  | User            |</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">| +--------------+ |                  | +-------------+ |</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">| | Profile      | |  +------------&gt;  | | Posts       | |</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">| |              | |                  | |             | |</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">| +--------------+ |                  | +-------------+ |</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">+------------------+                  +-----------------+</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借助 <code>vue-router</code>，使用嵌套路由配置，就可以很简单地表达这种关系。</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">router-view</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">router-view</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const User = {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  template: &#39;</span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">User {{ $route.params.id }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const router = new VueRouter({</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  routes: [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    { path: &#39;/user/:id&#39;, component: User }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="导航守卫" tabindex="-1"><a class="header-anchor" href="#导航守卫"><span>导航守卫</span></a></h4><h5 id="全局前置守卫" tabindex="-1"><a class="header-anchor" href="#全局前置守卫"><span>全局前置守卫</span></a></h5><p>可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> router</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createRouter</span><span style="color:#D4D4D4;">({ ... })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">beforeEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // ...</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 返回 false 以取消导航</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个守卫方法接收两个参数：</p><ul><li><strong><code>to</code></strong>: 即将要进入的目标</li><li><strong><code>from</code></strong>: 当前导航正要离开的路由</li></ul><p>可以返回的值如下:</p><ul><li><code>false</code>: 取消当前的导航。如果浏览器的 URL 改变了(可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li><li>一个<a href="https://router.vuejs.org/zh/api/#routelocationraw" target="_blank" rel="noopener noreferrer">路由地址</a>: 通过一个路由地址重定向到一个不同的地址，如同调用 <code>router.push()</code>，且可以传入诸如 <code>replace: true</code> 或 <code>name: &#39;home&#39;</code> 之类的选项。它会中断当前的导航，同时用相同的 <code>from</code> 创建一个新导航。</li></ul><h5 id="路由守卫" tabindex="-1"><a class="header-anchor" href="#路由守卫"><span>路由守卫</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> routes</span><span style="color:#D4D4D4;"> = [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    path:</span><span style="color:#CE9178;"> &#39;/users/:id&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    component:</span><span style="color:#9CDCFE;"> UserDetails</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    beforeEnter</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">      // reject the navigation</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="组件内的守卫" tabindex="-1"><a class="header-anchor" href="#组件内的守卫"><span>组件内的守卫</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">export default </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  beforeRouteEnter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 在渲染该组件的对应路由被验证前调用</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 不能获取组件实例 \`this\` ！</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 因为当守卫执行时，组件实例还没被创建！</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  beforeRouteUpdate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 在当前路由改变，但是该组件被复用时调用</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 举例来说，对于一个带有动态参数的路径 \`/users/:id\`，在 \`/users/1\` 和 \`/users/2\` 之间跳转的时候，</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 由于会渲染同样的 \`UserDetails\` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 \`this\`</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  beforeRouteLeave</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 在导航离开渲染该组件的对应路由时调用</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 与 \`beforeRouteUpdate\` 一样，它可以访问组件实例 \`this\`</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="导航守卫的实际应用" tabindex="-1"><a class="header-anchor" href="#导航守卫的实际应用"><span>导航守卫的实际应用⭐</span></a></h5><ul><li>认证和授权</li></ul><p>用于检查用户的登录状态或权限，防止未授权用户访问受限页面。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">beforeEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> isAuthenticated</span><span style="color:#D4D4D4;"> = !!</span><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;token&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">meta</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">requiresAuth</span><span style="color:#D4D4D4;"> &amp;&amp; !</span><span style="color:#9CDCFE;">isAuthenticated</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/login&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 未登录，跳转到登录页</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    next</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// 已登录，正常导航</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据预加载</li></ul><p>在进入路由前预加载必要的数据，确保页面渲染时数据已准备好。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">beforeEach</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;userInfo&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;fetchUserData&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 预加载用户数据</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  next</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>动态修改页面标题</li></ul><p>根据路由信息动态更改浏览器标签页的标题，提升用户体验。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">afterEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">meta</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;"> || </span><span style="color:#CE9178;">&#39;自定义标题&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>动画和加载效果</li></ul><p>在路由切换时展示加载动画或过渡效果，提升用户体验。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">beforeEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">commit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;setLoading&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 开始加载动画</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  next</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">afterEach</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  store</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">commit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;setLoading&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 结束加载动画</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>日志记录和分析</li></ul><p>在路由切换时记录用户行为，用于分析或调试。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">afterEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`用户从 </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fullPath</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> 跳转到 </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fullPath</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>防止访问不存在的页面</li></ul><p>通过守卫检查路由是否存在，避免导航到无效页面。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">beforeEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> routeExists</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getRoutes</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">some</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">route</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> route</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">routeExists</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/404&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 跳转到 404 页面</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    next</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、vue原理" tabindex="-1"><a class="header-anchor" href="#二、vue原理"><span>二、Vue原理⭐</span></a></h2><h3 id="_1、mvvm" tabindex="-1"><a class="header-anchor" href="#_1、mvvm"><span>1、MVVM⭐</span></a></h3><p>是指数据层（Model）- 视图层（View）- 数据视图（ViewModel）的响应式框架</p><ul><li><p>修改View层，Model对应数据发生变化。</p></li><li><p>Model数据变化，不需要查找DOM，直接更新View。</p></li><li><p>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互。</p></li><li><p>MVVM 的核心在于通过<strong>双向数据绑定</strong>机制实现 View 和 ViewModel 的自动同步，减少了手动更新UI的工作量。</p></li></ul><p><strong>MVC和MVVM的区别</strong></p><p><strong>MVC</strong></p><p>优点:</p><ul><li>易懂: 简单易懂</li><li>层次分明: 共三个部分，各自完成各自的内容，在有Controller将大家协调在一起。</li></ul><p>弊端:</p><ul><li>量级重 : <code>View</code>和<code>Controller</code>处理过多的业务逻辑如协调模型和视图之间的所有交互，导致量级重，维护成本很高。</li><li>过轻的<code>Model</code>对象:在实践中往往大家都把Model的量级设计的非常轻，总容易当做数据模型来对待。</li></ul><p><strong>MVVM</strong></p><p>优点:</p><ul><li>低耦合: <code>View</code>可以独立于Model变化和修改，一个<code>ViewModel</code>可以绑定到不同的View 上。</li><li>可重用性: 可以把一些视图逻辑放在一个<code>ViewModel</code>里面，让很多<code>View</code>重用这段视图逻辑。</li></ul><p>弊端:</p><ul><li>数据绑定后使得<code>Bug</code>很难被调试。</li><li>数据绑定和数据转化需要<code>花费更多</code>的内存成本。</li></ul><p><strong>二者之间的关系图</strong></p><p>MVVM实质上是把 MVC 中的C的功能给拆分了。</p><p><img src="`+c+`" alt="MVC和MVVM"></p><h3 id="_2、双向数据绑定原理" tabindex="-1"><a class="header-anchor" href="#_2、双向数据绑定原理"><span>2、双向数据绑定原理⭐</span></a></h3><p>双向数据绑定是指数据模型与视图之间的双向同步。Vue.js 通过 <code>v-model</code> 指令实现了这一功能。</p><p><strong>1、数据模型到视图的同步</strong></p><ul><li><p>Vue.js <strong>使用响应式系统来跟踪数据变化</strong>。当一个属性被访问或修改时，Vue 会自动触发相应的更新。</p></li><li><p>Vue 2.x 使用 <code>Object.defineProperty</code> 对数据对象的每个属性递归添加 <code>getter/setter</code> ，当数据的属性被访问时，触发 <code>getter</code> ，当属性被修改时，触发 <code>setter</code> 通知视图进行更新。通过这种方式，Vue 可以监控数据的变化，并在数据变化时通知视图更新。</p></li><li><p>Vue 3.x 使用<code>Proxy</code>通过代理对象拦截整个对象的操作，无需递归初始化所有属性，性能更好。</p></li></ul><p><strong>2、视图到数据模型的同步</strong></p><p>这个方向的同步通常涉及<strong>事件监听和数据更新</strong>。</p><p>当用户与视图交互时（例如在输入框中输入数据），视图会触发一个事件（如 <code>input</code> 事件）。<code>v-model</code> 指令会监听这些事件，并将事件触发的数据变化同步回数据模型。</p><h3 id="_3、响应式原理-vue2" tabindex="-1"><a class="header-anchor" href="#_3、响应式原理-vue2"><span>3、响应式原理（Vue2）⭐</span></a></h3><p>响应式原理是**实现数据模型到视图同步（数据驱动视图）**的关键技术，它确保了当数据模型中的数据发生变化时，视图能够自动更新。</p><p>响应式原理是通过<strong>数据劫持结合发布-订阅模式</strong>实现的：</p><ul><li><p>当一个vue实例创建时，vue会遍历data选项的属性，用<code>Object.defineProperty()</code>将它们转为<code>getter</code>/<code>setter</code>并且在内部追踪相关依赖，在属性被访问和修改时同时变化。</p></li><li><p>每个组件实例都有相应的<code>Watcher</code>程序实例，能够订阅并收到每个属性变动的通知</p></li><li><p>当数据修改时，依赖项的<code>setter</code>被调用，进而触发<code>Watcher</code>上相应的监听回调，从而更新视图</p></li></ul><h4 id="核心api" tabindex="-1"><a class="header-anchor" href="#核心api"><span><strong>核心API</strong></span></a></h4><p><code>Object.defineProperty(obj, props, descriptor)</code></p><p>作用： 在对象上定义一个新属性或者修改原有属性</p><p>返回值： 修改后的目标对象obj</p><p>参数定义：</p><ul><li>obj: 在其上定义或修改属性的目标对象</li><li>props: 属性名称</li><li>descriptor: 属性描述符</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = {}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;zhangsan&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">defineProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    enumerable:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    configurable:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 拦截get，当我们访问data.key时会被这个方法拦截到</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    get</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 我们在这里收集依赖</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;get&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 拦截set，当我们为data.key赋值时会被这个方法拦截到</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    set</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newVal</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 当数据变更时，通知依赖项变更UI</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;set&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">newVal</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 测试</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// get zhangsan</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;lisi&#39;</span><span style="color:#6A9955;">     // set</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何深度监听data变化-简单实现" tabindex="-1"><a class="header-anchor" href="#如何深度监听data变化-简单实现"><span><strong>如何深度监听data变化（简单实现）</strong></span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> updateView</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;视图更新&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> defineReactive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 深度监听</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    observe</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 核心API</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">defineProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        get</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> value</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                // 设置新值</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">                observe</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                value</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">newValue</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                // 触发更新视图</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">                updateView</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> observe</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> === </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 不是对象或数组</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> target</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 重新定义各个熟悉（for in也可以遍历数组）</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        defineReactive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;zhangsan&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    info:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        address:</span><span style="color:#CE9178;"> &#39;beijing&#39;</span><span style="color:#6A9955;"> // 需要深度监听</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">address</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;shanghai&#39;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何监听数组变化-简单实现" tabindex="-1"><a class="header-anchor" href="#如何监听数组变化-简单实现"><span><strong>如何监听数组变化（简单实现）</strong></span></a></h4><ul><li>Object.defineProperty不能监听数组变化</li><li>重新定义原型，重写push pop等方法，实现监听</li><li>Proxy可以原生支持监听数组变化</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 重新定义数组原型</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> oldArrayProperty</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">propertype</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 创建新对象，原型指向oldArrayProperty，再扩展新的方法不会影响原型</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> arrProto</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">oldArrayProperty</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 比如 这个新对象有push方法，则先实现他自己定义的push方法</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 然后再处理原型数组的push方法  </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 即 Array.prototype.push(this, ...arguments)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&#39;push&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;pop&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;shift&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;splice&#39;</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">methodName</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    arrProto</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">methodName</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        updateView</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// 触发视图更新</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 再去实现原型数组中对应的方法</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        oldArrayProperty</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">methodName</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, ...</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> observe</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> ||</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> === </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> target</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 监听数组</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">arrProto</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        defineReactive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-defineproperty-的缺点" tabindex="-1"><a class="header-anchor" href="#object-defineproperty-的缺点"><span><strong>Object.defineProperty() 的缺点</strong></span></a></h4><ul><li>深度监听需要递归到底（必须遍历对象的每个属性、必须深层遍历嵌套的对象），一次性计算量大</li><li>无法监听新增/删除属性（因此出现 Vue.set Vue.delete 来弥补该缺点）</li><li>无法原生监听数组，需要特殊处理</li></ul><h3 id="_4、vue3如何实现响应式" tabindex="-1"><a class="header-anchor" href="#_4、vue3如何实现响应式"><span>4、Vue3如何实现响应式⭐</span></a></h3><h4 id="学习proxy语法" tabindex="-1"><a class="header-anchor" href="#学习proxy语法"><span>学习Proxy语法</span></a></h4><p><a href="https://csmsimona.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/JavaScript%E5%B0%8F%E8%AE%B0.html#_16%E3%80%81%E4%BB%A3%E7%90%86-proxy" target="_blank" rel="noopener noreferrer">代理（Proxy）</a></p><p>Proxy基本使用</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// const data = {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//     name: &#39;zhangsan&#39;,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//     age: 20,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;b&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;c&#39;</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> proxyData</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Proxy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 只处理本身（非原型的）属性</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> ownKeys</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ownKeys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">ownKeys</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includes</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;get&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 监听</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> result</span><span style="color:#6A9955;"> // 返回结果</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 重复的数据，不处理</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#569CD6;"> true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;set&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // console.log(&#39;result&#39;, result) // true</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> result</span><span style="color:#6A9955;"> // 是否设置成功</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    deleteProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">deleteProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;delete property&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // console.log(&#39;result&#39;, result) // true</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> result</span><span style="color:#6A9955;"> // 是否删除成功</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Reflect的作用</p><ul><li>和Proxy能力一一对应</li><li>规范化、标准化、函数式</li><li>替代掉Obejct上的工具函数，如Object.getOwnPropertyNames(obj) 可用 Reflect.ownKeys(obj) 来代替</li></ul><h4 id="vue3如何用proxy实现响应式" tabindex="-1"><a class="header-anchor" href="#vue3如何用proxy实现响应式"><span>Vue3如何用Proxy实现响应式</span></a></h4><p>通俗的理解，在对象之前设一层拦截，要对目标对象做的相应的处理，必须通过这层拦截，他可以对外部的处理做一些过滤和操作</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 创建响应式</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> reactive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> = {}) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 不是对象或数组，则返回</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> target</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 代理配置</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> proxyConf</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 只处理本身（非原型的）属性</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            const</span><span style="color:#4FC1FF;"> ownKeys</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ownKeys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">ownKeys</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includes</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;get&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 监听</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 深度监听</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 性能如何提升的？</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#DCDCAA;"> reactive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 重复的数据，不处理</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                return</span><span style="color:#569CD6;"> true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            const</span><span style="color:#4FC1FF;"> ownKeys</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ownKeys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">ownKeys</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includes</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;已有的 key&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;新增的 key&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;set&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // console.log(&#39;result&#39;, result) // true</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> result</span><span style="color:#6A9955;"> // 是否设置成功</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        deleteProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">deleteProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;delete property&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // console.log(&#39;result&#39;, result) // true</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> result</span><span style="color:#6A9955;"> // 是否删除成功</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 生成代理对象</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> observed</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Proxy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">proxyConf</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> observed</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 测试数据</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;zhangsan&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    info:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        city:</span><span style="color:#CE9178;"> &#39;beijing&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        a:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            b:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                c:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                    d:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                        e:</span><span style="color:#B5CEA8;"> 100</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> proxyData</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用proxy实现响应式的优势" tabindex="-1"><a class="header-anchor" href="#使用proxy实现响应式的优势"><span>使用Proxy实现响应式的优势</span></a></h4><ul><li><code>Proxy</code> 可拦截 <strong>13 种对象操作</strong>（如 <code>get</code>、<code>set</code>、<code>deleteProperty</code>、<code>has</code>、<code>ownKeys</code> 等），而 <code>Object.defineProperty</code> 仅能拦截 <code>get/set</code>。</li><li>深层监听数组对象的变化</li><li>自动检测<strong>新增/删除属性</strong>，无需手动调用类似 <code>Vue.set/delete</code> 的 API。</li><li>可以直接监听数组变化</li><li><code>Proxy</code> 只在访问属性时递归代理嵌套对象（按需响应），而 <code>defineProperty</code> 需要初始化时递归遍历所有属性，对大对象性能更好。</li><li>代理整个对象而非每个属性，避免为每个属性创建独立的 <code>getter/setter</code>。</li></ul><p>注意：<code>Proxy</code> 不支持 IE（但现代浏览器/框架已普遍支持）</p><h3 id="_5、vdom-虚拟dom" tabindex="-1"><a class="header-anchor" href="#_5、vdom-虚拟dom"><span>5、vdom（虚拟dom）⭐</span></a></h3><p>用JS模拟DOM结构，DOM变化的对比，放在JS层进行，减少操作DOM的次数，减少回流和重绘，优化 UI 渲染性能</p><p>1）用 JavaScript 对象结构表示 DOM 树的结构；</p><p>2）然后用这个树构建一个真正的 DOM 树，插到文档当中</p><p>3）当状态变更的时候，重新构造一棵新的对象树</p><p>4）然后用新的树和旧的树进行比较，记录两棵树差异</p><p>5）把所记录的差异应用到步骤 2) 所构建的真正的 DOM 树上，视图就更新了</p><p><strong>用js模拟DOM结构</strong></p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- DOM结构 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;div1&quot;</span><span style="color:#9CDCFE;"> class</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        vdom</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">ul</span><span style="color:#9CDCFE;"> style</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;font-size: 20px;&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">a</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// js模拟</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    tag</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;div&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    props</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">        className</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;container&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">        id</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;div1&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    children</span><span style="color:#D4D4D4;">: [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            tag:</span><span style="color:#CE9178;"> &#39;p&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            children:</span><span style="color:#CE9178;"> &#39;vdom&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            tag:</span><span style="color:#CE9178;"> &#39;ul&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            props:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                style:</span><span style="color:#CE9178;"> &#39;font-size: 20px;&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            children:</span><span style="color:#D4D4D4;"> [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                    tag:</span><span style="color:#CE9178;"> &#39;li&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                    children:</span><span style="color:#CE9178;"> &#39;a&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、diff算法" tabindex="-1"><a class="header-anchor" href="#_6、diff算法"><span>6、diff算法⭐</span></a></h3><p>diff算法指的就是<strong>两个虚拟DOM作比对</strong></p><p>diff 算法的核心算法流程如下：</p><ul><li><p>节点对比</p><p>如果新旧节点类型相同，则继续比较它们的属性。如果节点类型不同（如元素和文本节点不同），则直接<strong>替换</strong>整个节点。</p></li><li><p>属性更新</p><p>如果节点类型相同，接下来检查节点的属性。对于不同的属性值进行更新，移除旧属性，添加新属性。</p></li><li><p>子节点比对： 对于有子节点的元素（如 div），Vue 会使用不同的策略来优化子节点更新：</p><ul><li>文本节点的更新：如果新旧子节点都是文本节点，直接更新文本内容。</li><li>数组类型子节点的比对：如果新旧子节点都是数组，Vue 会通过 <code>LIS 算法</code> 来优化节点的重新排列，避免过多的 DOM 操作。</li></ul></li></ul><h4 id="vue3-diff-算法做了哪些优化" tabindex="-1"><a class="header-anchor" href="#vue3-diff-算法做了哪些优化"><span><strong>Vue3 diff 算法做了哪些优化</strong></span></a></h4><ul><li><p>静态标记与动态节点的区分</p><p>Vue3引入了 <code>静态标记（Static Marking）</code> 机制，通过在模板编译阶段为静态节点添加标记，避免了对这些节点的重复比较。这使得Vue3能够更高效地处理静态内容，减少不必要的DOM操作。</p></li><li><p>双端对比策略</p><p>Vue3的Diff算法采用了双端对比策略，即从新旧节点的头部和尾部同时开始比较，快速定位无序部分。这种策略显著减少了全量对比的复杂度，提升了性能。</p></li><li><p>最长递增子序列（LIS）优化</p><p>在处理节点更新时，Vue3利用最长递增子序列（LIS）算法来优化对比流程。通过找到新旧节点之间的最长递增子序列，Vue3可以减少不必要的DOM操作，从而提高更新效率。</p></li><li><p>事件缓存与静态提升</p><p>事件缓存：Vue3将事件缓存为静态节点，避免每次渲染时重新计算事件处理逻辑，从而减少性能开销。</p><p>静态提升：对于不参与更新的元素，Vue3将其提升为静态节点，仅在首次创建时进行处理，后续不再重复计算。</p></li><li><p>类型检查与属性对比</p><p>Vue3在Diff算法中增加了类型检查和属性对比功能。如果节点类型不同，则直接替换；如果类型相同，则进一步对比节点的属性，生成更新操作。</p></li><li><p>动态插槽的优化</p><p>Vue3对动态插槽进行了优化，通过动态节点的类型化处理，进一步提升了Diff算法的效率</p></li></ul><h4 id="vue-diff-算法和-react-diff-算法的区别" tabindex="-1"><a class="header-anchor" href="#vue-diff-算法和-react-diff-算法的区别"><span><strong>Vue diff 算法和 React diff 算法的区别</strong></span></a></h4><p>Vue 和 React 的 diff 算法核心目标相同：<strong>高效地找出虚拟 DOM (Virtual DOM) 树的变化，并将最小变更应用到真实 DOM 上</strong>。</p><h5 id="diff-策略的核心思想" tabindex="-1"><a class="header-anchor" href="#diff-策略的核心思想"><span><strong>Diff 策略的核心思想</strong></span></a></h5><p><strong>React (Fiber 架构之后):</strong></p><ul><li><strong>基于链表结构的递归协调</strong>: 使用 Fiber 节点构成的链表树结构。</li><li>启发式算法 (Heuristic O(n) Algorithm): 遵循两个核心假设： <ol><li><strong>不同类型的元素会产生不同的树</strong>: 如果根节点类型不同（如从 <code>&lt;div&gt;</code> 变成 <code>&lt;span&gt;</code>），React 会直接销毁整棵旧子树并重建新子树。</li><li><strong>开发者可以通过 <code>key</code> prop 暗示哪些子元素在不同渲染下保持稳定</strong>: 在同层级子节点列表比较时，<code>key</code> 帮助 React 识别节点的移动、添加或删除。</li></ol></li><li><strong>逐层比较 (Level by Level)</strong>: 只比较同层级的节点，不会尝试跨层级移动节点（除非销毁重建）。这是其 O(n) 复杂度的基础。</li></ul><p><strong>Vue (2.x &amp; 3.x):</strong></p><ul><li><p>也基于 O(n) 的启发式算法: <strong>同样遵循“不同类型元素产生不同树”和“<code>key</code> 标识稳定节点”的原则</strong>。</p></li><li><p>更积极的同层级节点比较策略 (Vue 2 双端比较):</p><ul><li><p><strong>Vue 的双端对比策略</strong></p><p>分四步优化对比效率（Vue2 核心逻辑，Vue3 优化为最长递增子序列）：</p><ol><li><strong>头头对比</strong>：新旧头指针节点相同则复用，指针后移</li><li><strong>尾尾对比</strong>：新旧尾指针节点相同则复用，指针前移</li><li><strong>头尾交叉对比</strong>：旧头 vs 新尾，旧尾 vs 新头</li><li><strong>中间乱序对比</strong>：建立 key-index 映射表，复用可匹配节点</li></ol><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 旧列表：[A, B, C, D]</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 新列表：[D, A, B, C]</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Vue 通过步骤3头尾对比，仅移动 D 到头部</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 2: 在同层级子节点列表比较时，采用 “<strong>双端比较</strong>” (Double-end Diff) 算法。它会同时从新旧子节点列表的头（<code>oldStartIdx</code>, <code>newStartIdx</code>）和尾（<code>oldEndIdx</code>, <code>newEndIdx</code>） 开始向中间遍历比较。这种策略能更高效地识别出头尾节点相同但位置移动的情况（如列表反转），减少不必要的 DOM 操作。</p></li><li><p>Vue 3: 在双端比较的基础上，进行了重大优化，引入了 “<strong>最长递增子序列” (Longest Increasing Subsequence - LIS) 算法</strong>。在双端比较无法处理的中间节点乱序移动场景下（如 <code>[A, B, C, D]</code> -&gt; <code>[D, A, B, C]</code>），<strong>Vue 3 会利用 LIS 算法找出新列表中相对顺序保持不变的、最长的一组节点</strong>。这样就能最小化移动节点的次数，仅移动那些不在最长稳定序列中的节点。这是 Vue 3 diff 性能提升的关键点之一。</p></li></ul></li></ul><h5 id="组件粒度更新" tabindex="-1"><a class="header-anchor" href="#组件粒度更新"><span><strong>组件粒度更新</strong></span></a></h5><p><strong>React:</strong></p><ul><li>默认情况下，<strong>父组件更新会导致所有子组件递归更新 (除非使用 <code>React.memo</code>, <code>shouldComponentUpdate</code>, <code>PureComponent</code> 或 <code>useMemo</code> 进行手动优化)。</strong> 即使子组件的 props 没有变化，其 <code>render</code> 函数也会被调用（生成新的 VNode），然后进入 diff 过程。虽然 diff 可能判断出 DOM 无需更新，但生成 VNode 和 diff 本身也是有成本的。</li><li>需要开发者显式优化: 性能优化很大程度上依赖于开发者手动实现 <code>shouldComponentUpdate</code> 或使用 <code>React.memo</code> 等来阻止不必要的子组件渲染和 diff。</li></ul><p><strong>Vue:</strong></p><ul><li><strong>响应式系统驱动的细粒度更新</strong>: <ul><li>Vue 2: 每个组件实例对应一个 Watcher。当响应式数据变化时，会通知对应的 Watcher，触发组件更新。子组件只在其依赖的 props 或自身状态变化时才会更新。</li><li>Vue 3: 引入了基于 Proxy 的响应式系统和 <code>effect</code> 跟踪。更新粒度更细，组件更新只依赖于其实际使用的响应式数据。如果父组件更新但传递给子组件的 props 没有变化（或子组件没有使用变化的父级数据），子组件通常不会更新。</li></ul></li><li>编译时优化辅助: Vue 的模板编译器<strong>在编译阶段就能分析出模板中哪些部分是动态的（依赖响应式数据）</strong>。<strong>结合响应式系统，这使得 Vue 在组件更新层面通常比 React 更“智能”和“自动”，减少了不必要的子组件 diff。</strong></li></ul><h5 id="静态内容优化" tabindex="-1"><a class="header-anchor" href="#静态内容优化"><span><strong>静态内容优化</strong></span></a></h5><p><strong>React:</strong></p><ul><li><p><strong>手动控制更新</strong>： 需通过 <code>React.memo</code>、<code>shouldComponentUpdate</code> 或 <code>useMemo</code> 避免无效渲染</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> MemoComp</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">memo</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Static Content</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong>Vue:</strong></p><ul><li>强大的编译时优化: <ul><li><strong>静态提升 (Static Hoisting)</strong>: Vue 的模板编译器在编译阶段会将纯静态节点（及其子树）提取到 <code>render</code> 函数外部。这些静态节点对应的 VNode 只会在应用初始化时创建一次，后续更新时直接复用，避免了重复创建 VNode 和 diff 的成本。</li><li><strong>静态子树标记 (Vue 2) / Block Tree (Vue 3)</strong>: <ul><li>Vue 2: 在 diff 过程中，遇到标记为 <code>static</code> 的节点/子树会直接跳过其内部 diff。</li><li>Vue 3: 引入了更先进的 Block Tree 概念。一个 “Block” 是一个动态节点的容器（根通常是模板中的 <code>v-if</code>/<code>v-for</code>/根节点）。编译器会分析出哪些节点是动态的，哪些是静态的，并建立父子 Block 的依赖关系。在更新时： <ul><li>如果一个 Block 的结构指令条件（如 <code>v-if</code> 的值）没有改变，且其内部的动态节点没有变化（通过 <code>patchFlag</code> 判断），那么整个 Block 及其包含的所有静态内容都可以被跳过 diff。</li><li>这大幅减少了需要 diff 的节点数量，尤其对于包含大量静态内容但只有小部分动态内容的组件。</li></ul></li></ul></li></ul></li></ul><h5 id="动态节点更新优化-vue-3-特有" tabindex="-1"><a class="header-anchor" href="#动态节点更新优化-vue-3-特有"><span><strong>动态节点更新优化 (Vue 3 特有)</strong></span></a></h5><p><strong>Vue 3:</strong></p><ul><li><strong>Patch Flags (补丁标志)</strong>: 编译器在生成 VNode 时，会为动态节点打上 <code>patchFlag</code>。这个标志是一个位掩码，精确指示了该节点哪些部分需要被更新（例如：<code>1</code> 表示文本内容变化，<code>2</code> 表示 class 变化，<code>4</code> 表示 style 变化，<code>8</code> 表示 props 变化等等）。</li><li>作用: 在 <code>patch</code> (更新真实 DOM) 阶段**，运行时可以直接根据 <code>patchFlag</code> 精准定位需要更新的部分**，跳过对其他属性的不必要检查和更新。例如，如果 <code>patchFlag</code> 是 <code>1</code>，就只更新 <code>textContent</code>，完全不需要检查或更新 <code>class</code>, <code>style</code>, <code>props</code>。这显著提升了更新动态节点的效率。</li></ul><p><strong>React:</strong></p><p>**没有直接等效的机制。**在 diff VNode 属性时，需要比较新旧 props 对象的所有键值对（虽然 React 内部也有一些优化，但不如 <code>patchFlag</code> 直接和高效）。</p><h5 id="总结对比表" tabindex="-1"><a class="header-anchor" href="#总结对比表"><span><strong>总结对比表</strong></span></a></h5><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">React (Fiber)</th><th style="text-align:left;">Vue 2</th><th style="text-align:left;">Vue 3 (核心优势)</th></tr></thead><tbody><tr><td style="text-align:left;">核心 Diff 策略</td><td style="text-align:left;">同层级递归比较 (逐层)</td><td style="text-align:left;">同层级比较 + 双端比较</td><td style="text-align:left;">同层级比较 + 双端比较 + LIS 算法</td></tr><tr><td style="text-align:left;">组件更新粒度</td><td style="text-align:left;">默认递归更新子组件 (需手动优化)</td><td style="text-align:left;">响应式依赖追踪 (子组件按需更新)</td><td style="text-align:left;">响应式依赖追踪 + 更细粒度 effect</td></tr><tr><td style="text-align:left;">静态内容优化</td><td style="text-align:left;">运行时 diff 快 (但需生成 VNode)</td><td style="text-align:left;">静态子树标记 (跳过 diff)</td><td style="text-align:left;">静态提升 + Block Tree (跳过 VNode 生成和 diff)</td></tr><tr><td style="text-align:left;">动态节点优化</td><td style="text-align:left;">无特殊机制</td><td style="text-align:left;">无特殊机制</td><td style="text-align:left;">Patch Flags (精准更新)</td></tr><tr><td style="text-align:left;">节点移动优化</td><td style="text-align:left;">依赖 <code>key</code>，同层级顺序调整效率一般</td><td style="text-align:left;">依赖 <code>key</code>，双端比较优化头尾移动</td><td style="text-align:left;">依赖 <code>key</code>，LIS 算法优化乱序移动</td></tr><tr><td style="text-align:left;">设计侧重点</td><td style="text-align:left;">运行时优化，灵活性高</td><td style="text-align:left;">响应式 + 编译时辅助</td><td style="text-align:left;">强大的编译时优化 + 响应式</td></tr><tr><td style="text-align:left;">开发者优化负担</td><td style="text-align:left;">较高 (需主动使用 <code>memo</code>, <code>useMemo</code> 等)</td><td style="text-align:left;">较低</td><td style="text-align:left;">最低 (编译器自动优化较多)</td></tr><tr><td style="text-align:left;">适用场景</td><td style="text-align:left;">大型动态应用（需精细控制）</td><td style="text-align:left;">中小型应用（快速开发）</td><td style="text-align:left;">中小型应用（快速开发）</td></tr></tbody></table><h5 id="核心结论" tabindex="-1"><a class="header-anchor" href="#核心结论"><span><strong>核心结论</strong></span></a></h5><ul><li>React: 更注重<strong>运行时</strong>的灵活性和通用性（JSX 赋予了极大灵活性），其 diff 策略相对基础。性能优化很大程度上依赖开发者手动干预（<code>key</code>, <code>memo</code>, <code>useMemo</code>, <code>useCallback</code>）。</li><li>Vue (尤其是 Vue 3): 充分利用<strong>编译时</strong>信息进行激进优化（静态提升、Block Tree、Patch Flags），结合响应式系统实现更细粒度的自动更新。其 diff 算法（特别是同层级列表的 LIS 优化）在处理节点移动和动态更新上效率更高，且减少了对开发者手动优化的依赖。Vue 的设计哲学倾向于“开箱即用”的性能。</li></ul><h3 id="_7、模板编译" tabindex="-1"><a class="header-anchor" href="#_7、模板编译"><span>7、模板编译⭐</span></a></h3><p>Vue 的模板编译过程是将开发者编写的 <code>.vue</code> 单文件组件中的 <code>&lt;template&gt;</code> 部分（或独立的 HTML 模板字符串）<strong>转换</strong>成浏览器能够执行的 <strong>JavaScript 渲染函数 (<code>render</code> 函数)</strong> 的过程。</p><p>它主要分为三个阶段：<strong>模板解析</strong>、<strong>AST优化</strong> 和 <strong>代码生成</strong>：</p><h4 id="_1-模板解析" tabindex="-1"><a class="header-anchor" href="#_1-模板解析"><span>1.模板解析</span></a></h4><p>Vue 使用其解析器将 HTML 模板转换为 <strong>抽象语法树（AST）</strong>。在这个阶段，Vue 会分析模板中的标签、属性和指令，生成一棵树形结构。每个节点表示模板中的一个元素或属性。</p><p>如：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ message }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> v-on</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;handleClick&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">点击</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被解析成的 AST 类似于下面的结构：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    type</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 节点类型：1 表示元素节点</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    tag</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;div&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 元素的标签名</span></span></span>
<span class="line"><span class="line"><span style="color:#C8C8C8;">    children</span><span style="color:#D4D4D4;">: [ </span><span style="color:#6A9955;">// 子节点（嵌套的 HTML 元素）</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            type:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 子节点是一个元素节点</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            tag:</span><span style="color:#CE9178;"> &#39;p&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            children:</span><span style="color:#D4D4D4;"> [{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                type:</span><span style="color:#B5CEA8;"> 2</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 2 表示插值表达式节点</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                expression:</span><span style="color:#CE9178;"> &#39;message&#39;</span><span style="color:#6A9955;"> // 表达式 &#39;message&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            type:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 另一个元素节点</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            tag:</span><span style="color:#CE9178;"> &#39;button&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            events:</span><span style="color:#D4D4D4;"> { </span><span style="color:#6A9955;">// 事件监听</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                click:</span><span style="color:#CE9178;"> &#39;handleClick&#39;</span><span style="color:#6A9955;"> // 绑定 click 事件，执行 handleClick 方法</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            children:</span><span style="color:#D4D4D4;"> [{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                type:</span><span style="color:#B5CEA8;"> 3</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 文本节点</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                text:</span><span style="color:#CE9178;"> &#39;点击&#39;</span><span style="color:#6A9955;"> // 按钮文本</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-ast优化" tabindex="-1"><a class="header-anchor" href="#_2-ast优化"><span>2.AST优化</span></a></h4><p>Vue 在生成渲染函数前，会对 AST 进行优化。优化的核心目标是标记 <strong>静态节点</strong>，在渲染时，Vue 可以跳过这些静态节点，提升性能。</p><blockquote><p><strong>静态节点</strong>指所有的渲染过程中都不变化的内容，比如 <code>某个div标签内的静态文本</code></p></blockquote><p><strong>Vue 3 增强优化：</strong> Vue 3 引入了更激进的编译时优化，如：</p><ul><li><strong>静态提升 (Static Hoisting)：</strong> 将静态节点对应的 VNode 创建函数提升到 <code>render</code> 函数外部，只在应用初始化时执行一次，避免每次 <code>render</code> 调用时重复创建相同的 VNode。</li><li><strong>补丁标志 (Patch Flags)：</strong> 在动态节点上标记其需要更新的类型（如 <code>TEXT</code>, <code>CLASS</code>, <code>PROPS</code> 等），使运行时 <code>diff</code> 过程可以跳过对该节点不必要的检查，直接定位到需要更新的部分。</li><li><strong>缓存事件处理函数 (Cache Event Handlers)：</strong> 避免内联事件处理函数造成不必要的子组件更新。</li></ul><h4 id="_3-代码生成" tabindex="-1"><a class="header-anchor" href="#_3-代码生成"><span>3.代码生成</span></a></h4><p>生成渲染函数是编译的最终阶段，这个阶段会将优化后的 AST 转换成 JavaScript 渲染函数。</p><ul><li>深度遍历 AST。</li><li>根据节点的类型（元素、文本、插值、指令等），拼接生成对应的 JavaScript 代码片段： <ul><li>元素节点：生成调用 <code>_createElementVNode</code> (Vue 3) 或 <code>_c</code> (Vue 2) 函数的代码，传入标签名、属性对象（包含处理好的指令、事件、props 等）、子节点数组。</li><li>文本节点：生成调用 <code>_createTextVNode</code> (Vue 3) 或 <code>_v</code> (Vue 2) 函数的代码。</li><li>插值表达式：生成访问对应组件实例 <code>data</code> 或 <code>props</code> 中属性的代码，并包装在文本 VNode 创建函数中。</li><li>指令（<code>v-if</code>, <code>v-for</code>）：生成相应的条件判断（三元表达式或 <code>if</code> 语句）或循环（<code>map</code>）逻辑代码。</li></ul></li><li>将所有片段组合成一个完整的 JavaScript 函数字符串。</li></ul><p>例如，像这样的模板：</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;app&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ message }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最终会生成类似这样的渲染函数：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> render</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> createVNode</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">    &#39;div&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      id:</span><span style="color:#CE9178;"> &#39;app&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#DCDCAA;">createTextVNode</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  )</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染函数的返回值是一个 <code>虚拟 DOM（VDOM）树</code> ，Vue 会根据 <code>虚拟 DOM</code> 来更新实际的 <code>DOM</code> 。由于 <code>渲染函数</code> 被 Vue 的响应式系统包裹，当数据发生变化时，渲染函数会被重新执行生成新的虚拟 DOM，因此页面也会实时更新。</p><h3 id="_8、vue整体实现流程" tabindex="-1"><a class="header-anchor" href="#_8、vue整体实现流程"><span>8、Vue整体实现流程⭐</span></a></h3><p><strong>1、组件实例创建</strong></p><p>当我们第一次访问页面时，Vue创建组件实例，解析<code>props</code>、<code>data</code>、<code>methods</code>等属性方法，在组合式API中，执行 <code>setup()</code>。</p><p><strong>2、响应式系统建立</strong></p><p>基于 <code>Proxy</code> 实现 <code>reactive</code>、<code>ref</code>，建立依赖收集和触发更新机制，<code>props</code> 传递时自动响应式处理。</p><p><strong>3、模板编译与渲染</strong></p><p>将 template 编译为渲染函数，Vue 3 通过 静态提升等方式优化性能，Vite 预编译 <code>SFC（单文件组件）</code>。</p><p><strong>4、DOM 挂载</strong></p><p>执行渲染函数生成 VNode，通过 <code>Patch 算法</code> 转换为真实 DOM 并插入页面，同时初始化子组件。<code>mounted（Options API</code>）或 <code>onMounted（Composition API）</code>触发，可进行 DOM 操作。</p><p><strong>5、响应式更新</strong></p><p>状态变更触发 <code>Diff</code> 算法 计算最小 DOM 更新，<code>beforeUpdate</code>、<code>updated（Options API）</code>或 <code>onBeforeUpdate</code>、<code>onUpdated（Composition API）</code>执行相应逻辑。</p><p><strong>6、组件销毁</strong></p><p>移除 DOM，清理副作用（解绑事件、销毁 <code>watcher</code>、清理 <code>effect</code>），递归卸载子组件，触发 <code>beforeUnmount</code>、<code>unmounted（Options API）</code>或 <code>onBeforeUnmount</code>、<code>onUnmounted（Composition API）</code>。</p><h2 id="三、vue3学习" tabindex="-1"><a class="header-anchor" href="#三、vue3学习"><span>三、Vue3学习</span></a></h2><h3 id="_1、vue2-x-有哪些不足" tabindex="-1"><a class="header-anchor" href="#_1、vue2-x-有哪些不足"><span>1、vue2.x 有哪些不足</span></a></h3><ul><li>vue2.x<strong>对数组对象的深层监听无法实现</strong>。因为组件每次渲染都是将data里的数据通过Object.defineProperty进行响应式或者双向绑定上，<strong>无法监听新增/删除属性</strong>，后加的属性是不会被绑定上，也就不会触发更新渲染。</li><li>vue2.x在模板编译过程中会涉及到许多不必要的CPU工作。</li><li>随着功能的增长，复杂组件的代码变得难以维护。</li><li>vue2.x是采用Facebook的Flow做类型检查，但在某些情况下推断有问题，且对typescript支持不太友好（需要使用一堆装饰器语法）。</li></ul><h3 id="_2、vue2和vue3的区别-vue3比vue2有什么优势" tabindex="-1"><a class="header-anchor" href="#_2、vue2和vue3的区别-vue3比vue2有什么优势"><span>2、Vue2和Vue3的区别（Vue3比Vue2有什么优势）⭐</span></a></h3><h4 id="源码优化" tabindex="-1"><a class="header-anchor" href="#源码优化"><span>源码优化</span></a></h4><ul><li>更好的代码管理方式：monorepo 根据功能将不同的模块拆分到packages目录下不同的子目录中。这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性。</li><li>采用typescript开发，也省去了单独维护d.ts文件的麻烦。</li></ul><h4 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化⭐</span></a></h4><ul><li><strong>源码体积优化</strong>：移除了一些冷门的feature（比如filter、inline-template等），引入tree-shaking技术减少打包体积。</li><li><strong>数据劫持优化</strong>：使用Proxy代替vue2.x中的defineProperty，能够深层监听数组对象的变化。</li><li><strong>编译优化</strong>：检测出模板中的静态节点、子树甚至数据对象，并在生成的代码中将它们提升到渲染函数之外。这样可以避免在每次渲染时重新创建这些对象，从而大大提高内存使用率并减少垃圾回收的频率。</li><li><strong>语法API优化</strong>：推出composition API优化逻辑组合和优化逻辑复用。使用 <code>setup()</code> 方法代替了部分选项式 API，通过函数的方式组织逻辑，代码更加清晰简洁。</li><li><strong>虚拟 DOM 重构</strong>：Vue3的虚拟DOM采用了更高效的 <code>Diff算法</code>，减少了渲染和更新的开销。</li></ul><h4 id="新特性和改进" tabindex="-1"><a class="header-anchor" href="#新特性和改进"><span><strong>新特性和改进</strong></span></a></h4><ul><li><strong>Teleport</strong>：可以将组件的DOM渲染到指定的DOM节点之外，例如模态框、通知等。</li><li><strong>Fragment 支持</strong>：Vue3支持组件返回多个根节点，不再需要单一根节点。</li><li>Vue3原生支持 <code>TypeScript</code>，提供更完善的类型推导和开发体验。</li><li>Vue3支持为一个组件绑定多个 <code>v-model</code>，并且可以自定义 <code>prop</code> 和 <code>event</code> 名称。</li></ul><h3 id="_3、vue3生命周期" tabindex="-1"><a class="header-anchor" href="#_3、vue3生命周期"><span>3、Vue3生命周期</span></a></h3><h4 id="options-api生命周期" tabindex="-1"><a class="header-anchor" href="#options-api生命周期"><span>Options API生命周期</span></a></h4><ul><li><p>beforeDestory改为beforeUnmount</p></li><li><p>destoryed改为unmounted</p></li><li><p>其他沿用vue2的生命周期</p></li></ul><h4 id="composition-api生命周期" tabindex="-1"><a class="header-anchor" href="#composition-api生命周期"><span>Composition API生命周期</span></a></h4><table><thead><tr><th>Options API</th><th>setup内部的钩子</th></tr></thead><tbody><tr><td>beforeCreate</td><td>不需要</td></tr><tr><td>created</td><td>不需要</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>renderTriggered</td><td>onRenderTriggered</td></tr></tbody></table><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">onBeforeMount</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onMounted</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onBeforeUpdate</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onUpdated</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onBeforeUnmount</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onUnmounted</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 等于 beforeCreate 和 created</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setup</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;setup&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onBeforeMount</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;onBeforeMount&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onMounted</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;onMounted&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onBeforeUpdate</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;onBeforeUpdate&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onUpdated</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;onUpdated&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onBeforeUnmount</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;onBeforeUnmount&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onUnmounted</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;onUnmounted&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何选择" tabindex="-1"><a class="header-anchor" href="#如何选择"><span>如何选择</span></a></h4><ul><li>不建议共用，会引起混乱</li><li>小型项目、业务逻辑简单，用Options API</li><li>中大型项目、业务逻辑复杂，用Composition API</li></ul><h3 id="_4、composition-api-组合式api-的使用" tabindex="-1"><a class="header-anchor" href="#_4、composition-api-组合式api-的使用"><span>4、Composition API（组合式API）的使用</span></a></h3><h4 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>setup()</span></a></h4><h5 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h5><p><code>setup()</code> 钩子是在组件中使用组合式 API 的入口</p><p>我们可以使用<a href="https://cn.vuejs.org/api/reactivity-core.html" target="_blank" rel="noopener noreferrer">响应式 API</a> 来声明响应式的状态，在 <code>setup()</code> 函数中返回的对象会暴露给模板和组件实例。其他的选项也可以通过组件实例来获取 <code>setup()</code> 暴露的属性：</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setup</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 返回值会暴露给模板和其他的选项式 API 钩子</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      count</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  mounted</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 0</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;count++&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ count }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="script-setup" tabindex="-1"><a class="header-anchor" href="#script-setup"><span><code>&lt;script setup&gt;</code></span></a></h5><p>在 <code>setup()</code> 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html" target="_blank" rel="noopener noreferrer">单文件组件 (SFC)</a> 来避免这种情况。我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码：</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;increment&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {{ count }}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="访问props" tabindex="-1"><a class="header-anchor" href="#访问props"><span>访问props</span></a></h5><p><code>setup</code> 函数的第一个参数是组件的 <code>props</code>。和标准的组件一致，一个 <code>setup</code> 函数的 <code>props</code> 是响应式的，并且会在传入新的 props 时同步更新。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  props:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    title:</span><span style="color:#9CDCFE;"> String</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setup</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意如果你解构了 <code>props</code> 对象，解构出的变量将会丢失响应性。因此我们推荐通过 <code>props.xxx</code> 的形式来使用其中的 props。</p><p><strong>PS：在最新版本v3.5中，响应式props已支持解构</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;"> name</span><span style="color:#569CD6;"> }</span><span style="color:#D4D4D4;"> = defineProps(</span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">console.log(name);</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="script-setup-中访问props" tabindex="-1"><a class="header-anchor" href="#script-setup-中访问props"><span><strong><code>&lt;script setup&gt;</code>中访问props</strong></span></a></h5><p><code>defineProps</code> 是一个仅 <code>&lt;script setup&gt;</code> 中可用的编译宏命令，并不需要显式地导入。声明的 props 会自动暴露给模板。<code>defineProps</code> 会返回一个对象，其中包含了可以传递给组件的所有 props：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    import </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onMounted</span><span style="color:#569CD6;"> }</span><span style="color:#D4D4D4;"> from &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    const props = defineProps([&#39;title&#39;])</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    onMounted(() =&gt; </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    }</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">h4</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ title }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h4</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://cn.vuejs.org/guide/components/props.html#prop-validation" target="_blank" rel="noopener noreferrer">props校验</a></p><h5 id="setup-上下文" tabindex="-1"><a class="header-anchor" href="#setup-上下文"><span>Setup 上下文</span></a></h5><p>传入 <code>setup</code> 函数的第二个参数是一个 <strong>Setup 上下文</strong>对象。上下文对象暴露了其他一些在 <code>setup</code> 中可能会用到的值：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setup</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 透传 Attributes（非响应式的对象，等价于 $attrs）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">attrs</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 插槽（非响应式的对象，等价于 $slots）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">slots</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 触发事件（函数，等价于 $emit）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">emit</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 暴露公共属性（函数）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">expose</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该上下文对象是非响应式的，可以安全地解构</p><h4 id="computed" tabindex="-1"><a class="header-anchor" href="#computed"><span>computed</span></a></h4><p>接受一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get#description" target="_blank" rel="noopener noreferrer">getter 函数</a>，返回一个只读的响应式 <a href="https://cn.vuejs.org/api/reactivity-core.html#ref" target="_blank" rel="noopener noreferrer">ref</a> 对象。该 ref 通过 <code>.value</code> 暴露 getter 函数的返回值。</p><p>computed的优点，可动态返回一个响应式对象，并且不用显式声明依赖的可监听对象。</p><p>创建一个只读的计算属性 ref：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> plusOne</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">computed</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">plusOne</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 2</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">plusOne</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++ </span><span style="color:#6A9955;">// 错误</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个可写的计算属性 ref：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> plusOne</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">computed</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  get</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  set</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">plusOne</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 0</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="侦听器" tabindex="-1"><a class="header-anchor" href="#侦听器"><span>侦听器</span></a></h4><h5 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h5><p><code>watch</code> 的第一个参数可以是不同形式的“数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get#description" target="_blank" rel="noopener noreferrer">getter 函数</a>、或多个数据源组成的数组</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">someObject</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldValue</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 注意：\`newValue\` 此处和 \`oldValue\` 是相等的</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // *除非* state.someObject 被整个替换了</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  { </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      immediate:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,	</span><span style="color:#6A9955;">// 立即执行</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      deep:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,	</span><span style="color:#6A9955;">// 深度监听</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      once:</span><span style="color:#569CD6;"> false</span><span style="color:#6A9955;">   // 希望回调只在源变化时触发一次，可使用 once: true 选项</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>侦听单个ref</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">watch</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> question</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">question</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">newQuestion</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldQuestion</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ref watch&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newQuestion</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldQuestion</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>侦听getter 函数</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> x</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> y</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`sum of x + y is: </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">sum</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>侦听多个来源组成的数组</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> x</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> y</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> y</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">], ([</span><span style="color:#9CDCFE;">newX</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newY</span><span style="color:#D4D4D4;">]) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`x is </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">newX</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> and y is </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">newY</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：不能直接侦听响应式对象的属性值，需要用一个返回该属性的 getter 函数</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 错误，因为 watch() 得到的参数是一个 number</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`Count is: </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 提供一个 getter 函数</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`Count is: </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="watcheffect" tabindex="-1"><a class="header-anchor" href="#watcheffect"><span>watchEffect</span></a></h5><p>立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> numberRef</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;ccc&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 20</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watchEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 初始化时，一定会执行一次（收集要监听的数据）</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;state.age&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;state.name&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="watch和watcheffect的区别是什么" tabindex="-1"><a class="header-anchor" href="#watch和watcheffect的区别是什么"><span>watch和watchEffect的区别是什么⭐</span></a></h5><ul><li><strong>依赖追踪方式</strong></li></ul><p><code>watch</code> ：需要<strong>显式声明依赖</strong>，监听指定的数据源；可以监听多个数据源或进行深度监听。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">watch</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reactive</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 显式声明监听的依赖</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">newCount</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldCount</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`新值 </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">newCount</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> 老值 </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">oldCount</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>watchEffect</code> ：会<strong>自动追踪</strong> <strong>作用域内所有的响应式依赖</strong>，不需要显式声明依赖。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">watchEffect</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reactive</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">watchEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`Count 变化了: </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 自动追踪 \`state.count\`</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>执行时机</strong></li></ul><p><code>watch</code> ：在监听的响应式数据变化后立即执行。</p><p><code>watchEffect</code> ：在 <strong>组件挂载时</strong> 执行一次副作用，并在 <strong>依赖发生变化时</strong> 再次执行。</p><ul><li><strong>适用场景</strong></li></ul><p><code>watch</code> ：适用于 <strong>监听特定数据</strong> 变化并执行副作用的场景，如 API 请求、保存操作等。适合需要 <strong>访问新值和旧值</strong> 进行比较的场景。</p><p><code>watchEffect</code> ：不需要访问旧值，适用于 <strong>自动追踪多个响应式依赖</strong> 的副作用，如渲染、自动保存等。</p><h4 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式"><span>响应式</span></a></h4><h5 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref⭐</span></a></h5><p><strong>ref的实现：</strong> 为了实现基本数据类型的响应式，Vue 设计了 <code>ref</code> 。 <code>ref</code> 会将基本数据类型封装为一个包含 <code>value</code> 属性的对象，通过 <code>getter</code> 和 <code>setter</code> 实现响应式依赖追踪和更新。当访问或修改 <code>ref.value</code> 时，Vue 内部会触发依赖更新。此外，对于复杂数据类型（如对象或数组）， <code>ref</code> 的内部实现会直接调用 <code>reactive</code> ，将复杂数据类型变为响应式。</p><ul><li><p>在组合式 API 中，推荐使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#ref" target="_blank" rel="noopener noreferrer"><code>ref()</code></a> 函数来声明响应式状态</p></li><li><p><code>ref()</code> 接收参数，并将其包裹在一个带有 <code>.value</code> 属性的 ref 对象中返回</p></li><li><p>在模板中使用 ref 时，我们<strong>不需要</strong>附加 <code>.value</code>。为了方便起见，当在模板中使用时，ref 会自动解包。</p></li></ul><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // \`setup\` 是一个特殊的钩子，专门用于组合式 API。</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setup</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 将 ref 暴露给模板</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      count</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ count }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>深层响应式</strong></p><p>Ref 可以持有任何类型的值，包括深层嵌套的对象、数组或者 JavaScript 内置的数据结构，比如 <code>Map</code>。</p><p>Ref 会使它的值具有深层响应性。这意味着即使改变嵌套对象或数组时，变化也会被检测到</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  nested:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> },</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  arr:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;bar&#39;</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> mutateDeeply</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 以下都会按照期望工作</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">nested</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;baz&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非原始值将通过 <a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#reactive" target="_blank" rel="noopener noreferrer"><code>reactive()</code></a> 转换为响应式代理</p><p>也可以通过 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref" target="_blank" rel="noopener noreferrer">shallow ref</a> 来放弃深层响应性。对于浅层 ref，只有 <code>.value</code> 的访问会被追踪。</p><p><strong>ref使用场景</strong></p><ul><li><p>当你需要处理单一的数据项，比如一个状态变量，如用户是否登录的状态。</p></li><li><p>当你需要在模板中使用一个 DOM 元素或组件实例的引用时，可以使用 <code>ref</code> 关联一个元素或组件。</p></li><li><p>当你处理的是嵌套不深的对象或数组，特别是当对象或数组本身不需要进一步响应式处理时。</p></li></ul><p><strong>为何 ref 需要 value 属性</strong></p><p>Vue 3 中， <code>ref</code> 之所以需要 <code>.value</code> 属性，主要是因为 Vue 3 使用 <code>Proxy</code> 实现响应式。</p><p><code>Proxy</code> 对对象或数组的每个属性进行深度代理，因此可以追踪嵌套属性的变化。而 <strong><code>Proxy</code> 无法直接处理基本数据类</strong>型（如 <code>number</code> 、 <code>string</code> 、 <code>boolean</code> ），这使得 <code>reactive</code> 无法用于基本数据类型。</p><p><strong>为了实现基本数据类型的响应式</strong>，Vue 设计了 <code>ref</code> ，它将基本数据类型封装为一个包含 <code>value</code> 属性的对象，并通过 <code>getter</code> 和 <code>setter</code> 进行依赖追踪和更新。当访问或修改 <code>ref.value</code> 时，Vue 会触发依赖更新。</p><h5 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive"><span>reactive⭐</span></a></h5><p><strong>reactive的实现：</strong><code>reactive</code> 通过 <code>Proxy</code> 对对象或数组的每个属性进行深度代理，实现响应式。这种设计使得 <code>reactive</code> 能自动追踪所有嵌套属性的变化，但由于 <code>Proxy</code> 无法直接处理基本数据类型（如 <code>number</code> 、 <code>string</code> 、 <code>boolean</code> ），因此， <code>reactive</code> 不适用于基本数据类型。</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">reactive</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setup</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      state</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;state.count++&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      {{ state.count }}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：当 ref 作为响应式数组或原生集合类型 (如 <code>Map</code>) 中的元素被访问时，它不会被解包</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> books</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">([</span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Vue 3 Guide&#39;</span><span style="color:#D4D4D4;">)])</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 这里需要 .value</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">books</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> map</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#D4D4D4;">([[</span><span style="color:#CE9178;">&#39;count&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)]]))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 这里需要 .value</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;count&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>reactive()</code> 的局限性</strong></p><ol><li><p><strong>有限的值类型</strong>：它只能用于对象类型 (对象、数组和如 <code>Map</code>、<code>Set</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections" target="_blank" rel="noopener noreferrer">集合类型</a>)。它不能持有如 <code>string</code>、<code>number</code> 或 <code>boolean</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">原始类型</a>。</p></li><li><p><strong>不能替换整个对象</strong>：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 上面的 ({ count: 0 }) 引用将不再被追踪</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// (响应性连接已丢失！)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;"> })</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>对解构操作不友好</strong>：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 当解构时，count 已经与 state.count 断开连接</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">state</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 不会影响原始的 state</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 该函数接收到的是一个普通的数字</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 并且无法追踪 state.count 的变化</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 我们必须传入整个对象以保持响应性</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">callSomeFunction</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>由于这些限制，我们<strong>建议使用 <code>ref()</code> 作为声明响应式状态的主要 API</strong>。</p><p><strong>reactive使用场景</strong></p><ul><li>当你需要处理一个<strong>复杂的对象</strong>，比如包含多个属性的对象，以及这些属性可能还包含其他对象或数组（<strong>深层嵌套</strong>）。</li><li>当你需要整个对象都具有响应性，而不仅仅是某个特定的值。</li></ul><h5 id="toref" tabindex="-1"><a class="header-anchor" href="#toref"><span>toRef</span></a></h5><p>基于响应式对象上的一个属性，创建一个对应的 ref。</p><p>这样创建的 ref 与其源属性保持同步：改变源属性的值将更新 ref 的值，反之亦然。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  foo:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  bar:</span><span style="color:#B5CEA8;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 双向 ref，会与源属性同步</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> fooRef</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">toRef</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 更改该 ref 会更新源属性</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">fooRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 2</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 更改源属性也会更新该 ref</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fooRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 3</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这不同于：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> fooRef</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面这个 ref <strong>不会</strong>和 <code>state.foo</code> 保持同步，因为这个 <code>ref()</code> 接收到的是一个纯数值。</p><h5 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs"><span>toRefs</span></a></h5><p>将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的 ref。</p><p>每个单独的 ref 都是使用 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref" target="_blank" rel="noopener noreferrer"><code>toRef()</code></a> 创建的。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  foo:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  bar:</span><span style="color:#B5CEA8;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> stateAsRefs</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">toRefs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">/*</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">stateAsRefs 的类型：{</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  foo: Ref&lt;number&gt;,</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  bar: Ref&lt;number&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">*/</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 这个 ref 和源属性已经“链接上了”</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stateAsRefs</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 2</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">stateAsRefs</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 3</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用：合成函数返回响应式对象</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> useFeatureX</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        x:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        y:</span><span style="color:#B5CEA8;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 逻辑运行状态，省略N行</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 返回时转换为ref</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> toRefs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setup</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 可以在不失去响应性的情况下破坏结构</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">y</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">useFeatureX</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件上的ref" tabindex="-1"><a class="header-anchor" href="#组件上的ref"><span>组件上的Ref</span></a></h4><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onMounted</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> Child</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./Child.vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> child</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">onMounted</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // child.value 是 &lt;Child /&gt; 组件的实例</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">Child</span><span style="color:#9CDCFE;"> ref</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;child&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个子组件使用的是选项式 API 或没有使用 <code>&lt;script setup&gt;</code>，被引用的组件实例和该子组件的 <code>this</code> 完全一致，这意味着父组件对子组件的每一个属性和方法都有完全的访问权。</p><p><strong>注意</strong>：使用了 <code>&lt;script setup&gt;</code> 的组件是<strong>默认私有</strong>的：一个父组件无法访问到一个使用了 <code>&lt;script setup&gt;</code> 的子组件中的任何东西，除非子组件在其中通过 <code>defineExpose</code> 宏显式暴露</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> b</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 像 defineExpose 这样的编译器宏不需要导入</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">defineExpose</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  a</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  b</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-更新时机" tabindex="-1"><a class="header-anchor" href="#dom-更新时机"><span>DOM 更新时机</span></a></h4><p>当你修改了响应式状态时，DOM 会被自动更新。但是需要注意的是，DOM 更新不是同步的。Vue 会在“nextTick”更新周期中缓冲所有状态的修改，以确保不管你进行了多少次状态修改，每个组件都只会被更新一次。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">nextTick</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  await</span><span style="color:#DCDCAA;"> nextTick</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 现在 DOM 已经更新了</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model"><span><code>v-model</code></span></a></h4><h5 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1"><span>基本使用</span></a></h5><p>从 Vue 3.4 开始，推荐的实现方式是使用 <a href="https://cn.vuejs.org/api/sfc-script-setup.html#definemodel" target="_blank" rel="noopener noreferrer"><code>defineModel()</code></a></p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- Child.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> model</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> update</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  model</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Parent bound v-model is: {{ model }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> @click</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;update&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Increment</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- Parent.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">Child</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">countModel</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;"> /&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defineModel()</code> 返回的值是一个 ref。它可以像其他 ref 一样被访问以及修改，不过它能起到在父组件和当前变量之间的双向绑定的作用：</p><ul><li>它的 <code>.value</code> 和父组件的 <code>v-model</code> 的值同步；</li><li>当它被子组件变更了，会触发父组件绑定的值一起更新。</li></ul><h5 id="接收参数" tabindex="-1"><a class="header-anchor" href="#接收参数"><span>接收参数</span></a></h5><p>组件上的 <code>v-model</code> 也可以接受一个参数</p><p>在子组件中，我们可以通过将字符串作为第一个参数传递给 <code>defineModel()</code> 来支持相应的参数</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- MyComponent.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> title</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;title&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;title&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- Parent.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">MyComponent</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">bookTitle</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;"> /&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要额外的 prop 选项，应该在 model 名称之后传递：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> title</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;title&#39;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">required:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> })</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="底层机制" tabindex="-1"><a class="header-anchor" href="#底层机制"><span>底层机制</span></a></h5><ul><li>一个名为 <code>modelValue</code> 的 prop，本地 ref 的值与其同步；</li><li>一个名为 <code>update:modelValue</code> 的事件，当本地 ref 的值发生变更时触发。</li></ul><p>自定义实现v-model</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- Child.vue --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> props</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineProps</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;modelValue&#39;</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> emit</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineEmits</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;update:modelValue&#39;</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    :value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;modelValue&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    @input</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;emit(&#39;update:modelValue&#39;, $event.target.value)&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h4><p>解决props逐级传递的问题</p><p>一个父组件相对于其所有的后代组件，会作为<strong>依赖提供者</strong>。</p><p>任何后代的组件树，无论层级有多深，都可以<strong>注入</strong>由父组件提供给整条链路的依赖。</p><h5 id="provide-提供" tabindex="-1"><a class="header-anchor" href="#provide-提供"><span>Provide (提供)</span></a></h5><p>为组件后代提供数据</p><ul><li><p>第一个参数被称为<strong>注入名</strong>，可以是一个字符串或是一个 <code>Symbol</code>。后代组件会用注入名来查找期望注入的值。一个组件可以多次调用 <code>provide()</code>，使用不同的注入名，注入不同的依赖值。</p></li><li><p>第二个参数是提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref</p></li></ul><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">provide</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">provide</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;hello!&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="inject-注入" tabindex="-1"><a class="header-anchor" href="#inject-注入"><span>Inject (注入)</span></a></h5><p>注入上层组件提供的数据</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">inject</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> message</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">inject</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果提供的值是一个 ref，注入进来的会是该 ref 对象，而<strong>不会</strong>自动解包为其内部的值。</p><h4 id="composition-api如何实现代码逻辑复用-组合式函数" tabindex="-1"><a class="header-anchor" href="#composition-api如何实现代码逻辑复用-组合式函数"><span>Composition API如何实现代码逻辑复用（组合式函数）</span></a></h4><p>在 Vue 应用的概念中，<strong>“组合式函数”(Composables)</strong> 是一个利用 Vue 的组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数。它和自定义 <code>React hooks</code> 非常相似。</p><ul><li>抽离逻辑代码到一个函数</li><li>函数命名约定为useXxxx格式（React Hooks也是）</li><li>在setup中引用useXxxx函数</li></ul><p>例一：</p><p>useCount 是一个计数逻辑管理的组合式函数，它返回一个 <code>count</code> 变量和增加、减少、重置count的方法。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">import </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;"> ref</span><span style="color:#569CD6;"> }</span><span style="color:#D4D4D4;"> from &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">// 实现 useCount 组合式函数</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">function useCount() </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  const</span><span style="color:#9CDCFE;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  const</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  const</span><span style="color:#DCDCAA;"> decrement</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">--</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  const</span><span style="color:#DCDCAA;"> reset</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    count</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    increment</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    decrement</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    reset</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">// 使用 useCount 组合式函数</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;"> count</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">increment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">decrement</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reset</span><span style="color:#569CD6;"> }</span><span style="color:#D4D4D4;"> = useCount()</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">计数器: {{ count }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#F44747;"> @click=&quot;increment&quot;&gt;增加&lt;/button&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">    &lt;button</span><span style="color:#F44747;"> @click=&quot;decrement&quot;&gt;减少&lt;/button&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">    &lt;button</span><span style="color:#F44747;"> @click=&quot;reset&quot;&gt;重置&lt;/button&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">  &lt;/div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">&lt;/template&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例二：</p><p>使用 Vue3 Composable 组合式函数，实现 useRequest</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">computed</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> axios</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;axios&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 实现 useRequest 组合式函数</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> useRequest</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> loading</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 请求状态</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 响应数据</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> error</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 错误信息</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> fetchData</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    loading</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    error</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> axios</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">); /</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      error</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> || </span><span style="color:#CE9178;">&#39;请求失败&#39;</span><span style="color:#D4D4D4;">; /</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      loading</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 自动触发请求</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  fetchData</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    loading</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    data</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    error</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  };</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#9CDCFE;"> useRequest</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">import useRequest from &#39;./useRequest&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const url = &#39;https://www.mianshipai.com/&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;"> loading</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;"> }</span><span style="color:#D4D4D4;"> = useRequest(url)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">请求数据</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;loading&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">加载中...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-else-if</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;error&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ error }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-else</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{ data }}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组合式函数和react-hooks的对比" tabindex="-1"><a class="header-anchor" href="#组合式函数和react-hooks的对比"><span>组合式函数和React Hooks的对比⭐</span></a></h4><ul><li>前者setup只会被调用一次，而后者函数会被多次调用</li><li>前者无需useMemo useCallback，因为setup只调用一次</li><li>前者无需顾虑调用顺序，而后者需要保证hooks的顺序一致</li><li>前者 reactive+ref 比后者 useState，要难理解</li></ul><h3 id="_5、vue3升级了哪些重要的功能" tabindex="-1"><a class="header-anchor" href="#_5、vue3升级了哪些重要的功能"><span>5、vue3升级了哪些重要的功能</span></a></h3><h4 id="createapp" tabindex="-1"><a class="header-anchor" href="#createapp"><span>createApp</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// vue2.x</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Vue</span><span style="color:#D4D4D4;">({ </span><span style="color:#6A9955;">/* 选项 */</span><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">mixin</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">directive</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// vue3.x</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createApp</span><span style="color:#D4D4D4;">({ </span><span style="color:#6A9955;">/* 选项 */</span><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">mixin</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">directive</span><span style="color:#D4D4D4;">(</span><span style="color:#6A9955;">/* ... */</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="emits属性" tabindex="-1"><a class="header-anchor" href="#emits属性"><span>emits属性</span></a></h4><p>父组件</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">HelloWorld</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">msg</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">msg</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#D4D4D4;"> @</span><span style="color:#9CDCFE;">onSayHello</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">sayHello</span><span style="color:#D4D4D4;">&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>子组件</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">export default {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    name: &#39;HelloWorld&#39;,</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    props: {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    	msg: String</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	emits: [&#39;onSayHello&#39;],</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    setup(props, { emit }) {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    	emit(&#39;onSayHello&#39;, &#39;aaa&#39;)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h4><p><a href="#_3%E3%80%81vue3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">看上面</a></p><h4 id="多事件" tabindex="-1"><a class="header-anchor" href="#多事件"><span>多事件</span></a></h4><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- 在methods里定义one two两个函数--&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">button</span><span style="color:#D4D4D4;"> @</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#DCDCAA;">one</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">$event</span><span style="color:#D4D4D4;">), </span><span style="color:#DCDCAA;">two</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">$event</span><span style="color:#D4D4D4;">)</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    Submit</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fragment" tabindex="-1"><a class="header-anchor" href="#fragment"><span>Fragment</span></a></h4><p>模板中不需要再加一个div</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- vue2.x 组件模板 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{title}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-html</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;content&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- vue3 组件模板 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{title}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> v-html</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;content&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="移除-sync" tabindex="-1"><a class="header-anchor" href="#移除-sync"><span>移除.sync</span></a></h4><p>改成v-model:xx形式，都是语法糖</p><h4 id="异步组件的写法" tabindex="-1"><a class="header-anchor" href="#异步组件的写法"><span>异步组件的写法</span></a></h4><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- vue2 写法 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">new Vue({</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    // ...</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    components: {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    	&#39;my-component&#39;: () =&gt; import(&#39;./my-component.vue&#39;)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">&lt;!-- vue3 写法 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">import { createApp, defineAsyncComponent } from &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">createApp({</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	// ...</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    components: {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    	AsyncComponent: defineAsyncComponent(() =&gt; import(&#39;./my-component.vue&#39;))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="移除filter" tabindex="-1"><a class="header-anchor" href="#移除filter"><span>移除filter</span></a></h4><h4 id="teleport" tabindex="-1"><a class="header-anchor" href="#teleport"><span>Teleport⭐</span></a></h4><p><code>&lt;Teleport&gt;</code> 是一个内置组件，它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。</p><p>示例：将组件加载到body上</p><p><code>to=&quot;body&quot;</code> 加到body里面</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">button</span><span style="color:#D4D4D4;"> @</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">modalOpen</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    Open full screen modal! (with teleport)</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">teleport</span><span style="color:#9CDCFE;"> to</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;body&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	&lt;div v-if=&quot;modalOpen&quot;&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        &lt;div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            &lt;button @click=&quot;modalOpen = false&quot;&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                Close</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            &lt;/button&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        &lt;/div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;/div&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">teleport</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="suspense" tabindex="-1"><a class="header-anchor" href="#suspense"><span>Suspense⭐</span></a></h4><p>用于处理异步组件和延迟加载</p><p>它的核心目标是<strong>提升异步数据加载场景下的用户体验</strong>，提供统一的加载状态与错误处理机制。</p><p><strong>核心功能与使用场景</strong></p><ol><li><strong>异步组件加载（<code>defineAsyncComponent</code>）</strong></li><li><strong>组件中使用 <code>async setup()</code></strong><code>setup()</code> 函数可以是异步的（比如发起网络请求）。</li><li><strong>深层嵌套的异步依赖</strong> 即使异步操作位于组件树深处，<code>&lt;Suspense&gt;</code> 也能在最外层统一控制加载状态。</li></ol><p><strong>基础用法结构</strong></p><ul><li><code>&lt;Suspense&gt;</code> 会自动追踪所有嵌套在其中的异步操作（包括子孙组件内部的异步任务）。</li><li>所有异步任务完成前，显示 <code>#fallback</code> 插槽内容。</li><li>所有任务完成后，渲染默认插槽内容。</li></ul><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">Suspense</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    &lt;!-- 渲染异步内容的默认插槽 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">AsyncComponent</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    &lt;!-- #fallback 插槽：显示加载状态 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">template</span><span style="color:#D4D4D4;"> #</span><span style="color:#9CDCFE;">fallback</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">正在加载你的秘密武器...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">Suspense</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">defineAsyncComponent</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AsyncComponent</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineAsyncComponent</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  import</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./YourAsyncComponent.vue&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组合式API支持</strong></p><p>在 <code>async setup()</code> 中可直接使用异步操作：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">async function fetchData() </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  const</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/api/data&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  return</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">const data = await fetchData(); // 直接在 setup 中 await</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：当该组件被包裹在 <code>&lt;Suspense&gt;</code> 中时，Vue 会智能地等待 <code>await</code> 操作完成。</p><p><strong>错误处理</strong></p><p>需配合 Vue 的 <strong>错误捕捉 API</strong> 处理异步错误：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#4EC9B0;">ErrorBoundary</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Suspense</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">AsyncComponent</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">template</span><span style="color:#F44747;"> #fallback&gt;Loading...&lt;/template&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">    &lt;/Suspense&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">  &lt;/ErrorBoundary&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">&lt;/template&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">&lt;script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">import </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;"> onErrorCaptured</span><span style="color:#569CD6;"> }</span><span style="color:#D4D4D4;"> from &#39;vue&#39;;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">onErrorCaptured((err) =&gt; </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;异步组件崩溃了！&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 阻止错误继续冒泡</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多组件并行加载</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">Suspense</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> class</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;dashboard&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AsyncChartA</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AsyncChartB</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">template</span><span style="color:#F44747;"> #fallback&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#F44747;">    &lt;PlaceholderGrid</span><span style="color:#9CDCFE;"> rows</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;3&quot;</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">&lt;/</span><span style="color:#9CDCFE;">Suspense</span><span style="color:#D4D4D4;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>何时使用 Suspense？</strong></p><ul><li>你希望用一个 <strong>统一容器</strong> 管理多个异步组件的加载状态。</li><li>存在<strong>嵌套深层的异步数据请求</strong>，需要在最外层展示加载中状态。</li><li>项目需要实现<strong>骨架屏（Skeleton Screen）</strong> 等高级加载体验。</li><li>使用 <strong><code>async setup()</code> 或异步组件加载器（<code>defineAsyncComponent</code>）</strong>。</li></ul><h4 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api"><span>Composition API</span></a></h4><p><a href="#_4%E3%80%81composition-api-%E7%BB%84%E5%90%88%E5%BC%8Fapi">看上面</a></p><h3 id="_7、vue3为何比vue2快-vue3性能提升原因" tabindex="-1"><a class="header-anchor" href="#_7、vue3为何比vue2快-vue3性能提升原因"><span>7、Vue3为何比Vue2快（Vue3性能提升原因）⭐</span></a></h3><h4 id="_1-响应式系统重构-proxy-替代-defineproperty" tabindex="-1"><a class="header-anchor" href="#_1-响应式系统重构-proxy-替代-defineproperty"><span>1. <strong>响应式系统重构（Proxy 替代 defineProperty）</strong></span></a></h4><ul><li><strong>Vue 2 的缺陷</strong>： 使用 <code>Object.defineProperty</code> 递归遍历对象所有属性进行劫持，需为每个属性创建独立的 <code>getter/setter</code>。 <ul><li><strong>无法检测新增/删除属性</strong>（需 <code>Vue.set</code>/<code>Vue.delete</code>）。</li><li><strong>数组需重写方法</strong>（如 <code>push</code>, <code>pop</code>）。</li><li><strong>初始化性能差</strong>：深度递归消耗大。</li></ul></li><li><strong>Vue 3 的优化</strong>： 采用 ES6 的 <strong><code>Proxy</code></strong> 代理整个对象： <ul><li><strong>直接监听整个对象</strong>，无需递归初始化。</li><li><strong>支持动态属性增删</strong>。</li><li><strong>数组变化无需特殊处理</strong>。</li><li><strong>懒代理</strong>：仅在访问嵌套对象时创建 Proxy，减少初始化开销。</li></ul></li></ul><h4 id="_2-编译优化-compiler-improvements" tabindex="-1"><a class="header-anchor" href="#_2-编译优化-compiler-improvements"><span>2. <strong>编译优化（Compiler Improvements）</strong></span></a></h4><h5 id="_1-静态节点提升-static-hoisting" tabindex="-1"><a class="header-anchor" href="#_1-静态节点提升-static-hoisting"><span>(1) 静态节点提升（Static Hoisting）</span></a></h5><ul><li><p><strong>Vue 3</strong>：将模板中的静态节点（无动态绑定）提取到渲染函数外。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 编译后示例</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> _hoisted_1</span><span style="color:#D4D4D4;"> = </span><span style="color:#6A9955;">/*#__PURE__*/</span><span style="color:#DCDCAA;">_createVNode</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;div&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;静态内容&quot;</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#6A9955;"> /* HOISTED */</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>复用静态节点</strong>：避免每次渲染重复创建，直接复用 VNode。</li></ul></li></ul><h5 id="_2-补丁标志-patch-flags" tabindex="-1"><a class="header-anchor" href="#_2-补丁标志-patch-flags"><span>(2) 补丁标志（Patch Flags）</span></a></h5><ul><li><p><strong>Vue 3</strong>：编译时分析动态绑定类型（如 <code>class</code>、<code>style</code>、<code>text</code>），在 VNode 上标记 <code>patchFlag</code>（如 <code>1</code> 代表文本动态）。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 编译后示例</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">_createVNode</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;div&quot;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">class:</span><span style="color:#DCDCAA;"> _normalizeClass</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">active:</span><span style="color:#9CDCFE;"> isActive</span><span style="color:#D4D4D4;"> }) }, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#6A9955;"> /* CLASS */</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>靶向更新</strong>：Diff 时仅对比带标志的动态内容，跳过静态子树。</li></ul></li></ul><h5 id="_3-区块树-block-tree" tabindex="-1"><a class="header-anchor" href="#_3-区块树-block-tree"><span>(3) 区块树（Block Tree）</span></a></h5><ul><li><strong>优化动态节点</strong>： 将动态节点按结构划分为“区块”（Block），内部动态节点保存为数组（<code>dynamicChildren</code>）。 <ul><li><strong>Diff 时跳过静态区块</strong>：直接遍历 <code>dynamicChildren</code> 数组更新，避免全树遍历。</li></ul></li></ul><h4 id="_3-虚拟-dom-重写-virtual-dom-rewrite" tabindex="-1"><a class="header-anchor" href="#_3-虚拟-dom-重写-virtual-dom-rewrite"><span>3. <strong>虚拟 DOM 重写（Virtual DOM Rewrite）</strong></span></a></h4><ul><li><strong>优化 Diff 算法</strong>： <ul><li>基于编译时的 <code>patchFlag</code> 和 <code>dynamicChildren</code>，实现 <strong>靶向更新</strong>。</li><li>对比时跳过静态根节点，减少 90% 的无效比对。</li><li><img src="`+t+`" alt=""></li></ul></li><li><strong>扁平化 VNode 结构</strong>： 减少内存占用，提升遍历速度。</li></ul><h4 id="_4-tree-shaking-支持" tabindex="-1"><a class="header-anchor" href="#_4-tree-shaking-支持"><span>4. <strong>Tree-Shaking 支持</strong></span></a></h4><ul><li><p><strong>模块化架构</strong>：Vue 3 将功能拆解为独立 API（如 <code>reactive</code>, <code>watch</code>, <code>nextTick</code>）。</p></li><li><p><strong>按需引入</strong>：未使用的功能（如 <code>v-model</code>、<code>Transition</code>）不会打包到生产代码。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createApp</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 只引入所需模块</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="_5-其他关键优化" tabindex="-1"><a class="header-anchor" href="#_5-其他关键优化"><span>5. <strong>其他关键优化</strong></span></a></h4><ul><li><strong>事件监听缓存</strong>： 将事件处理函数缓存（如 <code>_cache[0]</code>），避免重复生成。</li><li><strong>SSR 提速</strong>： 服务端渲染优化，字符串拼接性能提升 3 倍。</li><li><strong>组合式 API 间接优化</strong>： 逻辑复用减少不必要的组件重渲染。</li></ul><h4 id="性能对比总结" tabindex="-1"><a class="header-anchor" href="#性能对比总结"><span>性能对比总结</span></a></h4><table><thead><tr><th style="text-align:left;">优化项</th><th style="text-align:left;">Vue 2</th><th style="text-align:left;">Vue 3</th><th style="text-align:left;">提升效果</th></tr></thead><tbody><tr><td style="text-align:left;">响应式系统</td><td style="text-align:left;"><code>defineProperty</code></td><td style="text-align:left;"><code>Proxy</code></td><td style="text-align:left;">初始化快 100%，内存减 50%</td></tr><tr><td style="text-align:left;">Diff 效率</td><td style="text-align:left;">全树遍历</td><td style="text-align:left;">靶向更新（Patch Flags）</td><td style="text-align:left;">Diff 速度快 2-5 倍</td></tr><tr><td style="text-align:left;">静态内容处理</td><td style="text-align:left;">重复创建</td><td style="text-align:left;">静态提升（Hoisting）</td><td style="text-align:left;">渲染速度提升 40%+</td></tr><tr><td style="text-align:left;">打包体积</td><td style="text-align:left;">全量引入</td><td style="text-align:left;">Tree-Shaking</td><td style="text-align:left;">最小生产包仅 10KB</td></tr></tbody></table><h3 id="_8、pinia" tabindex="-1"><a class="header-anchor" href="#_8、pinia"><span>8、Pinia</span></a></h3><h4 id="vuex和pinia的区别" tabindex="-1"><a class="header-anchor" href="#vuex和pinia的区别"><span>Vuex和Pinia的区别⭐</span></a></h4><p>Vue 官方已将 Pinia 作为 <strong><a href="https://vuejs.org/guide/scaling-up/state-management.html#pinia" target="_blank" rel="noopener noreferrer">默认状态管理库</a></strong>，新项目应优先使用 Pinia。</p><h5 id="_1-核心设计理念" tabindex="-1"><a class="header-anchor" href="#_1-核心设计理念"><span>1. <strong>核心设计理念</strong></span></a></h5><ul><li><strong>Vuex</strong>：基于 <strong>Options API</strong> 的设计思想，强制使用 <code>state</code>、<code>mutations</code>、<code>actions</code>、<code>getters</code> 四个核心概念进行状态管理。逻辑分离清晰，但代码结构相对固定。</li><li><strong>Pinia</strong>：专为 <strong>Composition API</strong> 设计（同时兼容 Options API）。采用更灵活的单一 Store 结构，将状态、计算属性和方法（同步/异步）整合在一个定义中，减少模板代码。</li></ul><h5 id="_2-typescript-支持" tabindex="-1"><a class="header-anchor" href="#_2-typescript-支持"><span>2. <strong>TypeScript 支持</strong></span></a></h5><ul><li><strong>Vuex</strong>：对 TypeScript 支持较弱。需要编写额外的类型声明代码来获得类型推断，配置相对繁琐，类型体验不够理想。</li><li><strong>Pinia</strong>：<strong>原生完美支持 TypeScript</strong>。Store 的状态、<code>getters</code> 和 <code>actions</code> 能自动推断类型，提供卓越的 IDE 自动补全和类型检查体验，几乎无需额外配置。</li></ul><h5 id="_3-模块化管理方式" tabindex="-1"><a class="header-anchor" href="#_3-模块化管理方式"><span>3. <strong>模块化管理方式</strong></span></a></h5><ul><li><strong>Vuex</strong>：使用 <strong>嵌套 <code>modules</code></strong>。需要在一个中心化的 store 中注册模块，模块间通信需要通过根 store 或命名空间路径（如 <code>&#39;moduleA/actionName&#39;</code>），结构可能变得复杂。</li><li><strong>Pinia</strong>：采用 <strong>扁平化、独立的 Store</strong>。每个 Store 是一个独立的实体，通常定义在单独的文件中。Store 之间通信<strong>直接导入并调用</strong>其他 Store 的方法即可，无需通过中心化的根结构或命名空间。</li></ul><h5 id="_4-api-风格与状态修改" tabindex="-1"><a class="header-anchor" href="#_4-api-风格与状态修改"><span>4. <strong>API 风格与状态修改</strong></span></a></h5><ul><li><strong>Vuex</strong>： <ul><li>必须通过 <strong><code>commit</code> 触发 <code>mutations</code></strong> 来<strong>同步</strong>修改 <code>state</code>。</li><li>通过 <strong><code>dispatch</code> 触发 <code>actions</code></strong> 处理<strong>异步</strong>操作或包含多个 <code>mutation</code> 的复杂逻辑。</li><li>强制分离同步 (<code>mutations</code>) 和异步 (<code>actions</code>) 逻辑。</li></ul></li><li><strong>Pinia</strong>： <ul><li><strong>没有 <code>mutations</code> 概念</strong>。</li><li>可以在 <code>actions</code> 方法中<strong>直接同步或异步地修改 <code>state</code></strong>（使用 <code>this</code> 访问 state，如 <code>this.count++</code>）。</li><li>更自由，减少了必须使用 <code>commit</code> 的约束，代码更简洁。</li></ul></li></ul><h5 id="_5-响应式原理" tabindex="-1"><a class="header-anchor" href="#_5-响应式原理"><span>5. <strong>响应式原理</strong></span></a></h5><ul><li><strong>Vuex</strong>：基于 Vue 2 的响应式系统（<code>Object.defineProperty</code>）。</li><li><strong>Pinia</strong>：基于 Vue 3 的响应式系统核心（<code>reactive</code> / <code>ref</code>），更现代高效。</li></ul><h5 id="_6-包体积" tabindex="-1"><a class="header-anchor" href="#_6-包体积"><span>6. <strong>包体积</strong></span></a></h5><ul><li><strong>Vuex</strong>：体积相对较大（约 3.4KB gzip）。</li><li><strong>Pinia</strong>：<strong>体积更小巧</strong>（约 1.5KB gzip），得益于更简洁的设计和 API。</li></ul><h5 id="_7-开发体验与简洁性" tabindex="-1"><a class="header-anchor" href="#_7-开发体验与简洁性"><span>7. <strong>开发体验与简洁性</strong></span></a></h5><ul><li><strong>Vuex</strong>：结构清晰但规则严格（如必须通过 <code>mutations</code> 改状态），需要编写相对更多的“样板代码”（定义 <code>mutations</code>、<code>actions</code> 等）。</li><li><strong>Pinia</strong>：<strong>API 更简洁直观</strong>。移除 <code>mutations</code> 减少了心智负担和代码量，直接修改状态和扁平化 Store 设计提升了开发效率和代码可读性。</li></ul><h3 id="_9、如何统一监听-vue-组件报错" tabindex="-1"><a class="header-anchor" href="#_9、如何统一监听-vue-组件报错"><span>9、如何统一监听 Vue 组件报错</span></a></h3><p>在 Vue 3 中，可以通过 全局错误处理器 <code>（errorHandler）</code> 和 生命周期钩子（例如 <code>onErrorCaptured</code> ）来统一监听和处理组件中的错误。</p><ul><li><strong>通过全局错误处理器 <code>app.config.errorHandler</code></strong></li></ul><div class="language-TypeScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="TypeScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-TypeScript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createApp</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createApp</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">App</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 设置全局错误处理器</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">errorHandler</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;捕获到组件错误: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;发生错误的组件实例: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;错误信息: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">mount</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;#app&#39;</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>局部错误捕获（onErrorCaptured）</strong></li></ul><p><code>onErrorCaptured</code> 钩子可以捕获后代组件传递过程中的错误信息</p><div class="language-vue line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-vue;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">onErrorCaptured</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">onErrorCaptured</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;局部捕获到错误: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;错误来源组件: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;错误信息: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">  // 这个钩子可以通过返回 false 来阻止错误继续向上传递。</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> false</span><span style="color:#6A9955;"> // 如果需要让错误冒泡到全局，省略或返回 true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">局部错误捕获示例</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h2</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">ErrorProneComponent</span><span style="color:#808080;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Vue官方API： <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured" target="_blank" rel="noopener noreferrer">onErrorCaptured</a>、<a href="https://cn.vuejs.org/api/application.html#app-config-errorhandler" target="_blank" rel="noopener noreferrer">errorHandler</a></p></blockquote>`,628)]))}const y=n(i,[["render",r],["__file","Vue小记.html.vue"]]),u=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/Vue%E5%B0%8F%E8%AE%B0.html","title":"Vue小记","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752911801000,"contributors":[{"name":"csmSimona","username":"csmSimona","email":"980715844@qq.com","commits":9,"url":"https://github.com/csmSimona"},{"name":"chenshimeng","username":"chenshimeng","email":"chenshimeng@hyperchain.cn","commits":1,"url":"https://github.com/chenshimeng"}],"changelog":[{"hash":"b1b59fcbe4322ab951f22a25ced0344564429464","time":1752911801000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"71fbd227e603679f77860fd4ad21c8741bd2fb27","time":1744813819000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"918a16ee225efa545d3c05585e99fc27c86fea20","time":1726665899000,"email":"980715844@qq.com","author":"csmSimona","message":"update vue docs"},{"hash":"b838a67df4a86387934479ec6107a377ae7d89fa","time":1726590005000,"email":"980715844@qq.com","author":"csmSimona","message":"update docs"},{"hash":"7664101232f5f67659e67fffb8a3d65d84183179","time":1725470219000,"email":"980715844@qq.com","author":"csmSimona","message":"update vue"},{"hash":"f2e253faf986e81a43d713c8c9121bbb9bea2116","time":1725384859000,"email":"980715844@qq.com","author":"csmSimona","message":"update vue小记"},{"hash":"dba483764b9fb416e72c39250e41639c4d51810c","time":1725294921000,"email":"chenshimeng@hyperchain.cn","author":"chenshimeng","message":"update 性能优化"},{"hash":"157ee0cbe5fcbc8e1d0a27ac8dbc5a86995bd55f","time":1724741932000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"4dd15f1460e32d6e34701bf0ff62bff21be133f3","time":1724741840000,"email":"980715844@qq.com","author":"csmSimona","message":"update"},{"hash":"c0d4d15fdf0689f997f6de6b8b764f488f580b66","time":1724740884000,"email":"980715844@qq.com","author":"csmSimona","message":"init"}]},"filePathRelative":"前端基础汇总/Vue小记.md","readingTime":{"minutes":77.72,"words":23317}}');export{y as comp,u as data};
