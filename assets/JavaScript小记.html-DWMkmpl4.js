import{_ as s,c as n,o as a,a as l}from"./app-Cy8tXSBo.js";const e="/assets/bom-DZLLv4U5.png",p="/assets/%E5%8E%9F%E5%9E%8B%E9%93%BE-C4HvfMqI.png",o="/assets/%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%8C%E6%95%B4%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%9B%BE-BcKierx6.png",i="/assets/MVC%E5%92%8CMVVM-CAvdFQIt.png",c={},r=l(`<h1 id="javascript小记" tabindex="-1"><a class="header-anchor" href="#javascript小记"><span>JavaScript小记</span></a></h1><hr><p>2019.12.11 更新this、继承，补充了一些方法，删除对象，创建对象的方法</p><p>2020.01.14 增加ES6部分新特性，转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><p>2020.02.16 更新作用域，let&amp;const</p><p>2020.02.24 重新整理，更新小记顺序（大致按《JavaScript高级程序设计》顺序来）</p><p>2020.03.07 完成对异步的整理</p><p>2020.03.08 更新Generator和Class</p><p>2020.03.11 更新Iterator，添加大标题目录</p><p>2020.11.24 更新ES6最新基本数据类型BigInt</p><hr><h2 id="大标题目录" tabindex="-1"><a class="header-anchor" href="#大标题目录"><span>😄 大标题目录</span></a></h2><ul><li><p><a href="#JavaScript%E6%A6%82%E8%BF%B0">JavaScript概述</a></p></li><li><p><a href="#DOM">DOM</a></p></li><li><p><a href="#BOM">BOM</a></p></li><li><p><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></p></li><li><p><a href="#%E6%93%8D%E4%BD%9C%E7%AC%A6">操作符</a></p></li><li><p><a href="#String">String</a></p></li><li><p><a href="#Array">Array</a></p></li><li><p><a href="#Object">Object</a></p></li><li><p><a href="#RexgExp%E7%AD%89">RexgExp等</a></p></li><li><p><a href="#Function">Function</a></p></li><li><p><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F">作用域</a></p></li><li><p><a href="#%E9%97%AD%E5%8C%85">闭包</a></p></li><li><p><a href="#%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">内存泄漏</a></p></li><li><p><a href="#%E5%AF%B9%E8%B1%A1">对象</a></p></li><li><p><a href="#%E5%8E%9F%E5%9E%8B">原型</a></p></li><li><p><a href="#%E7%BB%A7%E6%89%BF">继承</a></p></li><li><p><a href="#%E4%BA%8B%E4%BB%B6">事件</a></p></li><li><p><a href="#JSON">JSON</a></p></li><li><p><a href="#Ajax">Ajax</a></p></li><li><p><a href="#%E8%B7%A8%E5%9F%9F">跨域</a></p></li><li><p><a href="#%E5%BC%82%E6%AD%A5">异步</a></p></li><li><p><a href="#%E6%A8%A1%E5%9D%97%E5%8C%96">模块化</a></p></li><li><p><a href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化</a></p></li><li><p><a href="#%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8BES6%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD">总结一下ES6常用功能</a></p></li><li><p><a href="#%E5%85%B6%E4%BB%96">其他</a></p></li></ul><hr><h2 id="javascript概述" tabindex="-1"><a class="header-anchor" href="#javascript概述"><span>JavaScript概述</span></a></h2><h3 id="_1、-一个完整的javascript实现应该由下列三个不同的部分组成" tabindex="-1"><a class="header-anchor" href="#_1、-一个完整的javascript实现应该由下列三个不同的部分组成"><span>1、 一个完整的JavaScript实现应该由下列三个不同的部分组成</span></a></h3><p>1.核心(ECMAScript) ——提供核心语言功能</p><p>2.文档对象模型(DOM) ——提供访问和操作网页内容的方法和接口</p><p>3.浏览器对象模型(BOM) ——提供与浏览器交互的方法和接口</p><p>ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现（另外的ECMAScript方言还有JScript和ActionScript）。日常场合，这两个词是可以互换的。</p><h3 id="_2、javascript语言特性" tabindex="-1"><a class="header-anchor" href="#_2、javascript语言特性"><span>2、JavaScript语言特性</span></a></h3><p>1、运行在客户端浏览器上；</p><p>2、脚本语言、解释性语言，不用预编译，直接解析执行代码；</p><p>3、是弱类型语言，较为灵活；</p><p>4、与操作系统无关，跨平台的语言；</p><p>5、基于对象，是一种基于对象的脚本语言,它不仅可以创建对象,也能使用现有的对象。</p><h3 id="_3、javascript的优缺点" tabindex="-1"><a class="header-anchor" href="#_3、javascript的优缺点"><span>3、JavaScript的优缺点</span></a></h3><p><a href="zh-cn/JavaScript/JavaScript%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">看这里~</a></p><h3 id="_4、js内置对象" tabindex="-1"><a class="header-anchor" href="#_4、js内置对象"><span>4、JS内置对象</span></a></h3><p>Arguments（函数参数集合）</p><p>Array（数组）</p><p>Boolean（布尔对象）</p><p>Date（日期对象）</p><p>Error（异常对象）</p><p>Function（函数构造器）</p><p>Math（数学对象）</p><p>Number（数值对象）</p><p>Object（基础对象）</p><p>RegExp（正则表达式对象）</p><p>String（字符串对象）</p><h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom"><span>DOM</span></a></h2><h3 id="_1、jquery对象和原生dom对象互相转化" tabindex="-1"><a class="header-anchor" href="#_1、jquery对象和原生dom对象互相转化"><span>1、jQuery对象和原生DOM对象互相转化</span></a></h3><p>两者区别：js原生获取的dom是一个对象，jQuery对象就是一个数组对象，其实就是选择出来的元素的数组集合，所以说他们两者是不同的对象类型不等价。</p><p>原生DOM对象转jQuery对象：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> box</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;box&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> $box</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">box</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>jQuery对象转原生DOM对象：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> $box</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;#box&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> box1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">$box</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];       </span><span style="color:#6A9955;">// 方法一</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> box2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">$box</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// 方法二</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、原生javascript和jquery操作dom的对比总结" tabindex="-1"><a class="header-anchor" href="#_2、原生javascript和jquery操作dom的对比总结"><span>2、原生javascript和jQuery操作DOM的对比总结</span></a></h3><p><a href="https://www.cnblogs.com/jiangyuzhen/p/10978611.html" target="_blank" rel="noopener noreferrer">看这一篇文章</a></p><h3 id="_3、node节点" tabindex="-1"><a class="header-anchor" href="#_3、node节点"><span>3、Node节点</span></a></h3><p>这是一张优秀的思维导图：<a href="https://www.processon.com/view/5cc00e24e4b085d010837583#map" target="_blank" rel="noopener noreferrer">JavaScript Node节点类型</a></p><h4 id="节点属性" tabindex="-1"><a class="header-anchor" href="#节点属性"><span>节点属性</span></a></h4><p>1、nodeType：节点类型</p><ul><li><p><strong>Node.ELEMENT_NODE(1)；（元素节点）</strong></p></li><li><p><strong>Node.ATTRIBUTE_NODE(2)；（属性节点）</strong></p></li><li><p><strong>Node.TEXT_NODE(3)；（文本节点）</strong></p></li><li><p>Node.CDATA_SECTION_NODE(4)；</p></li><li><p>Node.ENTITY_REFERENCE_NODE(5)；</p></li><li><p>Node.ENTITY_NODE(6)；</p></li><li><p>Node.PROCESSING_INSTRUCTION_NODE(7)；</p></li><li><p><strong>Node.COMMENT_NODE(8)；（注释节点）</strong></p></li><li><p><strong>Node.DOCUMENT_NODE(9)；（document节点）</strong></p></li><li><p>Node.DOCUMENT_TYPE_NODE(10)；</p></li><li><p>Node.DOCUMENT_FRAGMENT_NODE(11)；</p></li><li><p>Node.NOTATION_NODE(12)</p></li></ul><p>2、nodeName：节点名称。元素节点为标签名，文本节点为#text</p><p>3、nodeValue：节点值。元素节点为null，文本节点为文本内容</p><h4 id="节点关系" tabindex="-1"><a class="header-anchor" href="#节点关系"><span>节点关系</span></a></h4><p>1、childNodes：当前节点的子节点的节点列表</p><p>2、parentNode：当前节点的父节点</p><p>3、firstChild：父节点的第一节点。相当于childNodes[0]或childNodes.item[0]</p><p>4、lastChild：父节点的最后一个节点</p><p>5、nextSibling：当前节点的后一个节点</p><p>6、previousSibling：当前节点的前一个节点</p><p>7、hasChildNodes：节点包含一或多个子节点的情况下返回true</p><p>8、ownerDocument：指向表示整个文档的文档节点</p><h4 id="节点操作" tabindex="-1"><a class="header-anchor" href="#节点操作"><span>节点操作</span></a></h4><p>1、createElement()：创建元素节点</p><p>2、createAttribute()：创建属性节点</p><p>3、appendChild()：向节点的子节点列表的结尾添加新的子节点</p><p>4、cloneNode()：复制节点。在参数为true的情况下，执行深复制，复制节点以及整个子节点树；在参数为false的情况下，执行浅复制，即只复制节点本身。复制后属于文档所有，并没有给它指定父节点</p><p>5、insertBefore(newNode，target)：在指定的子节点前插入新的子节点</p><p>6、replaceChild(newNode，target)：用新节点替换一个子节点</p><p>7、removeChild()：删除（并返回）当前节点的指定子节点</p><p>8、normalize()：将空文本节点删除或将相邻的文本节点合并一个文本节点</p><p>9、getAttribute()：返回指定属性值</p><p>10、setAttribute()：把指定属性设置或修改为指定的值</p><p>11、querySelectorAll()：返回文档中匹配指定css选择器的所有元素，返回NodeList对象（集合）</p><h3 id="_4、dom节点的attribute和property有何区别" tabindex="-1"><a class="header-anchor" href="#_4、dom节点的attribute和property有何区别"><span>4、DOM节点的attribute和property有何区别</span></a></h3><ul><li>property只是一个JS对象的属性的修改</li><li>attribute是对html标签属性的修改</li></ul><p>请看这篇文章：<a href="https://www.cnblogs.com/lmjZone/p/8760232.html" target="_blank" rel="noopener noreferrer">JS中attribute和property的区别</a></p><h3 id="_5、window-onload和domconentloaded的区别" tabindex="-1"><a class="header-anchor" href="#_5、window-onload和domconentloaded的区别"><span>5、window.onload和DOMConentLoaded的区别</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;load&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 页面的全部资源加载完才会执行，包括图片，视频</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;DOMContentLoaded&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // DOM渲染完即可执行，此时图片、视频还可能没有加载完</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bom" tabindex="-1"><a class="header-anchor" href="#bom"><span>BOM</span></a></h2><h3 id="_1、bom属性对象方法" tabindex="-1"><a class="header-anchor" href="#_1、bom属性对象方法"><span>1、BOM属性对象方法</span></a></h3><p>什么是BOM? BOM（Browser Object Model）浏览器对象模型，是Javascript的重要组成部分。它提供了一系列对象用于与浏览器窗口进行交互，这些对象通常统称为BOM。</p><p>有哪些常用的BOM属性呢？</p><p><img src="`+e+`" alt=""></p><p><strong>(1) location对象</strong></p><p>location.href-- 返回或设置当前文档的URL</p><p>location.search -- 返回URL中的查询字符串部分。例如 <a href="http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu" target="_blank" rel="noopener noreferrer">http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu</a> 返回包括(?)后面的内容?id=5&amp;name=dreamdu</p><p>location.hash -- 返回URL#后面的内容，如果没有#，返回空</p><p><strong>location.host -- 返回URL中的域名部分</strong>，例如www.dreamdu.com</p><p>location.hostname -- 返回URL中的主域名部分，例如dreamdu.com</p><p>location.pathname -- 返回URL的域名后的部分。例如 <a href="http://www.dreamdu.com/xhtml/" target="_blank" rel="noopener noreferrer">http://www.dreamdu.com/xhtml/</a> 返回/xhtml/</p><p>**location.port -- 返回URL中的端口部分。**例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener noreferrer">http://www.dreamdu.com:8080/xhtml/</a> 返回8080</p><p>**location.protocol -- 返回URL中的协议部分。**例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener noreferrer">http://www.dreamdu.com:8080/xhtml/</a> 返回(//)前面的内容</p><p>http:</p><p>location.assign -- 设置当前文档的URL</p><p>location.replace(url) -- 设置当前文档的URL，并且在history对象的地址列表中移除这个URL</p><p>location.reload() -- 重载当前页面</p><p><strong>(2) history对象</strong></p><p>history.go() -- 前进或后退指定的页面数 history.go(num);</p><p>history.back() -- 后退一页</p><p>history.forward() -- 前进一页</p><p><strong>(3) Navigator对象</strong></p><p>navigator.userAgent -- 返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)</p><p>navigator.cookieEnabled -- 返回浏览器是否支持(启用)cookie</p><p><strong>(4) screen对象</strong></p><p>screen.width</p><p>screen.height</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="_1、数据类型" tabindex="-1"><a class="header-anchor" href="#_1、数据类型"><span>1、数据类型</span></a></h3><p>另外可以看看这篇文章：<a href="https://www.cnblogs.com/leiting/p/8081413.html" target="_blank" rel="noopener noreferrer">js中的值类型和引用类型的区别</a></p><p><strong>基本数据类型（值类型）</strong>：undefined、null、string、number、boolean、symbol、BigInt</p><p>（占用空间固定，保存在栈中）</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener noreferrer">BigInt</a> 是一种内置对象，它提供了一种方法来表示大于 2**53 - 1 的整数。这原本是 Javascript中可以用 Number 表示的最大数字。BigInt 可以表示任意大的整数。</p><p>可以用在一个整数字面量后面加 n 的方式定义一个 BigInt ，如：10n，或者调用函数BigInt()。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> alsoHuge</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">BigInt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">9007199254740991</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// ↪ 9007199254740991n</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>它在某些方面类似于 Number ，但是也有几个关键的不同点：不能用于 Math 对象中的方法；不能和任何 Number 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 BigInt 变量在转换成 Number 变量时可能会丢失精度。</p></blockquote><p><strong>引用类型</strong>：array、function、object</p><p>（占用空间不固定，保存在堆中。存储在栈中的是指向堆中的数组或者对象的地址）</p><h3 id="_2、堆区和栈区" tabindex="-1"><a class="header-anchor" href="#_2、堆区和栈区"><span>2、堆区和栈区</span></a></h3><p>栈区的特点：操作性能高，速度快，存储量小</p><p>​ 所以：一般存储操作频率较高，生命周期较短，占用空间较小的数据。（基本数据类型）</p><p>堆区的特点：操作性能低（相对于栈区），速度慢，存储量大</p><p>​ 所以：一般存储操作频率较低，生命周期较长，占用空间较大的数据。（复杂数据类型）</p><p>​ 堆通常是一个可以被看做一棵完全二叉树的数组对象。 逻辑上：完全二叉树 存储上：数组（顺序存储）</p><h3 id="_3、js中数据类型的判断-typeof-instanceof-constructor-object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#_3、js中数据类型的判断-typeof-instanceof-constructor-object-prototype-tostring-call"><span>3、JS中数据类型的判断（ typeof，instanceof，constructor，Object.prototype.toString.call() ）</span></a></h3><h4 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h4><p>对一个值使用typeof操作符可能返回：</p><p>undefined、string、number、boolean、object（对象或null）、function、symbol、bigint</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#B5CEA8;"> 2</span><span style="color:#D4D4D4;">);               </span><span style="color:#6A9955;">// number</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">);            </span><span style="color:#6A9955;">// boolean</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#CE9178;"> &#39;str&#39;</span><span style="color:#D4D4D4;">);           </span><span style="color:#6A9955;">// string</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> []);              </span><span style="color:#6A9955;">// object  []数组的数据类型在 typeof 中被解释为object</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(){});    </span><span style="color:#6A9955;">// function</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> {});              </span><span style="color:#6A9955;">// object</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#569CD6;"> undefined</span><span style="color:#D4D4D4;">);       </span><span style="color:#6A9955;">// undefined</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">);            </span><span style="color:#6A9955;">// object    null 的数据类型被 typeof 解释为 object</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#DCDCAA;"> BigInt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">));      </span><span style="color:#6A9955;">// bigint</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>typeof 对于基本类型，除了null都可以显示正确的类型；对于对象，除了函数都会显示object。</p><p>对于null来说，虽然它是基本类型，但是会显示object，这是一个存在了很久的bug。</p><p>因为在js的最初版本中，使用的是32位系统，为了性能考虑使用低位存储了变量的类型信息，000开头代表是对象，然而null表示为全零，所以将它错误的判断为object。虽然现在的内部类型 判断代码已经改变了，但是对于这个bug却是一直流传下来。</p><h4 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof</span></a></h4><p>只有引用数据类型（Array，Function，Object）被精准判断，其他（数值Number，布尔值Boolean，字符串String）字面值不能被instanceof精准判断。</p><p>用于判断引用类型属于哪个构造函数的方法。</p><p>instanceof可以正确的判断对象的类型，因为<strong>内部机制是通过判断对象的原型链中是不是能找得类型的prototype</strong>。</p><p><code>f instanceof Foo </code> 判断逻辑 f 的<code>_proto_</code>一层层往上，能否对应到Foo.prototype</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Number</span><span style="color:#D4D4D4;">);                    </span><span style="color:#6A9955;">// false</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Boolean</span><span style="color:#D4D4D4;">);                </span><span style="color:#6A9955;">// false </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;str&#39;</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> String</span><span style="color:#D4D4D4;">);                </span><span style="color:#6A9955;">// false  </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">([] </span><span style="color:#569CD6;">instanceof</span><span style="color:#4EC9B0;"> Array</span><span style="color:#D4D4D4;">);                    </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){} </span><span style="color:#569CD6;">instanceof</span><span style="color:#4EC9B0;"> Function</span><span style="color:#D4D4D4;">);       </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">({} </span><span style="color:#569CD6;">instanceof</span><span style="color:#4EC9B0;"> Object</span><span style="color:#D4D4D4;">);                   </span><span style="color:#6A9955;">// true    </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// console.log(undefined instanceof Undefined);	 // 报错</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// console.log(null instanceof Null);	// 报错</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;zs&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">18</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;小花&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;">);       </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">d</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;">);       </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Object</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// false</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">((</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">Number</span><span style="color:#D4D4D4;">);  				</span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">((</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">Boolean</span><span style="color:#D4D4D4;">);  			</span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">((</span><span style="color:#CE9178;">&#39;str&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">); 			</span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(([]).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">);  				</span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">((</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {}).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">Function</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(({}).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">);               </span><span style="color:#6A9955;">// true</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用costructor来判断类型看起来是完美的，然而，如果我创建一个对象，更改它的原型，这种方式也变得不可靠了。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;csm&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); 	</span><span style="color:#6A9955;">// Person</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 改变原型</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;zs&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 18</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;csm&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); 	</span><span style="color:#6A9955;">// Object</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，当要修改对象的proptotype时，一定要设置constructor指向其构造函数</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	constructor:</span><span style="color:#9CDCFE;"> Person</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;zs&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 18</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;csm&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); 	</span><span style="color:#6A9955;">// Person</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring-call"><span>Object.prototype.toString.call()</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">));    			</span><span style="color:#6A9955;">// [object Number]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">));			</span><span style="color:#6A9955;">// [object Boolean]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;str&#39;</span><span style="color:#D4D4D4;">));			</span><span style="color:#6A9955;">// [object String]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">([]));			</span><span style="color:#6A9955;">// [object Array]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){}));	</span><span style="color:#6A9955;">// [object Function]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">({}));			</span><span style="color:#6A9955;">// [object Object]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">));		</span><span style="color:#6A9955;">// [object Undefined]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">));			</span><span style="color:#6A9955;">// [object Null]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 使用 Object 对象的原型方法 toString ，使用 call 进行狸猫换太子，借用Object的 toString 方法结果精准的显示我们需要的数据类型。就算我们改变对象的原型，依然会显示正确的数据类型。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 数据类型判断</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> typeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#4EC9B0;"> Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">slice</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">toLowerCase</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、object和object" tabindex="-1"><a class="header-anchor" href="#_4、object和object"><span>4、object和Object</span></a></h3><p>JavaScript中object和Object有什么区别，为什么用typeof检测对象，返回object，而用instanceof 必须要接Object呢？</p><p><code>typeof</code> 和 <code>instanceof</code> 这两个功能就是完全不一样的运算符。<code>typeof</code> 是为了检查数据类型，<code>instanceof</code>是为了看一个变量是否是某个对象的实例。</p><p><code>typeof</code> 返回的结果，是一个字符串。所以object就是一个字符串。</p><p>而 <code>Object</code> 是 JavaScript 中一个重要的内置对象，其它对象都是基于它的，包括你创建的函数。</p><h3 id="_5、function和function" tabindex="-1"><a class="header-anchor" href="#_5、function和function"><span>5、function和Function</span></a></h3><p>ECMAScript 的Function实际上就是一个功能完整的对象。</p><p>而function是用来创建所有对象的构造函数或者普通函数要用的关键字</p><p><code>var a = new function(){}</code>实际上是用构造函数的方法创建了一个匿名对象的实例，而并不是系统内置对象<code>Function</code>的实例，所以<code>a instanceof Function</code>返回<code>false</code>，<code>typeof</code>返回<code>&quot;object&quot;</code>。</p><h3 id="_6、null和undefined的区别" tabindex="-1"><a class="header-anchor" href="#_6、null和undefined的区别"><span>6、null和undefined的区别</span></a></h3><ul><li>Undefined类型只有一个值，即undefined。当声明的变量还未被初始化时，变量的默认值为undefined。 <ul><li>变量被声明了，但没有赋值时，就等于undefined。</li><li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li><li>对象没有赋值的属性，该属性的值为undefined。</li><li>函数没有返回值时，默认返回undefined。</li></ul></li><li>Null类型也只有一个值，即null。null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。 <ul><li>作为函数的参数，表示该函数的参数不是对象。</li><li>作为对象原型链的终点。</li></ul></li></ul><h2 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h2><h3 id="_1、-和" tabindex="-1"><a class="header-anchor" href="#_1、-和"><span>1、&amp;&amp;和||</span></a></h3><p>短路原理</p><p>1、只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;</p><p>2、只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;</p><p>1、只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。</p><p>2、只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。</p><h3 id="_2、只有当加法运算时-其中一方是字符串类型-就会把另一个也转为字符串类型。其他运算只要其中一方是数字-那么另一方就转为数字。" tabindex="-1"><a class="header-anchor" href="#_2、只有当加法运算时-其中一方是字符串类型-就会把另一个也转为字符串类型。其他运算只要其中一方是数字-那么另一方就转为数字。"><span>2、只有当加法运算时，其中一方是字符串类型，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。</span></a></h3><h3 id="_3、nan" tabindex="-1"><a class="header-anchor" href="#_3、nan"><span>3、NaN</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = “</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">” &lt; </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// false，因为“a”被转化成了NaN</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>根据规则，任何操作数与NaN进行关系比较，结果都是false。</p><p>Number函数转化规则中，如果是null，返回零；如果是undefined，返回NaN 。</p><h3 id="_4、-false" tabindex="-1"><a class="header-anchor" href="#_4、-false"><span>4、{} == false / {} == {}</span></a></h3><p>&quot;==&quot;运算符比较&quot;喜欢&quot;Number类型</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">{} == </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">  &lt;=&gt; </span><span style="color:#DCDCAA;">Number</span><span style="color:#D4D4D4;">({}) == </span><span style="color:#DCDCAA;">Number</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">) &lt;=&gt; </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#6A9955;">  // false</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">{} == {} </span><span style="color:#6A9955;">// false  两者指向的不是同一个地址</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><h3 id="_1、string对象中slice-、substring-、substr-的用法与区别" tabindex="-1"><a class="header-anchor" href="#_1、string对象中slice-、substring-、substr-的用法与区别"><span>1、String对象中slice()、substring()、substr()的用法与区别</span></a></h3><ul><li><strong>slice() 方法</strong>可提取字符串的某个部分，并以新的字符串返回被提取的部分。 <ul><li>语法：<code>stringObject.slice(start,end)</code></li><li>返回一个新的字符串。包括字符串 stringObject 从 start 开始（包括 start）到 end 结束（不包括 end）为止的所有字符。</li><li>如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</li></ul></li><li><strong>substring() 方法</strong>用于提取字符串中介于两个指定下标之间的字符。 <ul><li>语法：<code>stringObject.substring(start,stop)</code></li><li>一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop减 start。</li><li>如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。</li><li>与 slice() 和 substr() 方法不同的是，substring() 不接受负的参数。</li></ul></li><li><strong>substr() 方法</strong>可在字符串中抽取从 <em>start</em> 下标开始的指定数目的字符。 <ul><li>语法：<code>stringObject.substr(start,length)</code></li><li>一个新的字符串，包含从 stringObject 的 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到 stringObject 的结尾的字符。</li><li>如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</li><li>ECMAscript 没有对该方法进行标准化，因此反对使用它。</li></ul></li></ul><p>String 对象的方法 slice()、substring() 和 substr() （不建议使用）都可返回字符串的指定部分。slice() 比 substring() 要灵活一些，因为它允许使用负数作为参数。slice() 与 substr() 有所不同，因为它用两个字符的位置来指定子串，而 substr() 则用字符位置和长度来指定子串。</p><p>还要注意的是，String.slice() 与 Array.slice() 相似。</p><h3 id="_2、es6中字符串的扩展" tabindex="-1"><a class="header-anchor" href="#_2、es6中字符串的扩展"><span>2、ES6中字符串的扩展</span></a></h3><p>转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><h4 id="_1-includes-startswith-endswith" tabindex="-1"><a class="header-anchor" href="#_1-includes-startswith-endswith"><span>1.includes()，startsWith()，endsWith()</span></a></h4><p>在ES6之前，js中只有indexof方法，来确定一个字符串中是否包含在另一个字符串中。</p><p>ES6中又提供了三种新的方法。</p><ul><li>includes()：返回布尔值，表示是否找到了参数字符串。</li><li>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> str</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;hello My word!&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">startsWith</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;hello&quot;</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">endsWith</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;!&#39;</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;My&#39;</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//true</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-padstart-padend" tabindex="-1"><a class="header-anchor" href="#_2-padstart-padend"><span>2.padStart()，padEnd()</span></a></h4><p>ES6引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。</p><p>padStart()用于头部补全，padEnd()用于尾部补全。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">padStart</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//afoo</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">padEnd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//fooa</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">padStart</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//foo</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">padEnd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//foo</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>padstart最常见的用途</p><p>1.是用来补全在指定的位数。</p><p>2.是用来提示字符串格式：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#CE9178;">&#39;12&#39;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">padStart</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;YYYY-MM-DD&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// &quot;YYYY-MM-12&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">&#39;09-12&#39;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">padStart</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;YYYY-MM-DD&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// &quot;YYYY-09-12&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array"><span>Array</span></a></h2><h3 id="_1、array对象中slice-、splice-的区别" tabindex="-1"><a class="header-anchor" href="#_1、array对象中slice-、splice-的区别"><span>1、Array对象中slice() 、splice（）的区别</span></a></h3><p><strong>slice() 方法</strong>可从已有的数组中返回选定的元素。</p><ul><li>语法：<code>arrayObject.slice(start,end)</code></li><li>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。在只有一个参数的情况下，返回从该参数指定位置开始到当前数组末尾的所有项。</li><li>该方法不改变原数组，而是返回新的数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</li><li>如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。</li><li>如果结束位置小于起始位置，则返回空数组。</li></ul><p><strong>splice() 方法</strong>主要用途是向数组的中部插入项。</p><ul><li><p>语法：<code>arrayObject.splice(index,howmany,item1,.....,itemX)</code></p></li><li><table><thead><tr><th>index</th><th>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</th></tr></thead><tbody><tr><td>howmany</td><td>必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td></tr><tr><td>item1, ..., itemX</td><td>可选。向数组添加的新项目。</td></tr></tbody></table></li><li><p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）</p></li></ul><h3 id="_2、map和foreach的区别" tabindex="-1"><a class="header-anchor" href="#_2、map和foreach的区别"><span>2、Map和ForEach的区别</span></a></h3><ul><li><code>forEach()</code>: 数组中的每个元素执行一次回调函数</li><li><code>map()</code>: 返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组</li></ul><p><strong>示例</strong></p><p>下方提供了一个数组，如果我们想将其中的每一个元素翻倍，我们可以使用<code>map</code>和<code>forEach</code>来达到目的。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">];</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>ForEach</strong></p><p>注意，<code>forEach</code>是不会返回有意义的值的。另外，forEach不支持break和continue（every也不可以） 我们在回调函数中直接修改<code>arr</code>的值。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Map</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> doubled</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">num</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> num</span><span style="color:#D4D4D4;"> * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、indexof与search的区别" tabindex="-1"><a class="header-anchor" href="#_3、indexof与search的区别"><span>3、indexOf与search的区别</span></a></h3><ul><li>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置，如果没有找到返回-1 <ul><li>该方法将从头到尾地检索字符串stringObject，看它是否含有子串searchvalue。开始检索的位置在字符串的fromindex处。如果没有fromindex参数则从字符串的开头检索。如果找到一个searchvalue，则返回searchvalue的第一次出现的位置。stringObjec中的字符串位置是从0开始的。</li><li>indexOf()方法对大小写敏感。</li></ul></li><li>search方法用于检索字符串中指定的子字符串，检索与<strong>正则表达式</strong>相匹配的子字符串。如果没有找到，返回-1。 <ul><li>search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置。</li><li>search() 方法对大小写敏感。</li></ul></li></ul><p><strong>indexOf与search的区别</strong></p><p>search()的参数必须是正则表达式,而indexOf()的参数只是普通的字符串。indexOf()是比search()更加底层的方法。</p><p>如果只是对一个具体字符串来检索，那么使用indexOf()的系统资源消耗更小，效率更高；如果查找具有某些特征的字符串（例如查找以a开头，后面是数字的字符串），那么indexOf()就无能为力，必须要使用正则表达式和search()方法了。</p><p>大多是时候用indexOf()不是为了真的想知道子字符串的位置，而是想知道长字符串中有没有包含这个子字符串。r如果返回索引为-1，那么说明没有，反之则有。</p><h3 id="_4、查找数组" tabindex="-1"><a class="header-anchor" href="#_4、查找数组"><span>4、查找数组</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> array</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> find</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">3</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">find</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 3 (返回的是值，只输出符合的第一个值，没找到则返回undefined)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回找到值的位置：findIndex</p><h3 id="_5、array-of" tabindex="-1"><a class="header-anchor" href="#_5、array-of"><span>5、Array.of</span></a></h3><p>转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><p>Array.of主要是用于将一组值转化为数组，创建一个可变数量参数的新数组，而不考虑参数的类型和数量</p><p>Array.of的出现主要是对Array创建数组的不足进行的补充，因为用Array创建数组，因为参数个数的不同，会造成差异。 Array.of()和Array构造函数的区别：在于处理整数参数</p><p>如下：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">Array</span><span style="color:#D4D4D4;">()</span><span style="color:#6A9955;">//[]</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span><span style="color:#6A9955;">//[,,,]</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span><span style="color:#6A9955;">//[1,2,3]</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//当Array()中的参数只有一个的时候，此时的参数就代表了数组的长度，只有参数大于等于2的时候才会返回，参数组成的新数组。</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//Array.of</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">of</span><span style="color:#D4D4D4;">())</span><span style="color:#6A9955;">//[]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">of</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">))</span><span style="color:#6A9955;">//[3]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">of</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">)</span><span style="color:#6A9955;">//1</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//而Array无论参数有几个最后都会返参数组成的数组。</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Array.of功能的模拟实现如下</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> arrayof</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">slice</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、array-from" tabindex="-1"><a class="header-anchor" href="#_6、array-from"><span>6、Array.from()</span></a></h3><p>Array.from()方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</p><p>Array.from(arrayLike, mapFn, thisArg)</p><p>参数</p><ul><li><p><code>arrayLike</code></p><p>想要转换成数组的伪数组对象或可迭代对象。</p></li><li><p><code>mapFn</code> 可选</p><p>如果指定了该参数，新数组中的每个元素会执行该回调函数。</p></li><li><p><code>thisArg</code> 可选</p><p>可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p></li></ul><p>返回值：一个新的数组实例。</p><p><strong>例1：Array.from ({length:n}, Fn) 将类数组转换为数组</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">length:</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">}, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#CE9178;"> &#39;jack&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//[&quot;jack&quot;, &quot;jack&quot;, &quot;jack&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> array</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">    0</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;name&#39;</span><span style="color:#D4D4D4;">, </span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">    1</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;age&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">    2</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;sex&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">    3</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;user1&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;user2&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;user3&#39;</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">    &#39;length&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#B5CEA8;"> 4</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;name&#39;,&#39;age&#39;,&#39;sex&#39;,[&#39;user1&#39;,&#39;user2&#39;,&#39;user3&#39;]]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将上面代码中length属性去掉，arr将会是一个长度为0的空数组[]</p><p><strong>例2：Array.from (obj, mapFn)</strong></p><p>obj指的是数组对象、类似数组对象或者是set对象，map指的是对数组中的元素进行处理的方法。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> set</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">))  </span><span style="color:#6A9955;">// [1, 2, 5, 6, 7, 8, 9]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//将数组中布尔值为false的成员指为0</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, ,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;"> || </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//[1,0,2,3,3]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//将一个类似数组的对象转为一个数组，并在原来的基础上乘以2倍</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> arrayLike</span><span style="color:#D4D4D4;"> = { </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;1&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;4&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;2&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;5&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">length:</span><span style="color:#B5CEA8;"> 3</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arrayLike</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;">*</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//[4,8,10]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//将一个set对象转为数组，并在原来的基础上乘以2倍</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">]), </span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;">*</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//[2,4,6,8]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例3：Array.from(string) 将字符串转换为数组</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;abc&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子4：将Map解构转为数组，最方便的做法就是使用扩展运算符(...)</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> myMap</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">myMap</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//Map(1) {true =&gt; 7}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">([...</span><span style="color:#9CDCFE;">myMap</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">//[true ,7]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、伪数组转化为数组" tabindex="-1"><a class="header-anchor" href="#_7、伪数组转化为数组"><span>7、伪数组转化为数组</span></a></h3><p><strong>伪数组</strong></p><p>1、以索引方式存储数据</p><p>2、有一个length</p><p><strong>方法一、 声明一个空数组，通过遍历伪数组把它们重新添加到新的数组中</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> aLi</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">querySelectorAll</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;li&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">aLi</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">aLi</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二、使用数组的slice()方法 它返回的是数组，使用call或者apply指向伪数组</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">slice</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// 方法一</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [].</span><span style="color:#9CDCFE;">slice</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">);   			</span><span style="color:#6A9955;">// 方法二</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法三、使用原型继承</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">oldarr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>方法四、ES6的数组新方法</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">length:</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() { </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">}) </span><span style="color:#6A9955;">// [1,1,1] 初始化并赋值</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_8、清空数组的方法" tabindex="-1"><a class="header-anchor" href="#_8、清空数组的方法"><span>8、清空数组的方法</span></a></h3><p><strong>方式1：splice函数</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">];  </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">splice</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：给数组的length赋值为0</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">];  </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>赋予数组的长度小于本身的长度，数组中后面的元素将被截断。</p><p>赋予数组的长度大于本身的长度，将扩展数组长度，多的元素为undefined。</p><p><strong>方式3：直接赋予新数组 []</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;"> =</span><span style="color:#CE9178;">&quot;text/javascript&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">  </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">　　var arr = [1,2,3,4];  </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">   arr = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式为将arr重新复制为空数组，之前的数组如果没有被引用，将等待垃圾回收。</p><h3 id="_9、数组去重的方法" tabindex="-1"><a class="header-anchor" href="#_9、数组去重的方法"><span>9、数组去重的方法</span></a></h3><p>https://csmsimona.github.io/myDocs/#/zh-cn/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/%E6%89%8B%E5%86%99js?id=%e6%95%b0%e7%bb%84%e5%8e%bb%e9%87%8d</p><p><strong>1、利用ES6 Set去重（ES6中最常用）</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> //[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {}, {}]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不考虑兼容性，这种去重的方法代码最少。这种方法无法去掉“{}”空对象。</p><p><strong>2、利用for嵌套for，然后splice去重（ES5中最常用）</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">){            </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;">=</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]==</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">]){         </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">splice</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                j</span><span style="color:#D4D4D4;">--;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">	return</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    //[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, {…}, {…}]     </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    //NaN和{}没有去重，两个null直接消失了</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、for...of + includes()</strong></p><p>双重for循环的升级版，外层用 for...of 语句替换 for 循环，把内层循环改为 includes()</p><p>先创建一个空数组，当 includes() 返回 false 的时候，就将该元素 push 到空数组中</p><p>类似的，还可以用 indexOf() 来替代 includes()</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> i</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includes</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> result</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">   // [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]      //NaN、{}没有去重</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、利用indexOf去重</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;type error!&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> array</span><span style="color:#D4D4D4;"> = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">indexOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]) === -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> array</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">   // [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]      //NaN、{}没有去重</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5、利用hasOwnProperty</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {};</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> unique</span><span style="color:#D4D4D4;"> = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;">(!</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]])) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            unique</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> unique</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}]   //所有的都去重了</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6、利用filter</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">filter</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">indexOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) === </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7、利用Map数据结构去重</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> arrayNonRepeatfy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> map</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> array</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">();  </span><span style="color:#6A9955;">// 数组用于返回结果</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">has</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">])) {  </span><span style="color:#6A9955;">// 如果有该key值</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">], </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> { </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">], </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// 如果没有该key值</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  } </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> array</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;"> var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">arrayNonRepeatfy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, {…}, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, undefined]</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// {}没去</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。</p><p><strong>8、利用reduce+includes</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reduce</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">prev</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> prev</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includes</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">) ? </span><span style="color:#9CDCFE;">prev</span><span style="color:#D4D4D4;"> : [...</span><span style="color:#9CDCFE;">prev</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">],[]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>9、for...of + Object</strong></p><p>首先创建一个空对象，然后用 for 循环遍历</p><p>利用对象的属性不会重复这一特性，校验数组元素是否重复</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {}</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> result</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;true&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;NaN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">,{},{}];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">unique</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// [1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, {…}]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、数组拍平" tabindex="-1"><a class="header-anchor" href="#_10、数组拍平"><span>10、数组拍平</span></a></h3><p>https://csmsimona.github.io/myDocs/#/zh-cn/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/%E6%89%8B%E5%86%99js?id=%e6%95%b0%e7%bb%84%e6%89%81%e5%b9%b3%e5%8c%96</p><p><strong>1、递归</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> flatArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	var</span><span style="color:#9CDCFE;"> newArr</span><span style="color:#D4D4D4;"> = [];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">		if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			newArr</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">newArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">concat</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">flatArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		} </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">			newArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	})</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">	return</span><span style="color:#9CDCFE;"> newArr</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、reduce</strong></p><p>语法：<code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</code></p><ul><li>total：必需。初始值或计算结束之后的返回值</li><li>currentValue：必需。当前元素</li><li>currentIndex：可选。当前元素的索引</li><li>arr：可选。当前元素所属的数组对象</li><li>initialValue：可选。传递给函数的初始值</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> flatArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">   return</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reduce</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">pre</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> pre</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">concat</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">) ? </span><span style="color:#DCDCAA;">flatArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">) : </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">), [])</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.利用数组join()或toString()方法</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// join()</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> flatArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">	return</span><span style="color:#4FC1FF;"> JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`[</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">join</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">]\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// toString()</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> flatArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">	return</span><span style="color:#4FC1FF;"> JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`[</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">]\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.es6数组的flat()方法 (浏览器版本过低不支持)</strong></p><p>flat方法默认打平一层嵌套，也可以接受一个参数表示打平的层数，传 Infinity 可以打平任意层。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> flatArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  	return</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">flat</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">Infinity</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、随机打乱数组" tabindex="-1"><a class="header-anchor" href="#_11、随机打乱数组"><span>11、随机打乱数组</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> randomsort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">random</span><span style="color:#D4D4D4;">() &gt; </span><span style="color:#B5CEA8;">.5</span><span style="color:#D4D4D4;"> ? -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> : </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    //用Math.random()函数生成0~1之间的随机数与0.5比较，返回-1或1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">randomsort</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// es6 写法</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">random</span><span style="color:#D4D4D4;">() - </span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12、根据数组中对象的某一个属性值进行排序" tabindex="-1"><a class="header-anchor" href="#_12、根据数组中对象的某一个属性值进行排序"><span>12、根据数组中对象的某一个属性值进行排序</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;">&#39;zopp&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">},</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;">&#39;gpp&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;">18</span><span style="color:#D4D4D4;">},</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;">&#39;yjj&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 方法一</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> compare</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">property</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> value1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">property</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> value2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">property</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> value1</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">value2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">compare</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;age&#39;</span><span style="color:#D4D4D4;">)));</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 方法二</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">));</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span>Object</span></a></h2><h3 id="_1、深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#_1、深拷贝和浅拷贝"><span>⭐1、深拷贝和浅拷贝</span></a></h3><p>https://csmsimona.github.io/myDocs/#/zh-cn/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/%E6%89%8B%E5%86%99js?id=%e6%b7%b1%e6%b5%85%e6%8b%b7%e8%b4%9d</p><p><strong>区别</strong></p><p>1.浅拷贝： 将原对象或原数组的<strong>引用</strong>直接赋给新对象，新数组，新对象／数组只是原对象的一个引用</p><p>2.深拷贝： 创建一个新的对象和数组，将原对象的各项属性的“<strong>值</strong>”（数组的所有元素）拷贝过来，是“值”而不是“引用”</p><p><strong>为什么要使用深拷贝？</strong></p><p>我们希望在改变新的数组（对象）的时候，不改变原数组（对象）</p><p><strong>深拷贝数组</strong></p><p>1.直接遍历</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> copyArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">     res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">copyArr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.slice()</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">slice</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.concat()</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">concat</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>4.扩展运算符...</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr2</span><span style="color:#D4D4D4;"> = [...</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>深拷贝对象</strong></p><p>迭代递归法</p><p>这是最常规的方法，思想很简单：就是对对象进行迭代操作，对它的每个值进行递归深拷贝。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> newObj</span><span style="color:#D4D4D4;">= </span><span style="color:#9CDCFE;">obj</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Array</span><span style="color:#D4D4D4;"> ? []:{};</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> temple</span><span style="color:#D4D4D4;">= </span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">] == </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#DCDCAA;">deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">]):</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        newObj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">temple</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> newObj</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newObj</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> val</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Object</span><span style="color:#D4D4D4;">) {   </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      var</span><span style="color:#9CDCFE;"> tempObj</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#9CDCFE;"> val</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">tempObj</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      newObj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">tempObj</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      newObj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“一招鲜，吃遍天” ——序列化反序列化法**</p><p><strong>JSON.parse(JSON.stringify(XXXX))</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> array</span><span style="color:#D4D4D4;"> = [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">number:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;"> },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">number:</span><span style="color:#B5CEA8;"> 2</span><span style="color:#D4D4D4;"> },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">number:</span><span style="color:#B5CEA8;"> 3</span><span style="color:#D4D4D4;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> copyArray</span><span style="color:#D4D4D4;"> = </span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">copyArray</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//  [{number: 1}, { number: 2 }, { number: 3 }]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">copyArray</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// [{number: 100}, { number: 2 }, { number: 3 }]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它也只能深拷贝对象和数组，对于其他种类的对象，会失真。这种方法比较适合平常开发中使用，因为通常不需要考虑对象和数组之外的类型。</p><p>缺点：</p><ul><li>会忽略undefined</li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ul><p>在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝性能最快的。当然如果你的数据中含有以上三种情况下，可以使用lodash的深拷贝函数。</p><h3 id="_2、object-assign" tabindex="-1"><a class="header-anchor" href="#_2、object-assign"><span>2、Object.assign()</span></a></h3><p>语法：<code>Obejct.assign(target,...sources)</code></p><p>用途：将来自一个或多个源对象中的值复制到一个目标对象，它将返回目标对象。</p><p>其中对象的继承属性和不可枚举属性是不能拷贝的，所以不能使用它来实现深拷贝。</p><p>assign这个方法会把原型上面的内容也拷贝了。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;">&quot;goudan&quot;</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> obj2</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;">&quot;xiaofei&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">sex</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;man&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">assign</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//在obj的__proto__对象上面也会有sex属性</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一级属性深拷贝，从第二级属性开始就是浅拷贝。</p><p>如果多个源对象具有同名属性，则排位靠后的源对象会覆盖排位靠前的。但null或undefined被视为空对象一样对待，不会覆盖。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> receiver</span><span style="color:#D4D4D4;"> = {};</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">assign</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">, </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    	type:</span><span style="color:#CE9178;"> &quot;js&quot;</span><span style="color:#D4D4D4;">, </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    	name:</span><span style="color:#CE9178;">&quot;file.js&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	},</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    	type:</span><span style="color:#CE9178;"> &quot;css&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">receiver</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// {type: &quot;css&quot;, name: &quot;file.js&quot;}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//实现 deepAssign({a: {b: 1, c: 2}}, {a: {c: 3}});</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//=&gt; {a: {b: 1, c: 3}}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 只有两个对象</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> deepAssign</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj2</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        obj1</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> obj2</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#DCDCAA;">deepAssign</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj1</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">]) : </span><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> obj1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 通用</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> deepAssign</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> args</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> args</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reduce</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">deepClone</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(!</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) ? [] : {};</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      for</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] ===</span><span style="color:#CE9178;">&quot;object&quot;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#DCDCAA;">deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]) : </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rexgexp等" tabindex="-1"><a class="header-anchor" href="#rexgexp等"><span>RexgExp等</span></a></h2><h3 id="_1、正则表达式" tabindex="-1"><a class="header-anchor" href="#_1、正则表达式"><span>1、正则表达式</span></a></h3><p><a href="zh-cn/JavaScript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8">正则表达式入门</a></p><h4 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h4><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配任意字符除了换行符和回车。</td></tr><tr><td style="text-align:center;">[]</td><td style="text-align:center;">匹配方括号内的任意字符。比如[0-9]就可以用来匹配任意数字。</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">^9，这样使用代表匹配以9开头。[ ^9 ]，这样使用代表不匹配方括号内除了9的字符。</td></tr><tr><td style="text-align:center;">$</td><td style="text-align:center;">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39;。</td></tr><tr><td style="text-align:center;">{n,m}</td><td style="text-align:center;">匹配n~m位字符。如 /b{n,m}/g，就是最少出现n次b，最多出现m次b。</td></tr><tr><td style="text-align:center;">(abc)</td><td style="text-align:center;">只匹配和abc相同的字符串。</td></tr><tr><td style="text-align:center;">|</td><td style="text-align:center;">匹配|前后任意字符。</td></tr><tr><td style="text-align:center;">\\</td><td style="text-align:center;">转义。</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">匹配0~n位字符。如 /b*/g，就是可以不出现b，也可以出现一次或多次。</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">匹配1~n位字符。如 /b+/g，就是至少出现一次b。</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">？之前字符可选，0或1位。如 /colou?r/g，就是可以匹配color或colour。</td></tr></tbody></table><h4 id="修饰语" tabindex="-1"><a class="header-anchor" href="#修饰语"><span>修饰语</span></a></h4><table><thead><tr><th style="text-align:center;">修饰语</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td style="text-align:center;">忽略大小写</td></tr><tr><td style="text-align:center;">g</td><td style="text-align:center;">全局搜索</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:center;">多行</td></tr></tbody></table><h4 id="字符简写" tabindex="-1"><a class="header-anchor" href="#字符简写"><span>字符简写</span></a></h4><table><thead><tr><th style="text-align:center;">简写</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">匹配字母数字或下划线</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">和上面相反</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">匹配任意的空白符</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">和上面相反</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">匹配数字</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">和上面相反</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">匹配单词边界（单词的开始和结束）</td></tr><tr><td style="text-align:center;">\\B</td><td style="text-align:center;">和上面相反</td></tr></tbody></table><h4 id="检索规则" tabindex="-1"><a class="header-anchor" href="#检索规则"><span>检索规则</span></a></h4><p>1.test()方法用来检测一个字符串是否匹配某个正则表达式，如果匹配成功，返回true，否则返回false</p><p>2.exec()方法用来检索字符串中与正则表达式匹配的值。exec()方法返回一个数组，其中存放匹配的结果。如果未找到匹配的值，则返回null</p><p>3.compile()方法可以在脚本执行过程中编译正则表达式，也可以改变已有表达式</p><h4 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式"><span>创建方式</span></a></h4><p>1、字面量语法：/pattern/ attributes</p><p>2、创建RegExp对象的语法：new RegExp(pattern, attributes)</p><p>attributes：g:全局匹配 i:大小写匹配 m:多行匹配</p><p>例一：删除一个字符串中所有的英文</p><p><code>doc = doc.replace(/[A-Za-z]+/g, &#39;&#39;);</code></p><p>例二：验证一个字符串是否是电话号码</p><p><code>/^[1][358][0-9]{9}$/</code></p><p>例三：将原字符串中的所有空白字符替换成&quot;&quot;</p><p><code>replace(/\\s/g,&quot;&quot;)</code></p><p>&quot;/ /&quot;这个是固定写法，&quot;\\s&quot;是转移符号用以匹配任何空白字符，包括空格、制表符、换页符等等，&quot;g&quot;表示全局匹配将替换所有匹配的子串，如果不加&quot;g&quot;当匹配到第一个后就结束了。</p><h2 id="function" tabindex="-1"><a class="header-anchor" href="#function"><span>Function</span></a></h2><h3 id="_1、形参和arguments" tabindex="-1"><a class="header-anchor" href="#_1、形参和arguments"><span>1、形参和arguments</span></a></h3><p>该参数是一个类似于数组的结构（可以像数组一样遍历，还可以使用下标来访问数据），但是并不是数组。</p><p>1、函数调用的时候，会把实参的值赋给形参，而且会使用arguments来接收实参</p><p>2、如果实参的个数超过形参的个数，那么可以通过arguments来获取超出的数据</p><p>3、如果实参的个数小于形参的个数，那么不足的全部设置为undefined</p><p>两者之间是关联的关系</p><p>函数名.length =&gt; 形参的长度（个数）</p><h3 id="_2、在函数体内可以通过arguments对象来访问这个参数数组-从而获取传递给函数的每一个参数" tabindex="-1"><a class="header-anchor" href="#_2、在函数体内可以通过arguments对象来访问这个参数数组-从而获取传递给函数的每一个参数"><span>2、在函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> doadd</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        alert</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        alert</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] + </span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">doAdd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 20</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">doAdd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 50</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、立即执行函数" tabindex="-1"><a class="header-anchor" href="#_3、立即执行函数"><span>3、立即执行函数</span></a></h3><p>声明一个函数，并马上调用这个匿名函数就叫做立即执行函数；也可以说立即执行函数是一种语法，让你的函数在定义以后立即执行。</p><p>立即执行函数的作用：</p><ol><li><p>不必为函数命名，避免了污染全局变量</p></li><li><p>立即执行函数内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量</p><p>例子：</p></li></ol><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> foo</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">     foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">; </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">     console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}())</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// ƒ foo() { foo = 10; console.log(foo) }</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 因为当js解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到foo，所以打印的还是这个函数，并且外部的值也没有发生更改。</p><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>⭐作用域</span></a></h2><h3 id="_1、变量提升" tabindex="-1"><a class="header-anchor" href="#_1、变量提升"><span>1、变量提升</span></a></h3><p><strong>变量定义</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// undefined</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">实际</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> 变量定义提升</span><span style="color:#D4D4D4;">（</span><span style="color:#4FC1FF;">PS</span><span style="color:#D4D4D4;">：</span><span style="color:#9CDCFE;">变量声明的提升仅仅是声明提升了</span><span style="color:#D4D4D4;">，</span><span style="color:#9CDCFE;">赋值并不会提升</span><span style="color:#D4D4D4;">）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数声明</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// zhangsan 20</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：函数声明和函数表达式的区别</p><p>函数声明： <code>function fn() {}</code> fn()不会报错，函数声明能提前。</p><p>函数表达式：<code>var fn1 = function() {}</code> fn1()报错，这时只有变量声明提前。</p><p>另外：函数声明的提升在变量声明的提升之上的</p><h3 id="_2、this" tabindex="-1"><a class="header-anchor" href="#_2、this"><span>2、this</span></a></h3><p>另外，可以看看这篇文章：https://www.cnblogs.com/pengshengguang/p/11105323.html</p><p><strong>this对象是在运行时基于函数的执行环境绑定的:</strong></p><ul><li><p>在全局函数中，<strong>this---&gt;window</strong></p></li><li><p>在函数中</p><p>1、作为对象的方法来调用 <strong>this---&gt;当前的对象</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;A&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    printName</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// this -&gt; obj这个被新创建出来的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printName</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、作为普通的函数调用 <strong>this---&gt;window</strong></p><p>（1.2可总结为 看函数名前面是否有“.” ，有的话， “.”前面是谁，this就是谁；没有的话this就是window ）</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// this -&gt; window</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、作为构造函数和new使用 <strong>this---&gt;构造函数内部新创建的对象</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Foo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;">// this -&gt; f 这个被新创建出来的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> f</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Foo</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、被call，apply或bind调用（函数上下文调用） <strong>this---&gt;第一个参数</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn1</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// {x: 100}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">fn1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">x:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">}, </span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn2</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// {y: 200}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">fn2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">y:</span><span style="color:#B5CEA8;"> 200</span><span style="color:#D4D4D4;">}, </span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">)()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、立即执行函数中的<strong>this永远都是window</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// this-&gt;window</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、箭头函数<strong>不绑定this，会捕获其所在的上下文的this值</strong>，作为自己的this值。</p><p>箭头函数本身没有this，箭头函数中的this是在它声明时捕获它所处作用域中的this。</p><p>特别说明：this一旦被捕获，以后将不再变化。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;aaa&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#DCDCAA;"> func</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// this -&gt; window</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">func</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 箭头函数在全局作用域声明，所以它捕获全局作用域中的this，this指向window对象。</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;aaa&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> wrap</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;">// this -&gt; owrap这个被新创建出来的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;bbb&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#DCDCAA;"> func</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">webName</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// this -&gt; owrap这个被新创建出来的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  func</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> owrap</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> wrap</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 函数作用域中的this指向创建的对象实例。箭头函数也随之被声明，此时捕获这个this，也指向创建的对象实例</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 call() 或 apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;aaa&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> b</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">a:</span><span style="color:#CE9178;"> &#39;bbb&#39;</span><span style="color:#D4D4D4;">}; </span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> fn1</span><span style="color:#D4D4D4;">() { </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// {a: &#39;bbb&#39;}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// bbb</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">} </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">fn1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#DCDCAA;"> fn2</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> { </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);   	</span><span style="color:#6A9955;">// window</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// aaa</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">} </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">fn2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3、apply-call与bind" tabindex="-1"><a class="header-anchor" href="#_3、apply-call与bind"><span>3、apply，call与bind</span></a></h3><p>共同点：</p><p>1、都是用来<strong>改变函数的this对象的指向</strong>的。 2、第一个参数都是this要指向的对象。 3、都可以利用后续参数传参。</p><p>区别：</p><ul><li><p>apply：最多只能有两个参数——<strong>新this对象和一个数组arrArray</strong>。<strong>立即调用</strong></p><p><code>xw.say.apply(xh, [1,2,3,4]);</code></p></li><li><p>call：它可以接受多个参数，<strong>第一个参数与apply一样</strong>，后面则是<strong>一串参数列表</strong>。<strong>立即调用</strong></p><p><code>xw.say.call(xh, 1, 2, 3, 4);</code></p></li><li><p>bind：bind() 方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的<strong>第一个参数 作为 this</strong>，传入 bind() 方法的<strong>第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数</strong>来调用原函数。bind改变this作用域会返回一个新的函数，这个函数<strong>不会马上执行</strong>。</p><p><code>xw.say.bind(xh, 1, 2, 3, 4)();</code> 或 <code>xw.say.bind(xh)(1, 2, 3, 4);</code></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#4EC9B0;">Function</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">rest</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 改变this指向给context</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> fn</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">, [...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">rest</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> func</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// {a: 1}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> newFunc</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">func</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">a:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">newFunc</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">);	</span><span style="color:#6A9955;">// args:[1, 2, 3, 4]  rest:[5, 6, 7, 8]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4、作用域" tabindex="-1"><a class="header-anchor" href="#_4、作用域"><span>4、作用域</span></a></h3><p>作用域是指对某一变量和方法具有访问权限的代码空间。</p><ul><li><p>全局作用域：在函数或代码块{}外定义的变量拥有全局作用域，即对任何内部函数来说，都是可以访问的。</p><p>注意：在函数内部或代码块中没有定义的变量实际上是作为window/global的属性存在，而不是全局变量。换句话说没有使用var定义的变量虽然有用全局作用域，但是它是可以被delete，而全局变量不可以。</p></li><li><p>块级作用域：存在于函数内部或块中（字符{和}之间的区域）</p></li></ul><h3 id="_5、作用域链" tabindex="-1"><a class="header-anchor" href="#_5、作用域链"><span>5、作用域链</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> F1</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> b</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">200</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> F2</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> c</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">300</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)	</span><span style="color:#6A9955;">// a是自由变量，向父级作用域寻找a，未果，再向上一级父级作用域寻找a</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">)	</span><span style="color:#6A9955;">// b是自由变量，向父级作用域寻找b</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    F2</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">F1</span><span style="color:#D4D4D4;">()               </span><span style="color:#6A9955;">// 自由变量不断地往父级作用域去找，形成一个链式结构</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改变作用域链的方法</p><p>with、try...catch、eval</p><p>例题：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> F1</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">200</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    F2</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> F2</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">F1</span><span style="color:#D4D4D4;">()             </span><span style="color:#6A9955;">// 100</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> F1</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">200</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> F2</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    F2</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">F1</span><span style="color:#D4D4D4;">()             </span><span style="color:#6A9955;">// 200</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>⭐闭包</span></a></h2><h3 id="_1、闭包以及实际应用" tabindex="-1"><a class="header-anchor" href="#_1、闭包以及实际应用"><span>1、闭包以及实际应用</span></a></h3><p>**闭包就是能够读取其他函数内部变量的函数。**只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p><p>简单来说：闭包是在 A 函数里面返回的 B 函数，然后 B 函数里面一直引用着 A 函数的局部变量。</p><p><strong>闭包的用途</strong>：</p><p>1、读取函数内部的变量，并且让这些变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)。</p><p>2、让函数外部可以操作(读写)函数内部的数据(变量/函数)</p><p>3、封装变量，收敛权限</p><p><strong>缺点：</strong></p><p>1、容易形成循环引用，比普通函数占用更多的内存。</p><p>2、闭包会导致原始作用域链不释放,造成内存泄漏。</p><p>3、参数和变量不会被垃圾回收机制回收。</p><p><strong>解决方法：</strong></p><ul><li>把造成循环引用的变量设为null</li><li>不用的变量及时释放</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> fn1</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#9CDCFE;"> Array</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">99999999999999999</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        function</span><span style="color:#DCDCAA;"> fn2</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> fn2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> f</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">fn1</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    f</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    f</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>闭包的实际应用</strong></p><p><strong>1.通过闭包可以让内层函数延迟执行，只有需要时再执行它</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> highLevelFunct2</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;b&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;c&#39;</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#DCDCAA;"> size</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        alert</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    };</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> size</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> testClosure</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> f</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">highLevelFunct2</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    f</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.通过闭包，内层函数可以将外层函数的局部变量进行封装，封闭后就只有内层函数才能访问到外层函数的局部变量。</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//  计数器</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> myCounter</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> counter</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> add</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> counter</span><span style="color:#D4D4D4;"> += </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> testClosure</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> increase</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">myCounter</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    increase</span><span style="color:#D4D4D4;">();	</span><span style="color:#6A9955;">// 1</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    increase</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 2</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    increase</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 3</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.定义JS模块</strong></p><ul><li>将所有的数据和功能都封装在一个函数内部(私有的)</li><li>只向外暴露一个包含多个方法的对象或函数</li><li>模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// MyTool.js</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> myTool</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 1. 私有的数据</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> money</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 2. 提供操作私有数据的函数</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> get</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        money</span><span style="color:#D4D4D4;"> *= </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;赚了一笔钱, 总资产:&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">money</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;元&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> send</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        money</span><span style="color:#D4D4D4;"> --;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;花了一笔钱, 总资产:&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">money</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;元&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;get&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> get</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;send&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> send</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text/javascript&quot;</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;js/MyTool.js&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text/javascript&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">   var toolObj = myTool();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">   toolObj.get();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">   toolObj.send();</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// MyTool1.js</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">w</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 1. 私有的数据</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> money</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 2. 提供操作私有数据的函数</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> get</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        money</span><span style="color:#D4D4D4;"> *= </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;赚了一笔钱, 总资产:&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">money</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;元&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> send</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        money</span><span style="color:#D4D4D4;"> --;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;花了一笔钱, 总资产:&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">money</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;元&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 向外部暴露对象</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    w</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">myTool</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;get&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> get</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;send&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> send</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;js/MyTool1.js&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    (function () </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">myTool</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">myTool</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        myTool</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        myTool</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        var</span><span style="color:#9CDCFE;"> str</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    }</span><span style="color:#D4D4D4;">)();</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.实现防抖函数</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">   function</span><span style="color:#DCDCAA;"> debounce</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">delay</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> timer</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            clearTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">timer</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            timer</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">delay</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">   debounce</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">       console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;大家好!!!&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">   }, </span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">)();</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏"><span>内存泄漏</span></a></h2><h3 id="_1、代码回收规则" tabindex="-1"><a class="header-anchor" href="#_1、代码回收规则"><span>1、代码回收规则</span></a></h3><p>1.全局变量不会被回收</p><p>2.局部变量会被回收，也就是函数一旦运行完以后，函数内部的东西都会被销毁</p><p>3.只要被另外一个作用域所引用就不会被回收（闭包）</p><h3 id="_2、内存溢出和内存泄漏" tabindex="-1"><a class="header-anchor" href="#_2、内存溢出和内存泄漏"><span>2、内存溢出和内存泄漏</span></a></h3><h4 id="内存溢出" tabindex="-1"><a class="header-anchor" href="#内存溢出"><span>内存溢出</span></a></h4><p>一种程序运行出现的错误</p><p>当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arrObj</span><span style="color:#D4D4D4;"> = {};</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#B5CEA8;">100000000</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	arrObj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arrObj</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内存泄漏-1" tabindex="-1"><a class="header-anchor" href="#内存泄漏-1"><span>内存泄漏</span></a></h4><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</p><ul><li><p>占用的内存没有及时释放</p></li><li><p>内存泄漏积累多了就容易导致内存溢出</p><p>常见的内存泄漏:</p></li></ul><ol><li>占用内存很大的全局变量</li><li>没有及时清理的计时器/定时器</li><li>闭包</li></ol><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">    // 占用内存很大的全局变量</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num3</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num4</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num5</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num6</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> num7</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">99999999</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    num</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">   // 没有及时清理的计时器/定时器</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> intervalId</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">setInterval</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;-----&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    clearInterval</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">intervalId</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">   // 闭包</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> fn1</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> num</span><span style="color:#D4D4D4;">  = </span><span style="color:#B5CEA8;">1111</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        function</span><span style="color:#DCDCAA;"> fn2</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            num</span><span style="color:#D4D4D4;">--;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> fn2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> f</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">fn1</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    f</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    f</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、v8下的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_3、v8下的垃圾回收机制"><span>3、V8下的垃圾回收机制</span></a></h3><p>转载自https://yuchengkai.cn/docs/frontend</p><p>V8将内存（堆）分为新生代和老生代两部分</p><h4 id="新生代算法" tabindex="-1"><a class="header-anchor" href="#新生代算法"><span>新生代算法</span></a></h4><p>新生代中的对象一般存活时间较短，使用Scavenge GC算法。</p><p>在新生代空间中，内存空间分为两部分，分别为From空间和To空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象就会被放入From空间中，当From空间被占满时，新生代GC就会启动了。算法会检查From空间中存活的对象并复制到To空间中，如果有失活的对象就会销毁。当复制完成后将From空间和To空间互换，这样GC就结束了。</p><h4 id="老生代算法" tabindex="-1"><a class="header-anchor" href="#老生代算法"><span>老生代算法</span></a></h4><p>老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。</p><p>什么情况下对象会出现在老生代空间中：</p><ul><li>新生代的对象是否已经经历过一次Scavenge算法，如果经历过的话，会将对象从新生代空间移到老生代空间中</li><li>To空间的对象占比大小超过25%。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中</li></ul><p>老生代中的空间很复杂。</p><p>在老生代中，以下情况会先启动标记清除算法：</p><ul><li>某一个空间没有分块的时候</li><li>空间中被对象超过一定限制</li><li>空间不能保证新生代中的对象移动到老生代中</li></ul><p>清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象向一端移动，直到所有对象都移动完成然后清理掉不需要的内存。</p><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><h3 id="_1、创建对象的方式" tabindex="-1"><a class="header-anchor" href="#_1、创建对象的方式"><span>1、创建对象的方式</span></a></h3><p>1、字面量的方式创建对象</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;张三&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    run</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;跑&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、内置构造函数的方法</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Object</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;张三&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;跑&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：使用内置构造函数的方式和字面量的方式来创建对象差不多但都存在以下问题</p><p>​ 1）创建的对象无法复用，复用性差</p><p>​ 2）如果需要创建多个同类型的对象，需要书写大量重复的代码，代码冗余度高</p><p>3、简单工厂函数方式</p><p>问题：无法判定类型</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Product</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    init</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;init&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Creator</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    ctreate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Product</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> creator</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Creator</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">creator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;p1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、自定义构造函数的方式来创建对象</strong></p><ul><li><p>自定义构造函数和工厂函数的对比</p><p>1、函数的首字母大写（用于区别构造函数和普通函数）</p><p>2、创建对象的过程是由new关键字实现的</p><p>3、在构造函数内部会自动的创建新对象，并赋给this指针</p><p>4、自动返回创建出来的对象</p><ul><li><p><strong>构造函数的执行过程</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">sex</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 1、自动创建一个空对象，把这个对象的地址 this =&gt; 新对象</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // var this = new Object()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 2、this给空对象绑定属性和行为</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">sex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">sex</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 3、返回this</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // return this</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>构造函数的返回值说明</strong></p><p>1、如果在构造函数中没有显示的return，则默认返回的是新创建出来的对象</p><p>2、如果在构造函数中显示的return对象，则依照具体的情况处理</p><p>​ 1&gt;return的是对象，则直接返回这个对象，取而代之本该默认返回的新对象</p><p>​ 2&gt;return的是null或基本数据类型值，则返回新创建的对象</p></li></ul></li></ul><h3 id="_2、new一个对象的过程" tabindex="-1"><a class="header-anchor" href="#_2、new一个对象的过程"><span>2、new一个对象的过程</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">   function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">) {  </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;  </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;  </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">;  </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {  </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;  </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }  </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tom&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;WEB&quot;</span><span style="color:#D4D4D4;">);  </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、创建一个新对象，如：var person = {};</p><p>2、新对象的_ proto _属性指向构造函数的原型对象。</p><p>3、将构造函数的作用域赋值给新对象。（this对象指向新对象）</p><p>4、执行构造函数内部的代码，将属性和方法添加给person中的this对象。</p><p>5、返回新对象person。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> person</span><span style="color:#D4D4D4;"> = {};  </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_proto_</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">;</span><span style="color:#6A9955;">//引用构造函数的原型对象  </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  Person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">//将构造函数的作用域给person,即：this值指向person  </span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  Function</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">methods</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;new&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {  </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     //新创建一个对象，它继承了构造器的原型对象。  </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">     var</span><span style="color:#9CDCFE;"> that</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//此时，this是指向Function构造器的。  </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     //调用构造器，绑定this对象到新对象that上  </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">     var</span><span style="color:#9CDCFE;"> other</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">that</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">argument</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//此时，this对象指向that对象。  </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     //如果它的返回值不是一个对象，就返回新的对象。  </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">     return</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> other</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;object&quot;</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">other</span><span style="color:#D4D4D4;">) || </span><span style="color:#9CDCFE;">that</span><span style="color:#D4D4D4;">;  </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> });</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过new关键字创建某构造函数的新实例对象，<strong>就是将原型链与实例的this联系起来，this指向这个新对象，同时也指向这个构造函数</strong>，并且this对象还是这个构造函数的实例。</p><p>对于new来说，还需要注意下运算符优先级。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Foo</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;1&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;2&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">new</span><span style="color:#9CDCFE;"> Foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 1</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Foo</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 2</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// new Foo()的优先级大于new Foo，所以对于上述代码来说可以这样划分执行顺序</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">Foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Foo</span><span style="color:#D4D4D4;">()).</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">();</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、删除对象" tabindex="-1"><a class="header-anchor" href="#_3、删除对象"><span>3、删除对象</span></a></h3><p>delete 删除对象中的属性；删除没有使用var关键字声明的全局变量</p><p>注意：</p><p>1、返回值：布尔类型的值（通过该值判断是否删除成功）</p><p>2、使用var关键字声明的变量无法被删除</p><p>3、删除对象中不存在的属性没有任何变化，但是返回值为true</p><p>4、不能删除window下面的全局变量（使用var声明）但可以删除定义在window上面的属性</p><h3 id="_4、in、hasownproperty、isprototypeof、object-getprototypeof" tabindex="-1"><a class="header-anchor" href="#_4、in、hasownproperty、isprototypeof、object-getprototypeof"><span>4、in、hasOwnProperty、isPrototypeOf、Object.getPrototypeOf()</span></a></h3><h4 id="_1、in" tabindex="-1"><a class="header-anchor" href="#_1、in"><span>1、in</span></a></h4><p><strong>判断一个对象是否拥有这个属性。如果对象上没有，就去它的原型对象里面找</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">address</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;杭州&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;csm&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;">);			</span><span style="color:#6A9955;">// true  注意：这里name要加引号表示字符串，不然就是全局变量了</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;address&#39;</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// true</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、hasownproperty" tabindex="-1"><a class="header-anchor" href="#_2、hasownproperty"><span>2、hasOwnProperty</span></a></h4><p><strong>判断当前对象是否拥有这个属性，只到对象自身查找，不查找原型上的属性</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">address</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;杭州&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;csm&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;">));		</span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;address&#39;</span><span style="color:#D4D4D4;">));		</span><span style="color:#6A9955;">// false</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、isprototypeof" tabindex="-1"><a class="header-anchor" href="#_3、isprototypeof"><span>3、isPrototypeOf</span></a></h4><p><strong>判断一个对象是否是某个实例的原型对象</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;csm&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 判断p的原型指针是否指向传入构造函数的原型对象，这个过程会往上层层判断。</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">));		</span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">));     </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">));		</span><span style="color:#6A9955;">// false</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、tostring方法、valueof方法、symbol-toprimitive方法" tabindex="-1"><a class="header-anchor" href="#_5、tostring方法、valueof方法、symbol-toprimitive方法"><span>5、toString方法、valueOf方法、Symbol.toPrimitive方法</span></a></h3><p>每个对象都有一个toString()方法和valueOf方法</p><p>其中<strong>toString()方法返回一个表示该对象的字符串，valueOf方法返回该对象的原始值</strong>。</p><p>对于<strong>一个对象，toString()返回&quot;[object type]&quot;，其中type是对象类型</strong>。</p><p>如果不是对象，toString()返回应有的文本值。</p><p><strong>toString()方法和String()方法的区别</strong></p><p>toString()方法和String()方法都可以转换为字符串类型。</p><p>1、toString()可以将所有的数据都转换为字符串，除了<strong>null和undefined</strong>。</p><p>null和undefined调用toString()方法会报错。</p><p>如果当前数据为数字类型，则toString()括号中的可以写一个数字，代表进制，可以将数字转化为对应进制字符串。</p><p>2、String()可以将null和undefined转换为字符串，但是<strong>没法转进制字符串</strong>。</p><p><strong>Symbol.toPrimitive</strong></p><p>JavaScript 对象转换到基本类型值时，会使用 ToPrimitive 算法，这是一个内部算法，是编程语言在内部执行时遵循的一套规则。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 没有 Symbol.toPrimitive 属性的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj1</span><span style="color:#D4D4D4;"> = {};</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(+</span><span style="color:#9CDCFE;">obj1</span><span style="color:#D4D4D4;">);       </span><span style="color:#6A9955;">//NaN</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">obj1</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">//&quot;[object Object]&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj1</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">//&quot;[object Object]&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的结果我们可以通过上面说的toString()方法和value方法去理解。 第一个，+符号。可以看成是是把数据转化为数字类型，由于obj是个空对象，所以结果是NaN 第二个，是es6中的字符串的新语法，这里需要的结果是一个字符串，所以使用的是toString()方法，而toString()方法返回的是对象的类型。 第三个，这里是连接符连接obj。实际上也是需要字符串的结果，所以同理。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 拥有 Symbol.toPrimitive 属性的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj2</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toPrimitive</span><span style="color:#D4D4D4;">](</span><span style="color:#9CDCFE;">hint</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">hint</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;number&quot;</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#B5CEA8;"> 10</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">hint</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;string&quot;</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#CE9178;"> &quot;hello&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(+</span><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;">);     </span><span style="color:#6A9955;">//10    --hint in &quot;number&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">obj2</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//hello --hint is &quot;string&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//&quot;true&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象在转换基本类型时，首先会调用valueOf然后调用toString。并且这两个方法你是可以重写的。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    valueOf</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然你也可以重写Symbol.toPrimitive，该方法在转基本类型时调用优先级最高。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    valueOf</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    toString</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#CE9178;"> &#39;1&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toPrimitive</span><span style="color:#D4D4D4;">]() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#B5CEA8;"> 2</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">a</span><span style="color:#6A9955;"> // 3</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">&#39;1&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">a</span><span style="color:#6A9955;"> // &#39;12&#39;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、对象中属性的遍历" tabindex="-1"><a class="header-anchor" href="#_6、对象中属性的遍历"><span>6、对象中属性的遍历</span></a></h3><p>转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><p>在ES6中共有5种方法实现对对象属性的遍历</p><p>这五种遍历方法都遵循同样的遍历次序规则：</p><p>首先遍历所有数值键，按照数值升序排列。</p><p>其次遍历所有字符串键，按照加入时间升序排列。</p><p>最后遍历所有 Symbol 键，按照加入时间升序排列。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;">&quot;feng&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">sex</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;nan&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#DCDCAA;">Symbol</span><span style="color:#D4D4D4;">()]=</span><span style="color:#CE9178;">&quot;bol&quot;</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-for-in" tabindex="-1"><a class="header-anchor" href="#_1-for-in"><span>(1).for...in</span></a></h4><blockquote><p>for...in 是用来遍历自身属性，和继承的可以枚举的属性。</p></blockquote><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">//name,age,sex</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 此时只输出自身属性</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">//name,age</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-reflect-ownkeys-obj" tabindex="-1"><a class="header-anchor" href="#_2-reflect-ownkeys-obj"><span>(2).Reflect.ownKeys(obj)</span></a></h4><blockquote><p>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p></blockquote><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ownKeys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//[ &#39;name&#39;, &#39;age&#39;, Symbol() ]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-object-keys-obj" tabindex="-1"><a class="header-anchor" href="#_3-object-keys-obj"><span>(3).Object.keys(obj)</span></a></h4><blockquote><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//[ &#39;name&#39;, &#39;age&#39; ]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><h4 id="_4-object-getownpropertynames-obj" tabindex="-1"><a class="header-anchor" href="#_4-object-getownpropertynames-obj"><span>(4).Object.getOwnPropertyNames(obj)</span></a></h4><blockquote><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getOwnPropertyNames</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//[ &#39;name&#39;, &#39;age&#39; ]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><h4 id="_5-object-getownpropertysymbols-obj" tabindex="-1"><a class="header-anchor" href="#_5-object-getownpropertysymbols-obj"><span>(5).Object.getOwnPropertySymbols(obj)</span></a></h4><blockquote><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p></blockquote><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getOwnPropertySymbols</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">//[ Symbol() ]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型"><span>原型</span></a></h2><h3 id="_1、5个原型规则" tabindex="-1"><a class="header-anchor" href="#_1、5个原型规则"><span>1、5个原型规则</span></a></h3><ul><li><p>所有的引用类型（数组，对象，函数），都具有对象特性，即可自由扩展属性（除了null以外）</p></li><li><p>所有的引用类型（数组，对象，函数），都有一个_ proto _(隐式原型)属性，属性值是一个普通对象</p></li><li><p>所有的函数，都有一个prototype(显式原型)属性，属性值也是一个普通对象</p></li><li><p>所有的引用类型（数组，对象，函数）,_ proto _属性值指向他的构造函数的prototype属性</p></li><li><p>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的_ proto _（即它的构造函数的prototype）里面找</p><p>例：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 构造函数</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Foo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">alertName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    alert</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 创建示例</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> f</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Foo</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 测试</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printName</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">alertName</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原型链</p><p>示例中 <code>f.alertName()</code>就需要到<code>f._proto_</code>中也就是<code>Foo.prototype</code>（Foo的原型对象）中查找</p><p><code>f.toString()</code>就要去<code>f._proto_._proto_</code>中查找</p><p><img src="`+p+`" alt=""></p></li></ul><h3 id="_2、原型链" tabindex="-1"><a class="header-anchor" href="#_2、原型链"><span>⭐2、原型链</span></a></h3><ol><li><p>每个构造函数都能构建出一个对象, 这个对象内部有个属性指向着这个函数的原型对象</p></li><li><p>原型对象本质也是一个对象,也是由另外一个构造函数构造出来, 也指向那个构造函数的原型对象，形成一个链式的结构，就称为是原型链</p><p>数组的完整原型链图</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); 								</span><span style="color:#6A9955;">// Array</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); 					</span><span style="color:#6A9955;">// Array</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);					</span><span style="color:#6A9955;">// Function</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Function</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);				</span><span style="color:#6A9955;">// Function</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Function</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// Object</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">);						</span><span style="color:#6A9955;">// null</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);					</span><span style="color:#6A9955;">// Function</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// Object</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://www.processon.com/diagraming/5d808df6e4b0c5c942c450b1</p></li></ol><p><img src="`+o+`" alt=""></p><p>由图可得Function构造函数处于原型链顶端，所有对象的原型对象都由Object构造函数产生</p><h3 id="_3、一个原型链继承的应用实例" tabindex="-1"><a class="header-anchor" href="#_3、一个原型链继承的应用实例"><span>3、一个原型链继承的应用实例</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 写一个封装DOM查询的例子</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Elem</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elem</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Elem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">html</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> elem</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elem</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        elem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">innerHTML</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">;  </span><span style="color:#6A9955;">// 链式操作</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> elem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">innerHTML</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Elem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> elem</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elem</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    elem</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> div1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Elem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;div&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">div1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">html</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&lt;p&gt;hello imooc&lt;/p&gt;&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;clicked&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">html</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&lt;p&gt;javascript&lt;/p&gt;&#39;</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><h3 id="_1、javascript继承的六种方式" tabindex="-1"><a class="header-anchor" href="#_1、javascript继承的六种方式"><span>1、JavaScript继承的六种方式</span></a></h3><p>另外可以看看这两篇文章：</p><p>https://www.cnblogs.com/humin/p/4556820.html</p><p>https://www.cnblogs.com/Grace-zyy/p/8206002.html</p><p>继承就是让子类拥有父类的资源</p><p><strong>继承的意义</strong></p><p>​ 减少代码冗余</p><p>​ 方便统一操作</p><p>​ 弊端</p><p>​ 耦合性比较强</p><p><strong>继承方法</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">	// 父类    </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">       this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;cc&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">       this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;aa&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;bb&#39;</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;跑&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    };</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-原型链继承" tabindex="-1"><a class="header-anchor" href="#_1-原型链继承"><span>1. 原型链继承</span></a></h4><p>核心：将父类的实例作为子类的原型</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">    // 子类        </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;111&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	// 让新实例的原型等于父类的实例</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Student</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> stu</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 111</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    stu</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 跑</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	// 问题：类型问题</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//Person  对象类型改变</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化：修复constructor指针</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">    // 子类        </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">       this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;111&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Student</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 修复constructor指针即可</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Student</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Student</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> stu</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// 111</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    stu</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">(); 				</span><span style="color:#6A9955;">// 跑</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// [&quot;aa&quot;, &quot;bb&quot;]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// Student</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	// 问题：继承过来的实例属性, 如果是引用类型, 会被多个子类的实例共享</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	var</span><span style="color:#9CDCFE;"> stu1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;dd&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// [&quot;aa&quot;, &quot;bb&quot;, &quot;dd&quot;]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">);		</span><span style="color:#6A9955;">// [&quot;aa&quot;, &quot;bb&quot;, &quot;dd&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-借用构造函数继承" tabindex="-1"><a class="header-anchor" href="#_2-借用构造函数继承"><span>2. 借用构造函数继承</span></a></h4><p>核心：在子类型构造函数的内部调用父类构造函数，通过使用call()和apply()方法可以在新创建的对象上执行构造函数。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">    // 子类        </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">       Person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">       this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;111&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	var</span><span style="color:#9CDCFE;"> stu</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// 111</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	// 问题：没用到原型，只能继承父类的实例属性和方法，不能继承原型属性/方法</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    stu</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">(); 				</span><span style="color:#6A9955;">// 报错：stu.run is not a function</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-组合继承" tabindex="-1"><a class="header-anchor" href="#_3-组合继承"><span>3. 组合继承</span></a></h4><p>核心： 将原型链和借用构造函数的技术组合在一块，从而发挥两者之长的一种继承模式。(常用)</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">    // 子类        </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">       Person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">       this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;111&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Student</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Student</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Student</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> stu</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> stu1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;小花&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">); 		</span><span style="color:#6A9955;">// [&quot;aa&quot;, &quot;bb&quot;, &quot;小花&quot;]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">); 	</span><span style="color:#6A9955;">// [&quot;aa&quot;, &quot;bb&quot;]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	// 问题：调用了两次父类构造函数（耗内存）</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-原型式继承" tabindex="-1"><a class="header-anchor" href="#_4-原型式继承"><span>4. 原型式继承</span></a></h4><p>核心：借助原型,然后基于已有的对象, 创建出新对象；同时不需要创建自定义类型</p><p>用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了一个可以随意增添属性的实例或对象。object.create()就是这个原理。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 原型式继承</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> content</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Temp</span><span style="color:#D4D4D4;">() {}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Temp</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> stu1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">content</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-寄生式继承" tabindex="-1"><a class="header-anchor" href="#_5-寄生式继承"><span>5. 寄生式继承</span></a></h4><p>核心：在原型式基础上增强这个对象。所谓增加, 就是指, 再次给这个对象增加一些属性或者方法</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">    // 子类        </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">       this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;111&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Temp</span><span style="color:#D4D4D4;">() {}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Student</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Temp</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    Temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Student</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> stu</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-寄生式组合继承" tabindex="-1"><a class="header-anchor" href="#_6-寄生式组合继承"><span>6. 寄生式组合继承</span></a></h4><p>核心：通过借用函数来继承属性，通过原型链的混成形式来继承方法。（常用）</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">    // 子类</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	function</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        Person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#DCDCAA;"> Temp</span><span style="color:#D4D4D4;">() {}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">    Student</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Temp</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    Temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Student</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	var</span><span style="color:#9CDCFE;"> stu</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;001&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;张三&#39;</span><span style="color:#D4D4D4;">, [</span><span style="color:#CE9178;">&#39;小花&#39;</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> stu1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Student</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;002&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;李四&#39;</span><span style="color:#D4D4D4;">, [</span><span style="color:#CE9178;">&#39;小茂&#39;</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">stu1</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>⭐事件</span></a></h2><h3 id="_1、事件捕获、事件冒泡、事件委托-代理" tabindex="-1"><a class="header-anchor" href="#_1、事件捕获、事件冒泡、事件委托-代理"><span>1、事件捕获、事件冒泡、事件委托（代理）</span></a></h3><p><strong>事件捕获</strong>：事件从最不精确的对象(document对象)开始触发，然后到最精确</p><p><strong>事件冒泡</strong>：事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发</p><p>不是所有事件都能冒泡。以下事件不冒泡：blur、focus、load、unload（关闭页面）</p><p><strong>事件委托（代理）</strong>：不在事件的发生地（直接dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素DOM的类型，来做出不同的响应。</p><p>举个例子：</p><p>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p><p>这里其实还有2层意思的：</p><p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p><p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p><p><strong>为什么要用事件委托：</strong></p><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能<strong>大大的减少与dom的交互次数，提高性能</strong>；</p><p><strong>事件委托怎么实现：</strong></p><p>举例：最经典的就是ul和li标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在li标签上直接添加，而是在ul父元素上添加。</p><div class="language-html line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-html;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">知否知否，点我应有弹框在手！</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">知否知否，点我应有弹框在手！</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">知否知否，点我应有弹框在手！</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">知否知否，点我应有弹框在手！</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">知否知否，点我应有弹框在手！</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">li</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">ul</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    /*事件委托的核心原理：给父节点添加侦听器， </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        利用事件冒泡影响每一个子节点*/</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> ul</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">querySelector</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ul&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    ul</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // e.target 这个可以得到我们点击的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">backgroundColor</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;pink&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**事件委托原理：**事件冒泡，当触发子元素的事件时，通过冒泡，事件传递给父亲，父亲身上绑定有事件处理程序，进而触发</p><p>**好处：**比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 通用的事件绑定函数</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> bindEvent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">elem</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">selector</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">selector</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        selector</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    elem</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">selector</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            target</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // matches 用来判断当前DOM节点能否完全匹配对应的CSS选择器规则；</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 如果匹配成功，返回true，反之则返回false。</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">matches</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">selector</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                fn</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 使用代理</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> div1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;div1&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">bindEvent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">div1</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">innerHtml</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 不使用代理</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;a1&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">bindEvent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">innerHtml</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、事件触发三个阶段" tabindex="-1"><a class="header-anchor" href="#_2、事件触发三个阶段"><span>2、事件触发三个阶段</span></a></h3><ul><li>事件捕获阶段：事件从最不精确的对象(document对象)开始触发，然后到最精确</li><li>处于目标阶段</li><li>事件冒泡阶段：事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。不是所有事件都能冒泡。以下事件不冒泡：blur、focus、load、unload（关闭页面）</li></ul><p>事件触发一般来说会按照上面的顺序进行，但是也有特例，如果给一个目标节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 以下会先打印冒泡然后是捕获</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;冒泡&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;捕获&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常我们使用addEventListener注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值useCapture参数来说，该参数默认值为false。useCapture决定了注册的事件是捕获事件（false）还是冒泡事件（true）。</p><p>一般来说，我们只希望事件只触发在目标上，这时候可以使用stopPropagation来阻止事件的进一步传播。通常我们认为stopPropagation是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。stopImmediatePropagation同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。</p><h3 id="_3、事件对象" tabindex="-1"><a class="header-anchor" href="#_3、事件对象"><span>3、事件对象</span></a></h3><p><strong>DOM中的事件对象</strong>：(符合W3C标准）</p><p>preventDefault()：取消事件默认行为</p><p>stoplmmediatePropagation()：取消事件冒泡同时阻止当前节点上的事件处理程序被调用。</p><p>stopPropagation()：取消事件冒泡对当前节点无影响。</p><p><strong>IE中的事件对象</strong>：</p><p>returnValue()：取消事件默认行为</p><p>cancelBubble()：取消事件冒泡</p><h3 id="_4、mouseover和mouseenter两个事件的区别" tabindex="-1"><a class="header-anchor" href="#_4、mouseover和mouseenter两个事件的区别"><span>4、mouseover和mouseenter两个事件的区别</span></a></h3><p>mouseover(鼠标覆盖)：不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。</p><p>mouseenter(鼠标进入)：只有在鼠标指针穿过被选元素时，才会触发 mouseenter 事件。</p><p>二者的本质区别在于,mouseenter不会冒泡,简单的说,它不会被它本身的子元素的状态影响到.但是mouseover就会被它的子元素影响到,在触发子元素的时候,mouseover会冒泡触发它的父元素.(想要阻止mouseover的冒泡事件就用mouseenter)</p><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>JSON</span></a></h2><h3 id="_1、json" tabindex="-1"><a class="header-anchor" href="#_1、json"><span>1、JSON</span></a></h3><ul><li><p>js的对象表示法（JS Object Notation）</p></li><li><p>存储和交换文本信息的语法，类似XML</p></li><li><p>JSON比XML更小、更快、更易解析</p></li><li><p>数据格式简单, 易于读写, 占用带宽小</p></li><li><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 把对象变成字符串</span></span></span>
<span class="line"><span class="line"><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">({</span><span style="color:#CE9178;">&quot;a&quot;</span><span style="color:#9CDCFE;">:</span><span style="color:#B5CEA8;"> 10</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;b&quot;</span><span style="color:#9CDCFE;">:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 把字符串变成对象</span></span></span>
<span class="line"><span class="line"><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;{&quot;a&quot;: 10, &quot;b&quot;: 20}&#39;</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>Ajax</span></a></h2><h3 id="_1、ajax-jquery-ajax-axios和fetch的区别" tabindex="-1"><a class="header-anchor" href="#_1、ajax-jquery-ajax-axios和fetch的区别"><span>1、Ajax,jQuery ajax,axios和fetch的区别</span></a></h3><h4 id="ajax-1" tabindex="-1"><a class="header-anchor" href="#ajax-1"><span>Ajax：</span></a></h4><p>Ajax 即“<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</p><p><strong>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</strong></p><p>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><p>Ajax技术核心就是XMLHttpRequest对象。</p><p>（1）设置请求参数（请求方式，请求页面的相对路径，是否异步发送请求）</p><p>（2）设置回调函数，一个处理服务器响应的函数，使用 onreadystatechange ，类似函数指针</p><p>（3）获取异步对象的readyState 属性：该属性存有服务器响应的状态信息。每当 readyState 改变时，onreadystatechange 函数就会被执行。</p><p>（4）判断响应报文的状态，若为200说明服务器正常运行并返回响应数据。</p><p>（5）读取响应数据，可以通过 responseText 属性来取回由服务器返回的数据。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> xhr</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> XMLHttpRequest</span><span style="color:#D4D4D4;">();    			</span><span style="color:#6A9955;">// 创建Ajax对象</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">xhr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">open</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;get&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;aabb.php&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);			</span><span style="color:#6A9955;">// xhr发送请求</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">xhr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">xhr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onreadystatechange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() { 		</span><span style="color:#6A9955;">// xhr获取响应</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">xhr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">readyState</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">xhr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">xhr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">responseText</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> /* ajax返回的状态:</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     0：（未初始化）请求还没有建立（open执行前） </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     1：（载入）请求建立了还没发送（执行了open） </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     2：（载入完成）请求正式发送,send()方法执行完成，已经接收到全部响应内容（执行了send） </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     3：（交互）请求已受理，有部分数据可以用，但还没有处理完成,正在解析响应内容</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">     4：（完成）响应内容解析完成，可以在客户端调用了 </span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">*/</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jquery-ajax" tabindex="-1"><a class="header-anchor" href="#jquery-ajax"><span>Jquery Ajax：</span></a></h4><p>是jQuery框架中的发送后端请求技术，由于jQuery是基于原始的基础上做的封装，所以，jquery Ajax自然也是对原始ajax的封装</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ajax</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">   type:</span><span style="color:#CE9178;"> &#39;POST&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">   url:</span><span style="color:#9CDCFE;"> url</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">   data:</span><span style="color:#9CDCFE;"> data</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">   dataType:</span><span style="color:#9CDCFE;"> dataType</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">   success</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> () {},</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">   error</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> () {}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 优缺点：</p><ul><li>本身是针对MVC的编程,不符合现在前端MVVM的浪潮</li><li>基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案</li><li>JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务）</li></ul><h4 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>Fetch：</span></a></h4><p>​ fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多了，参数有点像jQuery ajax。</p><p>​ fetch不是ajax的进一步封装，而是原生js。Fetch函数就是原生js，没有使用XMLHttpRequest对象。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> data</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">} </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Oops, error&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Oops, error&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">))</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 你还可以通过Request构造器函数创建一个新的请求对象，你还可以基于原有的对象创建一个新的对象。 新的请求和旧的并没有什么不同，但你可以通过稍微调整配置对象，将其用于不同的场景。例如：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> req</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Request</span><span style="color:#D4D4D4;">(</span><span style="color:#4FC1FF;">URL</span><span style="color:#D4D4D4;">, {</span><span style="color:#9CDCFE;">method:</span><span style="color:#CE9178;"> &#39;GET&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">cache:</span><span style="color:#CE9178;"> &#39;reload&#39;</span><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">json</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  insertPhotos</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">json</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="fetch的配置" tabindex="-1"><a class="header-anchor" href="#fetch的配置"><span>fetch的配置</span></a></h5><p><code>Promise fetch(String url [, Object options]);</code><code>Promise fetch(Request req [, Object options]);</code></p><p>fetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装</p><ul><li><p>fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</p></li><li><p>fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: &#39;include&#39;})</p></li><li><p>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</p></li><li><p>fetch没有办法原生监测请求的进度，而XHR可以</p></li></ul><h4 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>Axios：</span></a></h4><p>​ axios不是原生JS的，需要进行安装，它不但可以在客户端使用，而且可以在nodejs端使用。Axios也可以在请求和响应阶段进行拦截。同样也是基于promise对象的。</p><p>https://blog.csdn.net/Roselane_Begger/article/details/88936818</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">axios</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    method:</span><span style="color:#CE9178;"> &#39;post&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    url:</span><span style="color:#CE9178;"> &#39;/user/12345&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    data:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        firstName:</span><span style="color:#CE9178;"> &#39;Fred&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        lastName:</span><span style="color:#CE9178;"> &#39;Flintstone&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优缺点：</p><ul><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>客户端支持防止CSRF</li><li><strong>提供了一些并发请求的接口</strong>（重要，方便了很多的操作）</li></ul><h3 id="_2、fetch发送post请求时-总是发送两次-第一次状态码204-第二次才成功" tabindex="-1"><a class="header-anchor" href="#_2、fetch发送post请求时-总是发送两次-第一次状态码204-第二次才成功"><span>2、fetch发送post请求时，总是发送两次，第一次状态码204，第二次才成功</span></a></h3><p>因为你用的fetch post修改了请求头,导致fetch第一次发送一个options请求，询问服务器是否支持修改的请求头，如过服务器支持，那么将会再次发送真正的请求。</p><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域"><span>⭐跨域</span></a></h2><h3 id="_1、跨域" tabindex="-1"><a class="header-anchor" href="#_1、跨域"><span>1、跨域</span></a></h3><p><strong>什么是跨域</strong></p><p><strong>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制。</strong></p><p><strong>浏览器的同源策略</strong>是指 协议、域名、端口相同，也就是说 协议、域名、端口有一个不同就算跨域。</p><p>PS：http默认端口：80，https默认端口：443</p><p><strong>同源策略限制了以下行为</strong>：</p><ul><li><p>Cookie、LocalStorage 和 IndexDB 无法读取</p></li><li><p>DOM 和 JS 对象无法获取</p></li></ul><p>可以跨域的三个标签：</p><ul><li><p><code>&lt;img src=&quot;xxx.png&quot;&gt;</code></p></li><li><p><code>&lt;link href=&quot;xx&quot;&gt;</code></p><p>PS：a和link的区别：a标签属于超链接，用来URL定向；link标签用来连接文件，一般用于CS 文件的引入</p></li><li><p><code>&lt;script src=&quot;xx&quot;&gt;</code></p></li></ul><p><strong>如何实现跨域</strong></p><p><strong>1、JSONP：通过动态创建script，再请求一个带参网址实现跨域通信。</strong></p><p>ajax请求受<strong>同源策略</strong>影响，不允许进行跨域请求，而<strong>script标签src属性中的链接却可以访问跨域的js脚本</strong>，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</p><p>为了便于客户端使用数据，逐渐形成了一种非正式传输协议。人们把它称作JSONP，该协议的一个要点就是<strong>允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据</strong>，这样客户端就可以随意定制自己的函数来自动处理返回函数了。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    function jsonp(data) </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    	console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	}</span><span style="color:#D4D4D4;">    </span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在开发中可能会遇到多个JSONP请求的回调函数名是相同的，这时候就需要自己封装一个JSONP</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> jsonp</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">jsonpCallback</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">success</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> script</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;script&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    script</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    script</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">async</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    script</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;text/javascript&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    window</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">jsonCallback</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        success</span><span style="color:#D4D4D4;"> &amp; </span><span style="color:#DCDCAA;">success</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    };</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">appendChild</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">script</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">jsonp</span><span style="color:#D4D4D4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">	&quot;http://xxx&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">    &quot;callback&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JSONP的缺点：</strong></p><ul><li><p>JSON<strong>只支持get，因为script标签只能使用get请求</strong>；</p></li><li><p>JSONP需要后端配合返回指定格式的数据。</p></li><li><p>jsonp在调用失败的时候不会返回各种HTTP状态码</p></li><li><p>安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的</p></li></ul><p><strong>ajax与jsonp的异同</strong></p><ul><li>ajax和jsonp这两种技术再调用方式上“看起来很像”，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装。</li><li>但ajax和jsonp在本质上是不同的东西。ajax的核心是通过XMLHttpRequest获取非本页内容，而jsonp的核心则是动态添加。</li></ul><p>2、document.domain + iframe跨域：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>该方式只能用于二级域名相同的情况下，比如a.test.com和b.test.com适用于该方法。</p><p>只需要给页面添加document.domain = &#39;test.com&#39;表示二级域名相同就可以实现跨域。</p><p>3、location.hash + iframe跨域：a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>4、window.name + iframe跨域：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。</p><p>5、postMessage跨域：可以跨域操作的window属性之一。</p><p>postMessage和iframe相结合的方法。postMessage(data,origin)方法允许来自不同源的脚本采用异步方式进行通信，可以实现跨文本档、多窗口、跨域消息传递。</p><p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 发送消息端</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">postMessage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;http://test.com&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 接收消息端</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> mc</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> MessageChannel</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">mc</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> origin</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">origin</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">originalEvent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">orign</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">origin</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;http://test.com&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;验证通过&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6、CORS：（服务器端设置http header）服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求，前后端都需要设置。</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 第二个参数填写允许跨域的域名称，不建议直接写&quot;*&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setHeader</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Access-Control-Allow-Origin&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;http://a.com, http://b.com&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setHeader</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Access-Control-Allow-Headers&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;X-Requested-With&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setHeader</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Access-Control-Allow-Methods&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;PUT, POST, GET, DELETE, OPTIONS&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 接收跨域的cookie</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setHeader</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Access-Control-Allow-Credential&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;true&quot;</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7、代理跨域：起一个代理服务器，实现数据的转发。</strong></p><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>⭐异步</span></a></h2><h3 id="_1、defer和async" tabindex="-1"><a class="header-anchor" href="#_1、defer和async"><span>1、defer和async</span></a></h3><p><strong>延迟脚本</strong></p><p><code>&lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example.js&quot;&gt;&lt;/script&gt;</code></p><p>defer属性：表明脚本在执行时不会影响页面的构造，也就是说，<strong>脚本会被延迟到整个页面都解析完毕再运行</strong>。</p><p><strong>异步脚本</strong></p><p>HTML5为<code>&lt;script&gt;</code>定义了async属性。与defer属性相似，都用于改变处理脚本的行为。脚本异步执行，但<strong>标记为async的脚本并不会保证按照指定它们的先后顺序执行</strong>。</p><p><code>&lt;script type=&quot;text/javascript&quot; async src=&quot;example.js&quot;&gt;&lt;/script&gt;</code></p><p>指定async属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。为此，建议异步脚本不要在加载期间修改DOM。</p><p>异步脚本一定会在页面的load时间前执行，但可能会在DOMContentLoaded事件触发之前或之后执行。</p><h3 id="_2、单线程" tabindex="-1"><a class="header-anchor" href="#_2、单线程"><span>2、单线程</span></a></h3><p>概念：只有一个线程，同一时间只能做一件事</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// alert不处理，js执行和DOM渲染暂时卡顿</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">300</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：避免DOM渲染的冲突</p><p>解决方案：js是单线程的，一次只能完成一个任务，如果有多个任务，就需要排队，如果有一个任务耗时很长，那么后边任务就需要等待。为了解决这个问题，js将任务的执行分成两种模式：同步和异步</p><p>ps：Web Worker（HTML5）可以为 JavaScript 创造多线程环境，但是不能访问DOM。具体可以看 <a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html" target="_blank" rel="noopener noreferrer">Web Worker 使用教程 - 阮一峰</a></p><h3 id="_3、同步和异步" tabindex="-1"><a class="header-anchor" href="#_3、同步和异步"><span>3、同步和异步</span></a></h3><p>区别：是否阻塞后面程序的进行</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 异步</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">300</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 100 300 200</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步的缺点：</p><p>1、没按照书写方法执行，可读性较差</p><p>2、callback中不容易模块化</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 同步</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;">//只有点击了确认按钮，后面的程序才会接着执行</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">300</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用异步的场景</strong></p><ul><li>定时任务：setTimeout、setInterval</li><li>网络请求：ajax请求、动态<code>&lt;img&gt;</code>加载</li><li>事件绑定</li></ul><p>Promise本身是同步的(&quot;resolve before&quot; 在&quot;同步&quot;之前先执行)，而then()则是异步任务(&quot;success&quot; 在&quot;同步之后再执行&quot;)</p><h3 id="_4、事件轮询-event-loop" tabindex="-1"><a class="header-anchor" href="#_4、事件轮询-event-loop"><span>⭐4、事件轮询（event-loop）</span></a></h3><p>事件轮询是JS实现异步的具体解决方案。</p><p>js将所有任务分为两类：同步任务和异步任务。</p><p><strong>事件轮询过程：同步任务在主线程上形成执行栈排队执行，异步的函数先放在任务队列中（不一定马上），当主线程执行完所有代码的时候，会从这个任务队列里面取任务，如果有就执行。</strong></p><ul><li>执行栈中的同步任务执行完毕，即主线程空闲时，此时系统会去查看任务队列，如果有可运行的异步任务就将任务添加到执行栈中开始执行。</li><li>如果任务队列中有多个异步任务待执行，那么这些异步任务也要排队等待被执行，并不是添加到任务队列中的异步任务就会立即执行。</li><li>只要主线程空了，就会去读取任务队列，这个过程是循环不断的，这就是javaScript的运行机制，也称作事件循环。</li></ul><p>例：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ajax</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    url:</span><span style="color:#CE9178;"> &#39;xxx&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    success</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 任务队列</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	// 主进程</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	// 异步队列</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 立即被放入</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 100ms之后放入</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // ajax加载完成时被放入（时间不确定）</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般说：100ms后会执行setTimeout里的回调函数，这样的说法并不严谨</p><p>准确的说是：第一个setTimeout在100ms后才会被放到异步队列中，第二个setTimeout会立刻放入异步队列，而添加到异步队列的任务，只有等到主线程执行栈中的同步任务全部执行完毕之后，才会被执行。如果主线程执行任务很多，执行时间超过100ms，那么这个函数只能等待。</p><h3 id="待重新整理-5、微任务和宏任务" tabindex="-1"><a class="header-anchor" href="#待重新整理-5、微任务和宏任务"><span>⭐（待重新整理）5、微任务和宏任务</span></a></h3><p>宏任务（MacroTask）和微任务（MicroTask）有什么区别？</p><p>https://blog.csdn.net/NancyFyn/article/details/118407548</p><p>https://juejin.cn/post/7020710294083092493</p><p><a href="https://juejin.cn/post/6962312899960242213" target="_blank" rel="noopener noreferrer">微任务/宏任务和同步/异步之间的关系</a></p><p>以上的事件循环过程是一个宏观的表述，实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。不同的异步任务被分为两类：微任务 <code>(micro task)</code> 和宏任务 <code>(macro task)</code>。</p><ul><li>微任务包括process.nextTick，Promise.then()，Object.observe，MutationObserver</li><li>宏任务包括script (可以理解为外层同步代码)，setTimeout，setInterval，setImmediate，requestAnimationFrame，I/O，UI rendering</li></ul><p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。</p><p>在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈...如此反复，进入循环。</p><p>我们只需记住当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。</p><p>同步代码 =&gt; 微任务 =&gt; 宏任务</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;script start&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;setTimeout&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {		</span><span style="color:#6A9955;">// 同步</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Promise&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    resolve</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {			</span><span style="color:#6A9955;">// 	异步</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;promise1&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;promise2&#39;</span><span style="color:#D4D4D4;">);	</span><span style="color:#6A9955;">// 异步</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;script end&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然setTimeout写在Promise之前，但是Promise属于微任务而setTimeout属于宏任务。Promise.then是异步执行的，而创建Promise实例（executor）是同步执行的。</p><p>注意：Promise不等于异步，整个promise执行过程是同步的，Promise只是个<strong>异步操作容器</strong>，把异步操作包起来，以更易读更有条理更符合人类思维习惯的方式来写异步代码。</p><p>可以看看这篇文章：<a href="https://www.jianshu.com/p/dd9d35107f48" target="_blank" rel="noopener noreferrer">Promise≠异步，async函数≠异步</a></p><p>很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了script，浏览器会先执行一个宏任务，接下来是异步代码的话就先执行微任务。</p><p>所以正确的一次Event loop顺序是这样的</p><p>1、执行同步代码，这属于宏任务</p><p>2、执行栈为空，查询是否有微任务需要执行</p><p>3、执行所有微任务</p><p>4、必要的话渲染UI</p><p>5、然后开始下一轮Event loop，执行宏任务中的异步代码</p><p>1.主体代码（第一次事件循环开始，所有的script代码）作为宏任务进入任务执行栈，但在主线程执行之前要做一系列操作判断。</p><p>2.判断当前任务是同步还是异步，同步的由主线程在任务栈中按先进后出顺序（先局部上下文，再全局上下文）执行，异步判断是宏任务还是微任务。</p><p>3.异步中的宏任务放入异步的宏任务event Table（异步队列分两种，宏任务队列和微任务队列,event Table也一样），微任务进入微任务event Table，在回调函数注册之后，再次进入它们对应的队列。</p><p>4.当主线程的任务执行完后，会检查微任务队列是否有任务，如果有就执行，如此循环，知道微任务队列没有任务。</p><p>5.当前事件的微任务执行完后，开始执行下一次事件，即会执行宏任务队列中的宏任务，如此循环下去，直到没有任务。</p><h3 id="_6、node-js的event-loop" tabindex="-1"><a class="header-anchor" href="#_6、node-js的event-loop"><span>6、Node.js的Event Loop</span></a></h3><p>Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。</p><p>Node.js的运行机制如下。</p><blockquote><p>（1）V8引擎解析JavaScript脚本。</p><p>（2）解析后的代码，调用Node API。</p><p>（3）<a href="https://github.com/joyent/libuv" target="_blank" rel="noopener noreferrer">libuv库</a>负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。</p><p>（4）V8引擎再将结果返回给用户。</p></blockquote><p>除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与&quot;任务队列&quot;有关的方法：<a href="http://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback" target="_blank" rel="noopener noreferrer">process.nextTick</a>和<a href="http://nodejs.org/docs/latest/api/timers.html#timers_setimmediate_callback_arg" target="_blank" rel="noopener noreferrer">setImmediate</a>。它们可以帮助我们加深对&quot;任务队列&quot;的理解。</p><p>process.nextTick方法可以在当前&quot;执行栈&quot;的尾部----下一次Event Loop（主线程读取&quot;任务队列&quot;）之前----触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。</p><p>setImmediate方法则是在当前&quot;任务队列&quot;的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。请看下面的例子（via <a href="http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation" target="_blank" rel="noopener noreferrer">StackOverflow</a>）。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">nextTick</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> A</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    process</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">nextTick</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> B</span><span style="color:#D4D4D4;">(){</span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);});</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> timeout</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;TIMEOUT FIRED&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 1</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 2</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// TIMEOUT FIRED</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前&quot;执行栈&quot;的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前&quot;执行栈&quot;执行。</p><p>现在，再看setImmediate。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">setImmediate</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> A</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setImmediate</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> B</span><span style="color:#D4D4D4;">(){</span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);});</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> timeout</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;TIMEOUT FIRED&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，setImmediate与setTimeout(fn,0)各自添加了一个回调函数A和timeout，都是在下一次Event Loop触发。那么，哪个回调函数先执行呢？答案是不确定。运行结果可能是1--TIMEOUT FIRED--2，也可能是TIMEOUT FIRED--1--2。</p><p>我们由此得到了process.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前&quot;执行栈&quot;一次执行完，多个setImmediate可能则需要多次loop才能执行完。</p><h3 id="_7、处理异步的几种方法" tabindex="-1"><a class="header-anchor" href="#_7、处理异步的几种方法"><span>7、处理异步的几种方法</span></a></h3><h4 id="_1、回调函数" tabindex="-1"><a class="header-anchor" href="#_1、回调函数"><span>1、回调函数</span></a></h4><p>回调（callback）是一个函数被作为一个参数传递到另一个函数里，在那个函数执行完后再执行。（ B函数被作为参数传递到A函数里，在A函数执行完后再执行B ）</p><p>假定有两个函数f1和f2，f2等待f1的执行结果，f1()--&gt;f2()；如果f1很耗时，可以改写f1，把f2写成f1的回调函数：</p><div class="language-jsx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-jsx;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> f1</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">callback</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">　　setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">　　　　callback</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// f1的任务代码</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">　　}, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">f1</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f2</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// 执行</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：简单，方便，易用</p><p>缺点：不利于代码的阅读和维护，易形成回调函数地狱，各个部分之间高度耦合，流程会很混乱</p><p><strong>什么是回调地域？</strong></p><p>如果我们只有一个异步操作，用回调函数来处理是完全没有任何问题的。如果我们在回调函数中再嵌套一个回调函数，问题也不大。但是如果我们要嵌套很多个回调函数，问题就很大了，因为多个异步操作形成了强耦合，代码将乱作一团，无法管理。这种情况被称为&quot;回调函数地狱&quot;（callback hell）。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ajax</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">	//do something...</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">	$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ajax</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url1</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">		//do something...</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">		$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ajax</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url2</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">			//do something...</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            $</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ajax</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url3</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                //do something...</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">		})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意 区分 回调函数和异步，回调是实现异步的一种手段，并不一定就是异步。</strong></p><p>回调也可以是同步，如：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> A</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">callback</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    callback</span><span style="color:#D4D4D4;">();  </span><span style="color:#6A9955;">//调用该函数</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;I am A&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> B</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">   console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;I am B&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">A</span><span style="color:#D4D4D4;">(</span><span style="color:#4FC1FF;">B</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// I am B</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// I am A</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、事件监听" tabindex="-1"><a class="header-anchor" href="#_2、事件监听"><span>2、事件监听</span></a></h4><p>采用事件驱动模式，任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p><p>监听函数有：on，bind，listen，addEventListener，observe</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;id1&quot;</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;id2&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">111</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    document.getElementById(&quot;id1&quot;).addEventListener(&quot;click&quot;,function()</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;id1&#39;</span><span style="color:#D4D4D4;">);</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	document.getElementById(&quot;id2&quot;).addEventListener(&quot;click&quot;,function()</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;id2&#39;</span><span style="color:#D4D4D4;">);</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	document.getElementById(&quot;id2&quot;).addEventListener(&quot;click&quot;,function()</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;id2222&#39;</span><span style="color:#D4D4D4;">);</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// id2 id2222 id1</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：与回调函数相比，可绑定多个事件，每一个事件可指定多个回调函数，事件监听实现了代码的解耦，有利于实现模块化</p><p>缺点：使用不方便，整个程序都要变成事件驱动型，每次都要手动地绑定和触发事件</p><h4 id="_3、promise" tabindex="-1"><a class="header-anchor" href="#_3、promise"><span>3、Promise</span></a></h4><h5 id="promise标准" tabindex="-1"><a class="header-anchor" href="#promise标准"><span>promise标准</span></a></h5><ul><li>三种状态：pending（未加载）、resolved/fulfilled（成功）、rejected（失败）</li><li>初始状态pending可变为fulfilled或rejected，且状态变化不可逆</li><li>promise 必须实现 <code>then</code> 方法（可以说，then 就是 promise 的核心），而且 then 必须返回一个 promise，同一个 promise 的 then 可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致</li><li>then 方法接受两个参数，第一个参数是成功时的回调（resolve），另一个是失败时的回调（reject）。同时，then 可以接受另一个 promise 传入，也接受一个 “类 then” 的对象或方法，即 thenable 对象。</li></ul><h5 id="promise的使用" tabindex="-1"><a class="header-anchor" href="#promise的使用"><span>promise的使用</span></a></h5><p><strong>promise封装api 基本使用</strong></p><p>​ 1&gt;new Promise实例，而且要return</p><p>​ 2&gt;new Promise时要传入函数，函数有resolve，reject两个函数</p><p>​ 3&gt;成功时执行resolve，失败时执行reject</p><p>​ 4&gt;then监听结果</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> loadImg</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> promise</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> img</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;img&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        img</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onload</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        img</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onerror</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            reject</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        img</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">src</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> promise</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;xxx.png&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">loadImg</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">width</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;failed&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="简单实现promise" tabindex="-1"><a class="header-anchor" href="#简单实现promise"><span>简单实现promise</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> StateMachine</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;javascript-state-machine&#39;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 定义promise</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> MyPromise</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">successList</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">failList</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        fn</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // resolve函数</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            fsm</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // reject函数</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            fsm</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">successFn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">failFn</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">successList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">successFn</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">failList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">failFn</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 状态机模型</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> fsm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> StateMachine</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    init:</span><span style="color:#CE9178;"> &#39;pending&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    transitions:</span><span style="color:#D4D4D4;"> [</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            name:</span><span style="color:#CE9178;"> &#39;resolve&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            from:</span><span style="color:#CE9178;"> &#39;pending&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            to:</span><span style="color:#CE9178;"> &#39;fullfilled&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            name:</span><span style="color:#CE9178;"> &#39;reject&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            from:</span><span style="color:#CE9178;"> &#39;pending&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            to:</span><span style="color:#CE9178;"> &#39;rejected&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    ],</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    methods:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 成功</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onResolve</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 参数：state-当前状态  示例：data-fsm.resolve(xx)执行时传递过来的参数</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">successList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">        // 失败</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        onReject</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // 参数：state-当前状态  示例：data-fsm.reject(xx)执行时传递过来的参数</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">failList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        },</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面转自http://www.alloyteam.com/2014/05/javascript-promise-mode/</p><p>源码：https://github.com/chemdemo/promiseA/blob/master/lib/Promise.js</p><p>简单分析下思路：</p><p>构造函数 Promise 接受一个函数 <code>resolver</code>，可以理解为传入一个异步任务，resolver 接受两个参数，一个是成功时的回调，一个是失败时的回调，这两参数和通过 then 传入的参数是对等的。</p><p>其次是 then 的实现，由于 Promise 要求 then 必须返回一个 promise，所以在 then 调用的时候会新生成一个 promise，挂在当前 promise 的<code>_next</code> 上，同一个 promise 多次调用都只会返回之前生成的<code>_next</code>。</p><p>由于 then 方法接受的两个参数都是可选的，而且类型也没限制，可以是函数，也可以是一个具体的值，还可以是另一个 promise。下面是 then 的具体实现：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> next</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_next</span><span style="color:#D4D4D4;"> || (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_next</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">());</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> status</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;pending&#39;</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        isFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) &amp;&amp; </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_resolves</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        isFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) &amp;&amp; </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_rejects</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> next</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;resolved&#39;</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;">(!</span><span style="color:#DCDCAA;">isFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            next</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                x</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">                resolveX</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">                this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> next</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;rejected&#39;</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;">(!</span><span style="color:#DCDCAA;">isFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            next</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                x</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">                resolveX</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">                this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> next</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 then 的基础上，应该还需要至少两个方法，分别是完成 promise 的状态从 pending 到 resolved 或 rejected 的转换，同时执行相应的回调队列，即 <code>resolve()</code>和 <code>reject()</code>方法。</p><h5 id="pomise-all的使用" tabindex="-1"><a class="header-anchor" href="#pomise-all的使用"><span>Pomise.all的使用</span></a></h5><p>待<strong>全部完成</strong>之后统一执行</p><p>例1：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;成功了&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;失败&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">all</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">)               </span><span style="color:#6A9955;">//[&#39;成功了&#39;, &#39;success&#39;]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">all</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">p3</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)      </span><span style="color:#6A9955;">// 失败了，打出 &#39;失败&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例2：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#DCDCAA;"> wake</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">time</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">      resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">time</span><span style="color:#D4D4D4;"> / </span><span style="color:#B5CEA8;">1000</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">秒后醒来\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }, </span><span style="color:#9CDCFE;">time</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">wake</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">wake</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">all</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">)       </span><span style="color:#6A9955;">// [ &#39;3秒后醒来&#39;, &#39;2秒后醒来&#39; ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>需要特别注意的是，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即p1的结果在前，即便p1的结果获取的比p2要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。</strong></p><h5 id="简单实现-promise-all" tabindex="-1"><a class="header-anchor" href="#简单实现-promise-all"><span>简单实现 Promise.all</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> promiseAll</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">promises</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> resultCount</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> results</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Array</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">promises</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">      for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">promises</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        promises</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">          resultCount</span><span style="color:#D4D4D4;">++;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">          results</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">          if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">resultCount</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">promises</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">          }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }, </span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">          reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;p1&#39;</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> p2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;p2&#39;</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> p3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;p3 error&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  promiseAll</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#D4D4D4;">)    </span><span style="color:#6A9955;">// [&#39;p1&#39;, &#39;p2&#39;]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  })</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  promiseAll</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p3</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)      </span><span style="color:#6A9955;">// &#39;p3 error&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  })</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="promise-race的使用" tabindex="-1"><a class="header-anchor" href="#promise-race的使用"><span>Promise.race的使用</span></a></h5><p>只要<strong>有一个完成</strong>就执行，返回为最先完成的</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  },</span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> p2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    reject</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;failed&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }, </span><span style="color:#B5CEA8;">500</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">race</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;">// failed</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="promise-race的简单实现" tabindex="-1"><a class="header-anchor" href="#promise-race的简单实现"><span>Promise.race的简单实现</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> PromiseRace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">promises</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">promises</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            promises</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                return</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }, </span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">                reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;p1&#39;</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> p2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;p2&#39;</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> p3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;p3 error&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  promiseAll</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#D4D4D4;">)    </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  })</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// p1</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  promiseAll</span><span style="color:#D4D4D4;">([</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p3</span><span style="color:#D4D4D4;">]).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">results</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  }).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">)      </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  })</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// p1</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="异常捕获" tabindex="-1"><a class="header-anchor" href="#异常捕获"><span>异常捕获</span></a></h5><p>包括语法错误，逻辑错误（如图片加载错误）</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 规定：then只接受一个参数，最后统一用catch捕获异常</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">width</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> img</span><span style="color:#6A9955;"> // 防止出现异常</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) {  </span><span style="color:#6A9955;">// 最后统一catch，统一捕获异常</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：将回调函数嵌套调用变成了链式调用，逻辑更强，执行顺序更清楚，很好地体现了开放封闭原则</p><p>缺点：代码冗余，异步操作都被包裹在Promise构造函数和then方法中，主题代码不明显，语义不清楚</p><h4 id="_4、async-await" tabindex="-1"><a class="header-anchor" href="#_4、async-await"><span>4、async/await</span></a></h4><h5 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h5><ul><li>async/await是写异步代码的新方式</li><li>async/await是基于Promise实现的，它不能用于普通的回调函数及节点回调</li><li>async/await和Promise一样，是非阻塞的</li><li>async/await使得异步代码看起来像同步代码</li><li>async函数是generator函数的语法糖，它相当于一个自带执行器的generator函数</li></ul><p>**优点：**从上到下，顺序执行，就像写同步代码一样，更符合代码编写习惯，最适合处理多个Promise异步操作。</p><p>**缺点：**滥用await可能会导致性能问题，因为await会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致失去了并发性。</p><h5 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h5><ul><li>使用await函数必须用async标识</li><li>await后面跟的是一个Promise实例</li><li><strong>任何一个async函数都会隐式返回一个Promise，并且promise resolve的值就是return返回的值</strong></li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> test</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#CE9178;"> &quot;1&quot;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">());  </span><span style="color:#6A9955;">// Promise {&lt;resolved&gt;: &quot;1&quot;}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>await不处理异步error</p><p>await是不管异步过程的reject(error)消息的，async函数返回的这个Promise对象的catch函数负责统一抓取内部所有异步过程的错误；async函数内部只要有一个异步过程发生错误，整个执行过程就中断，这个返回的Promise对象的catch就能抓取到这个错误</p></li></ul><h5 id="使用例子" tabindex="-1"><a class="header-anchor" href="#使用例子"><span>使用例子</span></a></h5><p><strong>JavaScript 利用 async await 实现 sleep 效果</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> sleep</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;finish&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;sleep&quot;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }, </span><span style="color:#B5CEA8;">2000</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> test</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> sleep</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;test&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// finish</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// sleep</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// test</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为await会等待sleep函数resolve，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。它等待后面的promise对象执行完毕，然后拿到promise resolve 的值并进行返回，返回值拿到之后，它继续向下执行。</p><h5 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">/**</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> * 项目中有一个地方需要获取到接口返回值之后根据返回值确定之后执行的步骤，使用async搭配await实现，await函数不能单独使用。</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;"> */</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> methodName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> isSuccess</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    await</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$http</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        url:</span><span style="color:#4FC1FF;"> URL</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        method:</span><span style="color:#CE9178;"> &quot;get&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        params:</span><span style="color:#9CDCFE;"> params</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            isSuccess</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$message</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            type:</span><span style="color:#CE9178;"> &quot;error&quot;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            message:</span><span style="color:#CE9178;"> &quot;系统异常&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    });</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> isSuccess</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">methodName</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">) { </span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;fail&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、generator-不是异步的直接替代方案" tabindex="-1"><a class="header-anchor" href="#_5、generator-不是异步的直接替代方案"><span>5、generator（不是异步的直接替代方案）</span></a></h4><p>参考：https://blog.csdn.net/yuefujuan_1992/article/details/89055602</p><p>generator因其中断/恢复执行和传值等优秀功能被人们用于异步处理</p><p>协程：多个线程相互协作，完成异步任务</p><p>定义：generator函数是协程在ES6的实现，最大特点就是可以交出函数的执行权（即<strong>暂停执行</strong>）。整个generator函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用yield语句注明。</p><p>执行：返回一个内部指针，<strong>不会返回结果</strong>，<strong>返回的是指针对象</strong><code>{value:**,done:&#39;true/false&#39;}</code></p><p><strong><code>Generator</code>函数之所以可以用于异步操作是因为<code>yield</code>关键字，<code>Generator</code>函数在执行过程中遇到<code>yield</code>语句时就会暂停执行，并返回<code>yield</code>语句后面的内容，要想继续执行后续的代码就需要手动调用<code>next</code>方法。<strong>这样就找到了顺序执行异步操作的方法了，也就是</strong>将所有异步操作都放在<code>yield</code>关键字后面，同时在异步操作内配置相应的<code>next</code>方法</strong>，以便在异步操作结束后返回出操作的结果并交出执行权</p><p>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。</p><p>yield表达式只能用在 Generator 函数里面，用在其他地方都会报错。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function*</span><span style="color:#DCDCAA;"> helloWorldGenerator</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#CE9178;"> &#39;hello&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#CE9178;"> &#39;world&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#CE9178;"> &#39;ending&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> hw</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">helloWorldGenerator</span><span style="color:#D4D4D4;">();</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码定义了一个generator函数helloWorldGenerator，内部有两个yield表达式（“hello” “world”）,和一个return语句（结束执行）。</p><p>调用helloWorldGenerator函数后，并不执行，而是返回一个遍历器对象（lterator）,它是一个指向内部状态的指针。</p><p>然后可以调用遍历器对象的next()方法，每次调用该方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句或return语句为止。</p><p>换言之，generator函数是分段执行的，yield表达式是暂停执行的标记，next方法可以恢复执行。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">hw</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// { value: &#39;hello&#39;, done: false }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">hw</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// { value: &#39;world&#39;, done: false }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">hw</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// { value: &#39;ending&#39;, done: true }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">hw</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// { value: undefined, done: true }</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次调用，Generator 函数开始执行，直到遇到第一个yield表达式为止。next方法返回一个对象，它的value属性就是当前yield表达式的值hello，done属性的值false，表示遍历还没有结束。</p><p>第二次调用，Generator 函数从上次yield表达式停下的地方，一直执行到下一个yield表达式。next方法返回的对象的value属性就是当前yield表达式的值world，done属性的值false，表示遍历还没有结束。</p><p>第三次调用，Generator 函数从上次yield表达式停下的地方，一直执行到return语句（如果没有return语句，就执行到函数结束）。next方法返回的对象的value属性，就是紧跟在return语句后面的表达式的值（如果没有return语句，则value属性的值为undefined），done属性的值true，表示遍历已经结束。</p><p>第四次调用，此时 Generator 函数已经运行完毕，next方法返回对象的value属性为undefined，done属性为true。以后再调用next方法，返回的都是这个值。</p><p>总结一下，<strong>调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针</strong>。以后，每次调用遍历器对象的next方法，就会<strong>返回</strong>一个有着<strong>value和done</strong>两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；<strong>done属性是一个布尔值，表示是否遍历结束</strong>。</p><p><strong>generator异步读取文件</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> fs</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;fs&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> readfile</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">filename</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">readFile</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">filename</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;whoops&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">      });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  });</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//generator</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">var</span><span style="color:#DCDCAA;"> gen</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">function*</span><span style="color:#D4D4D4;"> (){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> file1</span><span style="color:#D4D4D4;">=</span><span style="color:#C586C0;">yield</span><span style="color:#DCDCAA;"> readfile</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./data1.json&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> file2</span><span style="color:#D4D4D4;">= </span><span style="color:#C586C0;">yield</span><span style="color:#DCDCAA;"> readfile</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./data2.json&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;done&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//calling code</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">var</span><span style="color:#9CDCFE;"> generator</span><span style="color:#D4D4D4;">=</span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">generator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  generator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">      generator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  );</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>generator函数和async函数的区别</strong></p><p>1、generator函数被调用后返回一个遍历器对象（lterator），async函数返回一个promise对象</p><p>2、async函数内置执行器，可以像普通函数那样调用，generator函数需要使用co模块来实现流程控制或者自定义流程控制。</p><p>3、async是generator的语法糖</p><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化"><span>模块化</span></a></h2><h3 id="_1、模块化" tabindex="-1"><a class="header-anchor" href="#_1、模块化"><span>1、模块化</span></a></h3><p>**概念：**将一个复杂的程序依据一定的规则（规范）封装成几个块（文件）并进行组合。</p><p>模块的内部数据的实现是私有的，只是向外部暴露一些接口（方法）与外部其他模块通信，这就是模块化。</p><p>**优点：**模块化可以降低代码耦合度，减少重复代码，提高代码重用性，并且在项目结构上更加清晰，便于维护。</p><h4 id="amd、cmd、commonjs、es6的对比" tabindex="-1"><a class="header-anchor" href="#amd、cmd、commonjs、es6的对比"><span>AMD、CMD、CommonJs、ES6的对比</span></a></h4><p>他们都是用于在模块化定义中使用的，AMD、CMD、CommonJs是ES5中提供的模块化编程的方案，import/export是ES6中定义新增的</p><h4 id="amd" tabindex="-1"><a class="header-anchor" href="#amd"><span>AMD</span></a></h4><p>AMD是<strong>RequireJS</strong>在推广过程中对模块定义的规范化产出，它是一个概念，RequireJS是对这个概念的实现，就好比JavaScript语言是对ECMAScript规范的实现。AMD是一个组织，RequireJS是在这个组织下自定义的一套脚本语言</p><p>RequireJS：是一个AMD框架，可以<strong>异步加载JS文件</strong>，按照模块加载方法，<strong>通过define()函数定义</strong>，<strong>第一个参数是一个数组</strong>，里面定义一些需要依赖的包，<strong>第二个参数是一个回调函数</strong>，通过变量来引用模块里面的方法，最后通过return来输出。</p><p>是一个<strong>依赖前置、异步定义</strong>的AMD框架（在参数里面引入js文件），在定义的同时如果需要用到别的模块，在最前面定义好即在参数数组里面进行引入，在回调里面加载</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#DCDCAA;">define</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;./a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;./b&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">do</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">do</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">define</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">require</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">exports</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">module</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">	var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./a&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">doSomething</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> b</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./b&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">doSomething</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span>CMD</span></a></h4><p>是<strong>SeaJS</strong>在推广过程中对模块定义的规范化产出，是一个同步模块定义，是SeaJS的一个标准，SeaJS是CMD概念的一个实现，SeaJS是淘宝团队提供的一个模块开发的js框架.</p><p><strong>通过define()定义，没有依赖前置，通过require加载jQuery插件，CMD是依赖就近</strong>，在什么地方使用到插件就在什么地方require该插件，即用即返，这是一个同步的概念</p><p><code>define(id?, deps?, factory) </code></p><p>factory是一个函数，有三个参数，function(require, exports, module)</p><ol><li>require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口：require(id)</li><li>exports 是一个对象，用来向外提供模块接口</li><li>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</li></ol><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 定义模块  module.js</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">define</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">require</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">exports</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">module</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> $</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;jquery.min.js&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">  $</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;div&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">addClass</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;active&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 加载模块</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">seajs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;module.js&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">my</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">});</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="amd与cmd区别" tabindex="-1"><a class="header-anchor" href="#amd与cmd区别"><span>AMD与CMD区别</span></a></h5><p>AMD和CMD最明显的区别就是在模块定义时对依赖模块的执行时机处理不同。</p><p><strong>1、AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块</strong></p><p>js可以方便知道依赖模块是谁，立即加载；</p><p><strong>2、CMD推崇就近依赖，只有在用到某个模块的时候再去require</strong></p><p>需要使用把模块变为字符串解析一遍才知道依赖了那些模块，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。</p><h4 id="es6-export和import" tabindex="-1"><a class="header-anchor" href="#es6-export和import"><span>ES6（export和import）</span></a></h4><p>ES6模块的主要有两个功能：export和import。</p><ul><li><p>export用于对外输出本模块（一个文件可以理解为一个模块）变量的接口。</p></li><li><p>import用于在一个模块中加载另一个含有export接口的模块。</p></li></ul><p>也就是说使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。</p><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//util1.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a:</span><span style="color:#B5CEA8;"> 100</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//index.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> util1</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./util1.js&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">util1</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//util2.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> fn1</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;fn1&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> fn2</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;fn2&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//index.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">fn1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fn2</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./util2.js&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">fn1</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">fn2</span><span style="color:#D4D4D4;">();</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs"><span>CommonJs</span></a></h4><p>是通过module.exports定义的，在前端浏览器里面并不支持module.exports，通过<strong>node.js后端使用</strong>的。Nodejs端是使用CommonJS规范的，前端浏览器一般使用AMD、CMD、ES6等定义模块化开发的。</p><p>加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。</p><p>CommonJS定义的模块分为：{模块引用(require)} {模块定义(exports)} {模块标识(module)}</p><ul><li><p>require()用来引入外部模块；</p></li><li><p>exports对象用于导出当前模块的方法或变量，唯一的导出口；</p></li><li><p>module对象就代表模块本身。</p></li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// a.js</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// or</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// b.js</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> module</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./a.js&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 1</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="commonjs和es6模块化的区别" tabindex="-1"><a class="header-anchor" href="#commonjs和es6模块化的区别"><span>commonjs和ES6模块化的区别</span></a></h5><ul><li>前者支持动态导入，也就是require(\${path}/xx.js)，后者目前不支持，但是已有提案</li><li>前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用异步导入会对渲染有很大影响</li><li>前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化。</li><li>后者会编译成require/export来执行</li></ul><h3 id="_2、export和export-default的区别" tabindex="-1"><a class="header-anchor" href="#_2、export和export-default的区别"><span>2、export和export default的区别</span></a></h3><ul><li><p>export default命令用于指定模块的默认输出。</p></li><li><p>显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。</p></li><li><p>所以import命令后面才不用加{}，因为只可能唯一对应export default命令。</p></li></ul><p>本质上，export default就是输出一个叫做default的变量或方法，然后系统允许你为它取任意名字。</p><p>1、export与export default均可用于导出常量、函数、文件、模块等。</p><p>2、在一个文件或模块中，export、import可以有多个，export default仅有一个。</p><p>3、通过export 方法导出，在导入时要加{}，export default则不需要。</p><p>4、export，import时需要知道所加载的变量名或函数名；export default，import时可指定任意名字</p><p>5、（1）输出单个值，只用export default</p><p>​ （2）输出多个值，使用export</p><p>​ （3）export default与普通export不要同时使用</p><h3 id="_3、webpack和gulp区别-模块化与流的区别" tabindex="-1"><a class="header-anchor" href="#_3、webpack和gulp区别-模块化与流的区别"><span>3、webpack和gulp区别（模块化与流的区别）</span></a></h3><p>webpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。</p><p><a href="../%E5%85%B6%E4%BB%96/webpack%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%85%8D%E7%BD%AE">webpack概念与配置</a></p><p>gulp强调的是前端开发的工作流程，我们可以通过配置一系列的task，定义task处理的事务（例如文件压缩合并、雪碧图、启动server、版本控制等），然后定义执行顺序，来让gulp执行这些task，从而构建项目的整个前端开发流程。</p><h2 id="总结一下es6常用功能" tabindex="-1"><a class="header-anchor" href="#总结一下es6常用功能"><span>总结一下ES6常用功能</span></a></h2><h3 id="_1、let-const及块级作用域" tabindex="-1"><a class="header-anchor" href="#_1、let-const及块级作用域"><span>1、let&amp;const及块级作用域</span></a></h3><h4 id="let" tabindex="-1"><a class="header-anchor" href="#let"><span>let</span></a></h4><ol><li><p>let定义变量，可重新赋值。但是不能重复定义，不会进行变量提升</p></li><li><p>let声明的全局变量不是全局对象的属性</p></li></ol><p>而var声明的全局变量是window的属性，是可以通过window变量名的方式访问的</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 1</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> b</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// undefined</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="const" tabindex="-1"><a class="header-anchor" href="#const"><span>const</span></a></h4><p>const和let一样，有块级作用域，不会变量提升</p><p>不同的是其定义的变量不能被修改且定义时必须初始化，用于定义常量</p><p>但是const定义的对象属性是可以被修改的。因为const 指针指向的地址不可以变化，但指向地址的内容可以变化。</p><h4 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域"><span>块级作用域</span></a></h4><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//JS</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    b:</span><span style="color:#B5CEA8;"> 200</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//&#39;b&#39;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//ES6</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    b:</span><span style="color:#B5CEA8;"> 200</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//undefined</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、多行字符串-模板变量" tabindex="-1"><a class="header-anchor" href="#_2、多行字符串-模板变量"><span>2、多行字符串/模板变量</span></a></h3><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//JS</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;"> += </span><span style="color:#CE9178;">&#39;&lt;div&gt;&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;"> += </span><span style="color:#CE9178;">&#39;     &lt;p&gt;&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;&lt;/p&gt;&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;"> += </span><span style="color:#CE9178;">&#39;     &lt;p&gt;&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;&lt;/p&gt;&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;"> += </span><span style="color:#CE9178;">&#39;&lt;/div&gt;&#39;</span><span style="color:#D4D4D4;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//ES6</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;zhangsan&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> html</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&lt;div</span><span style="color:#F44747;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">                   &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">                   &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">age</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">              &lt;/</span><span style="color:#9CDCFE;">div</span><span style="color:#D4D4D4;">&gt;</span><span style="color:#CE9178;">&#39;</span><span style="color:#F44747;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>反引号定义多行字符串</li><li>\${name}将变量引入</li></ul><h3 id="_3、正则表达式" tabindex="-1"><a class="header-anchor" href="#_3、正则表达式"><span>3、正则表达式</span></a></h3><h4 id="y修饰符" tabindex="-1"><a class="header-anchor" href="#y修饰符"><span>y修饰符</span></a></h4><p>sticky粘连，连续匹配</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> s</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;aaa_aa_a&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> r1</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /a</span><span style="color:#D7BA7D;">+</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">r1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">exec</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">))  </span><span style="color:#6A9955;">// [&quot;aaa&quot;, index: 0, input: &quot;aaa_aa_a&quot;]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> r2</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /a</span><span style="color:#D7BA7D;">+</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">r2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">exec</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">))  </span><span style="color:#6A9955;">// [&quot;aaa&quot;, index: 0, input: &quot;aaa_aa_a&quot;]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 再执行一次</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">r1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">exec</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">))  </span><span style="color:#6A9955;">// [&quot;aa&quot;, index: 4, input: &quot;aaa_aa_a&quot;]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">r2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">exec</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">))  </span><span style="color:#6A9955;">// null</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>y修饰符规定正则表达式必须从lastIndex规定的位置开始进行匹配，也就是说，如果开始匹配的位置不是从lastIndex规定位置开始，匹配失败，不再继续尝试。</p><h4 id="u修饰符" tabindex="-1"><a class="header-anchor" href="#u修饰符"><span>u修饰符</span></a></h4><p>u修饰符表示按unicode（utf-8）匹配（主要正对多字节比如汉字）</p><h3 id="_4、函数默认参数" tabindex="-1"><a class="header-anchor" href="#_4、函数默认参数"><span>4、函数默认参数</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// ES5</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        b</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// ES6</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    ...</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拓展：在函数体内，判断函数有几个参数</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// ES5 用arguments</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> test</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;b&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 2</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// ES6</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> test</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">test</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;b&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 1</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 注意：Function.length统计的是 没有默认值的参数的个数</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、箭头函数" tabindex="-1"><a class="header-anchor" href="#_5、箭头函数"><span>⭐5、箭头函数</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//JS</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//ES6</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果返回值是表达式，可以省略return和{}</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#DCDCAA;"> pow</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;">*</span><span style="color:#9CDCFE;">x</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果返回值是字面量对象，一定要用小括号包起来</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#DCDCAA;"> person</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    addr:</span><span style="color:#CE9178;"> &#39;beijing&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>箭头函数和普通函数的区别：</strong></p><ul><li>箭头函数是匿名函数，不能作为构造函数，不能使用new</li><li>箭头函数不绑定arguments，取而代之用rest参数...解决</li><li>箭头函数不绑定this，会捕获其所在的上下文的this值作为自己的this值</li><li>箭头函数通过call()或apply()方法调用一个函数时，只传入了一个参数，对this并没有影响</li><li>箭头函数没有原型属性</li><li>箭头函数不能当做Generator函数，不能使用yield关键词</li></ul><h3 id="_6、扩展运算符的应用" tabindex="-1"><a class="header-anchor" href="#_6、扩展运算符的应用"><span>6、扩展运算符的应用</span></a></h3><p>转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><p>1、将一个数组变为参数序列</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> num</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">22</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">33</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 55</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、可以替代函数中的apply</p><p>由于扩展运算符可以展开数组，所以不需要apply方法，将数组转化为函数的参数了。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//ES5中</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">max</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, [</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//在es6中的写法</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(...[</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 等同于Math.max(3, 2, 5);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 JavaScript 不提供求数组最大元素的函数，所以只能套用Math.max函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用Math.max了。</p><p>3、拷贝对象</p><p>注意：扩展操作符和 <code>Object.assign</code>类似 只能深拷贝一层的对象，如果对象是两层的结构，那么使用扩展操作符拷贝会是浅拷贝。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;feng&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">color:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;yellow&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;blue&quot;</span><span style="color:#D4D4D4;">]};</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj1</span><span style="color:#D4D4D4;"> ={...</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">obj1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;red&quot;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">)    </span><span style="color:#6A9955;">// { name: &#39;feng&#39;, color: [ &#39;yellow&#39;, &#39;blue&#39;, &#39;red&#39; ] }</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、将某些数据类型转化为数组</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// arguments对象</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">!</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> arr</span><span style="color:#D4D4D4;"> = [...</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)    </span><span style="color:#6A9955;">// [2,3]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Dom返回的对象</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">([...</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementsByTagName</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;li&quot;</span><span style="color:#D4D4D4;">)])) </span><span style="color:#6A9955;">// true</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 字符串转数组</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> str</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;hello&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [...</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;">// [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展运算符所使用的是遍历器接口（Iterator），如果一个对象没有这个接口，就无法转化。</p><h3 id="_7、变量的解构赋值" tabindex="-1"><a class="header-anchor" href="#_7、变量的解构赋值"><span>7、变量的解构赋值</span></a></h3><p>转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><h4 id="_1-数组的解构赋值" tabindex="-1"><a class="header-anchor" href="#_1-数组的解构赋值"><span>（1）数组的解构赋值</span></a></h4><p><strong>基本用法</strong></p><p>在没有ES6之前给变量赋值经常是指定赋值</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    b:</span><span style="color:#B5CEA8;"> 200</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">a</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> b</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">b</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;xxx&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;yyy&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;zzz&#39;</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在ES6中允许使用以下方式赋值</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//ES6</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    a:</span><span style="color:#B5CEA8;"> 10</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    b:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    c:</span><span style="color:#B5CEA8;"> 30</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> {</span><span style="color:#4FC1FF;">a</span><span style="color:#D4D4D4;">,</span><span style="color:#4FC1FF;">c</span><span style="color:#D4D4D4;">} = </span><span style="color:#9CDCFE;">obj</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;xxx&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;yyy&#39;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&#39;zzz&#39;</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">x</span><span style="color:#D4D4D4;">,</span><span style="color:#4FC1FF;">y</span><span style="color:#D4D4D4;">,</span><span style="color:#4FC1FF;">z</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">arr</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">z</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果解构不成功，变量的值就是undefined，如下：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] = []     </span><span style="color:#6A9955;">// a就是undefined;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">] = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]  </span><span style="color:#6A9955;">// 同样a的值是1，b 的值就是undefiend;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的两个例子都是属于不完全解构，但可以成功。</p><p><strong>如果等号右边的不是数组，严格的来说就是不可以遍历的结构，解构赋值的过程中都会报错。</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//以下都是会报错的Example</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] = {};</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的赋值会报错的主要原因是，前五个表达式在转化为对象后不具备（Iterator）接口，（最后一个表达式）要么本身就不具备（Iterator）接口。</p><p>遍历器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p><h4 id="_2-对象的解构赋值" tabindex="-1"><a class="header-anchor" href="#_2-对象的解构赋值"><span>（2） 对象的解构赋值</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> {</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">} = {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;aaa&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 12</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">name</span><span style="color:#6A9955;">	// &quot;aaa&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">age</span><span style="color:#6A9955;">		// 12</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象与数组的解构赋值有个本质的不同，数组的元素是按照次序排列的，<strong>对象中的属性排列是没有次序的，要想赋上值就必须保证，属性名必须保持一致才能获取的到值。</strong></p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> {</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">} = {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;aaa&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 12</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">name</span><span style="color:#6A9955;">	// &quot;aaa&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">age</span><span style="color:#6A9955;">		// 12</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> {</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">} = {</span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;aaa&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 12</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#6A9955;">		// undefined</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的这个例子表示等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于undefined。</p><h4 id="_3-字符串的解构赋值" tabindex="-1"><a class="header-anchor" href="#_3-字符串的解构赋值"><span>（3）字符串的解构赋值</span></a></h4><p>字符串也是可以解构赋值的这是因为，字符串在被解构赋值的时候就形成了一个类似数组的对象。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">]=</span><span style="color:#CE9178;">&quot;goudan&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">a</span><span style="color:#6A9955;">	// g</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">b</span><span style="color:#6A9955;">	// o</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">...</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">f</span><span style="color:#6A9955;">	// n</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似数组的对象都有 一个length属性，也可以给length赋值</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> {</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;">}=</span><span style="color:#CE9178;">&quot;goudan&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">len</span><span style="color:#6A9955;"> // 6</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、symbol-表示独一无二的值" tabindex="-1"><a class="header-anchor" href="#_8、symbol-表示独一无二的值"><span>8、Symbol：表示独一无二的值</span></a></h3><ul><li>Symbol函数前不能使用new命令，否则会报错。这是因为生成的Symbol是一个原始类型的值，不是对象。</li><li>Symbol函数可以接受一个字符串作为参数，表示对Symbol事例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</li><li>Symbol值不能与其他类型的值进行运算。Symbol值作为对象属性名时，不能用点运算。</li></ul><h3 id="_9、set的基本用法" tabindex="-1"><a class="header-anchor" href="#_9、set的基本用法"><span>9、Set的基本用法</span></a></h3><p>转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><p><strong>Set和数据相似，也是一种 集合，主要的区别是，Set里面的值是唯一的，没有重复的</strong>。</p><p>Set中<strong>可以放数组，不可以放对象</strong>，使用<strong>add</strong>向里面<strong>填充数据</strong>，可以使用<strong>delete删除</strong>其中的一个元素。</p><p>创建Set如下：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> coll</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;feng&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;true&quot;</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// 放数组</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// Set(4) {3, 5, &quot;feng&quot;, &quot;true&quot;}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// ps: 初始化的参数必须是可遍历的，可以是数组或自定义遍历的数据结构</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">22</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// Set(5) {3, 5, &quot;feng&quot;, &quot;true&quot;, 22, &quot;hello&quot;}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">delete</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// Set(4) {5, &quot;feng&quot;, &quot;true&quot;, 22}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clear</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// Set(0) {}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set不是数组，是一个像对象的数组，就是一个伪数组。Set中的数据可以用for of 以及 forEach来进行遍历。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">coll</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">));	  </span><span style="color:#6A9955;">// 3 5 feng true</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> coll</span><span style="color:#D4D4D4;">) {</span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">);}   </span><span style="color:#6A9955;">// 3 5 feng true</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set的应用" tabindex="-1"><a class="header-anchor" href="#set的应用"><span>Set的应用</span></a></h4><p>1、数组去重</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">NaN</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> unique</span><span style="color:#D4D4D4;"> = [...(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">))]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">unique</span><span style="color:#D4D4D4;">)</span><span style="color:#6A9955;">//[ 1, 12, 3, true, NaN ]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、并集（Union）、交集（Intersect）和差集（Difference）</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> b</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 并集</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> union</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([...</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Set {1, 2, 3, 4}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 交集</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> intersect</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([...</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">filter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">has</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">)));</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// set {2, 3}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 差集</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> difference</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Set</span><span style="color:#D4D4D4;">([...</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">filter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> !</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">has</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">)));</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Set {1}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、map的基本用法" tabindex="-1"><a class="header-anchor" href="#_10、map的基本用法"><span>10、Map的基本用法</span></a></h3><p>转自<a href="http://www.imooc.com/article/67156" target="_blank" rel="noopener noreferrer">ES6核心，教你 玩转 ES6新特性</a></p><p><strong>Object和Map的区别</strong></p><ul><li><p>键的类型：</p><p>对象中的键名只能是字符串或Symbols，如果使用Map，它里面的键可以是任意值，包括函数，对象，基本类型等。</p></li><li><p>键的顺序：</p><p>Map中的键是有序的，而Object需要先获取它的键数组</p></li><li><p>性能：</p><p>在频繁增删键值对的场景下会有性能优势</p></li></ul><p>Map的创建和用法如下：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> m</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">p:</span><span style="color:#CE9178;"> &quot;Hello World&quot;</span><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;content&quot;</span><span style="color:#D4D4D4;">);	</span><span style="color:#6A9955;">//使用set进行添加元素 这里的键值是一个对象</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// &quot;content&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Map中的实例属性主要有</p><ul><li><p><strong>size</strong>：返回成员总数。</p></li><li><p><strong>set(key, value)</strong>：设置key所对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键。</p></li><li><p><strong>get(key)</strong>：读取key对应的键值，如果找不到key，返回undefined。</p></li><li><p><strong>has(key)</strong>：返回一个布尔值，表示某个键是否在Map数据结构中。</p></li><li><p><strong>delete(key)</strong>：删除某个键，返回true。如果删除失败，返回false。</p></li><li><p><strong>clear()</strong>：清除所有成员，没有返回值。</p></li><li><p><strong>set()</strong>：方法返回的是Map本身，因此可以采用链式写法。</p></li></ul><p><strong>主要看下Map的遍历方法（Set一样）</strong></p><ul><li><p>keys()：返回键名的遍历器。</p></li><li><p>values()：返回键值的遍历器。</p></li><li><p>entries()：返回所有成员的遍历器。</p></li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> map</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#D4D4D4;">([</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#CE9178;">&#39;F&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;no&#39;</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#CE9178;">&#39;T&#39;</span><span style="color:#D4D4D4;">,  </span><span style="color:#CE9178;">&#39;yes&#39;</span><span style="color:#D4D4D4;">],</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">()) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// &quot;F&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// &quot;T&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> value</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">values</span><span style="color:#D4D4D4;">()) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// &quot;no&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// &quot;yes&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">entries</span><span style="color:#D4D4D4;">()) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// &quot;F&quot; &quot;no&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// &quot;T&quot; &quot;yes&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 或者</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">] </span><span style="color:#569CD6;">of</span><span style="color:#9CDCFE;"> map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">entries</span><span style="color:#D4D4D4;">()) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 等同于使用map.entries()</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">] </span><span style="color:#569CD6;">of</span><span style="color:#9CDCFE;"> map</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、generator-生成器" tabindex="-1"><a class="header-anchor" href="#_11、generator-生成器"><span>11、Generator（生成器）</span></a></h3><p><a href="#_5%E3%80%81generator%EF%BC%88%E4%B8%8D%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88%EF%BC%89">有部分内容在上面</a></p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;"> gen</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 3</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> g</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、Generator函数比普通函数多一个*</p><p>2、函数内部用yield来控制程序的执行和”暂停“</p><p>3、函数的返回值通过next来“恢复”程序执行，<strong>不会返回结果，返回一个遍历器对象</strong>，代表 Generator 函数的内部指针<code>{value:,done:&#39;true/false&#39;}</code>。<strong>value属性表示当前的内部状态的值</strong>，是yield表达式后面那个表达式的值；<strong>done属性是一个布尔值，表示是否遍历结束</strong>。</p><p>注意：Generator函数的定义不能使用箭头函数，否则会触发SyntaxError</p><h4 id="yield表达式" tabindex="-1"><a class="header-anchor" href="#yield表达式"><span>yield表达式</span></a></h4><p>yield * 是委托给另一个遍历器对象或者可遍历对象，即generator可以嵌套</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;"> gen</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> val</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    val</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">yield</span><span style="color:#569CD6;"> *</span><span style="color:#D4D4D4;"> [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> l</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// {value: 1, done: false}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// {value: 2, done: false}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="next-value" tabindex="-1"><a class="header-anchor" href="#next-value"><span>next([value])</span></a></h4><p>可以接受参数，这个参数可以让你在Generator外部给内部传递数据，而这个参数就是yield的返回值</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//通过改变yield返回值的数据来改变内部的数据</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;"> gen</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> val</span><span style="color:#D4D4D4;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    val</span><span style="color:#D4D4D4;"> = (</span><span style="color:#C586C0;">yield</span><span style="color:#D4D4D4;"> [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]) + </span><span style="color:#B5CEA8;">7</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> l</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// {value: Array(3), done: false}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 27</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// {value: undefined, done: true}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="return" tabindex="-1"><a class="header-anchor" href="#return"><span>return</span></a></h4><p>return方法可以让Generator函数遍历终止，有点类似for循环的break</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;"> gen</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 3</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> g</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())  		</span><span style="color:#6A9955;">// {value: 1, done: false}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">return</span><span style="color:#D4D4D4;">())		</span><span style="color:#6A9955;">// {value: undefined, done: true}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())		</span><span style="color:#6A9955;">// {value: undefined, done: true}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>return还可以传入参数，作为返回值的value</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;"> gen</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 3</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> g</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())  		</span><span style="color:#6A9955;">// {value: 1, done: false}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">return</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">))		</span><span style="color:#6A9955;">// {value: 100, done: true}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())		</span><span style="color:#6A9955;">// {value: undefined, done: true}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="throw" tabindex="-1"><a class="header-anchor" href="#throw"><span>throw</span></a></h4><p>可以通过throw方法在Generator外部控制内部执行的“终断”</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 在内部捕获异常</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;"> gen</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        try</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            yield</span><span style="color:#B5CEA8;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> g</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())					</span><span style="color:#6A9955;">// {value: 1, done: false}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())					</span><span style="color:#6A9955;">// {value: 1, done: false}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">throw</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message wrong&#39;</span><span style="color:#D4D4D4;">))     </span><span style="color:#6A9955;">//  message wrong</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">g</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">())					</span><span style="color:#6A9955;">// {value: 1, done: false}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用实例" tabindex="-1"><a class="header-anchor" href="#应用实例"><span>应用实例</span></a></h4><p>抽奖</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;"> draw</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">first</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">second</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">third</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> price</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">11</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">13</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">14</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">17</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">22</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">23</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">24</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">25</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">26</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">27</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> random</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">first</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">second</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">third</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            random</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">floor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">random</span><span style="color:#D4D4D4;">() * </span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            yield</span><span style="color:#9CDCFE;"> price</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">random</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            count</span><span style="color:#D4D4D4;">++</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            price</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">splice</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">random</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#569CD6;"> false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">draw</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 来9次</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>普通函数的话一下子就知道了所有的中奖人，二使用Generator函数则是一个一个抽出来，比较刺激</p><h3 id="_12、iterator-迭代器" tabindex="-1"><a class="header-anchor" href="#_12、iterator-迭代器"><span>12、Iterator（迭代器）</span></a></h3><p>遍历器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p><p>在ES6中，有些数据结构原生具备Iterator接口（比如数组），即不用任何处理，就可以被<code>for...of</code>循环遍历，有些就不行（比如对象）。原因在于，这些数据结构原生部署了<code>Symbol.iterator</code>属性，另外一些数据结构没有。凡是部署了<code>Symbol.iterator</code>属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。</p><p>在ES6中，有三类数据结构原生具备Iterator接口(可用for of遍历)：数组、某些类似数组的对象、Set和Map结构。</p><h4 id="迭代器协议" tabindex="-1"><a class="header-anchor" href="#迭代器协议"><span>迭代器协议</span></a></h4><p>迭代器协议要求符合以下条件：</p><ol><li>是个对象</li><li>这个对象包含一个无参函数next</li><li>next返回一个对象，对象包含done和value属性。其中done表示遍历是否结束，value返回当前遍历的值</li></ol><p>注意：如果next函数返回一个非对象值（比如false和undefined）会展示一个TypeError的错误。</p><h4 id="可迭代协议" tabindex="-1"><a class="header-anchor" href="#可迭代协议"><span>可迭代协议</span></a></h4><p>如果让一个对象是可遍历的，就要遵守可迭代协议，该协议要求对象要部署一个以Symbol.iterator为key的键值对，而value就是一个无参函数，这个函数返回的对象要遵守迭代器协议。</p><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h4><ul><li><p>为各种数据结构，提供一个统一的、简便的访问接口；</p></li><li><p>使得数据结构的成员能够按某种次序排列；</p></li><li><p>ES6创造了一种新的遍历命令<code>for...of</code>循环，Iterator接口主要供<code>for...of</code>消费。</p></li></ul><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h4><ul><li><p>创建一个指针对象，指向数据结构的起始位置。</p></li><li><p>第一次调用next方法，指针自动指向数据结构的第一个成员</p></li><li><p>接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员</p></li><li><p>每调用next方法返回的是一个包含value和done的对象，<code>{value: 当前成员的值, done: 布尔值}</code></p><p>value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。</p><p>当遍历结束的时候返回的value值是undefined，done值为false</p></li></ul><h4 id="一个为对象添加iterator接口的例子" tabindex="-1"><a class="header-anchor" href="#一个为对象添加iterator接口的例子"><span>一个为对象添加Iterator接口的例子</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> authors</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    allAuthors:</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        fiction:</span><span style="color:#D4D4D4;"> [</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">            &#39;Agatha Christie&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">            &#39;J.K.Rowing&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">            &#39;Dr.Seuss&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        ],</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        fantasy:</span><span style="color:#D4D4D4;"> [</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">            &#39;xxx&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">            &#39;xxxx&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">            &#39;xx&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        ]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 部署Iterator接口</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">authors</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 根据对象数据结构的特点自己实现业务逻辑</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> allAuthors</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">allAuthors</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> keys</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ownKeys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">allAuthors</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> values</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        next</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">values</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">keys</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                    values</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">allAuthors</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">keys</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                    keys</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                done:</span><span style="color:#D4D4D4;"> !</span><span style="color:#9CDCFE;">values</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                value:</span><span style="color:#9CDCFE;"> values</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 遍历获取所有作者</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> r</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> value</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> authors</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    r</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&quot;Agatha Christie&quot;, &quot;J.K.Rowing&quot;, &quot;Dr.Seuss&quot;, &quot;xxx&quot;, &quot;xxxx&quot;, &quot;xx&quot;]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以用Genrator来实现</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">authors</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">Symbols</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> allAuthors</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">allAuthors</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> keys</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ownKeys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">allAuthors</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> values</span><span style="color:#D4D4D4;"> = []</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        while</span><span style="color:#D4D4D4;">(1) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">values</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">keys</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                    values</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">allAuthors</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">keys</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]]</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">                    keys</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                    yield</span><span style="color:#9CDCFE;"> values</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                    return</span><span style="color:#569CD6;"> false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">                }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                yield</span><span style="color:#9CDCFE;"> values</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="一个类似数组的对象调用数组的symbol-iterator方法的例子" tabindex="-1"><a class="header-anchor" href="#一个类似数组的对象调用数组的symbol-iterator方法的例子"><span>一个类似数组的对象调用数组的<code>Symbol.iterator</code>方法的例子</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> iterable</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">  0</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;a&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">  1</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;b&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B5CEA8;">  2</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &#39;c&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  length:</span><span style="color:#B5CEA8;"> 3</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  [Symbol.iterator]:</span><span style="color:#4EC9B0;"> Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> iterable</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// &#39;a&#39;, &#39;b&#39;, &#39;c&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，普通对象部署数组的<code>Symbol.iterator</code>方法，并无效果。</p><p>默认调用Iterator接口（即<code>Symbol.iterator</code>方法）的场合。</p><ul><li><strong>解构赋值</strong></li><li><strong>for...of</strong></li><li><strong>扩展运算符(...)</strong></li><li><strong>yield后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</strong></li><li><strong>由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用</strong></li></ul><p><strong>注意</strong>：</p><ul><li><p>字符串是一个类似数组的对象，也原生具有Iterator接口。</p></li><li><p>遍历器对象除了具有<code>next</code>方法，还可以具有<code>return</code>方法和<code>throw</code>方法。如果你自己写遍历器对象生成函数，那么<code>next</code>方法是必须部署的，<code>return</code>方法和<code>throw</code>方法是否部署是可选的。</p></li></ul><h3 id="_13、class" tabindex="-1"><a class="header-anchor" href="#_13、class"><span>13、class</span></a></h3><h4 id="js构造函数" tabindex="-1"><a class="header-anchor" href="#js构造函数"><span>JS构造函数</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> MathHandle</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">x</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">MathHandle</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> m</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> MathHandle</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">())</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="class语法" tabindex="-1"><a class="header-anchor" href="#class语法"><span>class语法</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> MathHandle</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">x</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    add</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> m</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> MathHandle</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">MathHandle</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#6A9955;">  //true</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="继承—js" tabindex="-1"><a class="header-anchor" href="#继承—js"><span>继承—JS</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">//动物</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">eat</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;animal eat&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">//狗</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bark</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;dog bark&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> hashiqi</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="继承—class" tabindex="-1"><a class="header-anchor" href="#继承—class"><span>继承—class</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    eat</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; eat&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Dog</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    say</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; say&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> dog</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;哈士奇&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">dog</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">eat</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">dog</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">say</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="class和普通构造函数有何区别" tabindex="-1"><a class="header-anchor" href="#class和普通构造函数有何区别"><span><code>Class</code>和普通构造函数有何区别</span></a></h4><ul><li>class在语法上更加贴近面向对象的写法</li><li>class实现继承更加易读，易理解</li><li>更易于写java等后端语言使用</li><li>本质是语法糖，使用prototype</li></ul><h4 id="setters-getters" tabindex="-1"><a class="header-anchor" href="#setters-getters"><span>Setters &amp; Getters</span></a></h4><p>对于类中的属性，可以直接在constructor中通过this直接定义，还可以直接在类的顶层来定义</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">type</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    get</span><span style="color:#DCDCAA;"> age</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_age</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    set</span><span style="color:#DCDCAA;"> age</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">_age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">val</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="static-methods" tabindex="-1"><a class="header-anchor" href="#static-methods"><span>Static Methods</span></a></h4><p>静态方法：不属于对象实例，而属于这个类，需要从类来访问才能获取。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// ES5</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">type</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">walk</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;I\`m walking&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">eat</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;I\`m eating&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">eat</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// ES6</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">type</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    walk</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;I\`m walking&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    static</span><span style="color:#DCDCAA;"> eat</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;I\`m eating&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">eat</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>什么时候用实例对象方法，什么时候用静态方法？</strong></p><p>如果这个方法里面还会涉及到其他的实例对象属性或方法（即另外还要依赖于其他方法），则用实例对象方法。</p><p>如果没有依赖关系，则用静态方法。（因为静态方法拿不到实例对象）</p><h3 id="_14、jquery-deferred-promise中的-then语法" tabindex="-1"><a class="header-anchor" href="#_14、jquery-deferred-promise中的-then语法"><span>14、jquery-deferred（Promise中的<code>.then</code>语法）</span></a></h3><p>ES6中的Promise中的<code>.then</code>语法最早在jquery1.5中就有提出使用</p><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><p>deferred对象就是jquery的回调函数解决方案。在英语中，defer的意思就是延迟，所以deferred对象的含义就是“延迟”到未来某个点再执行。它解决了如何处理耗时操作的问题，对那些操作提供了更好地控制，以及统一的编程接口。</p><h4 id="jquery1-5的变化" tabindex="-1"><a class="header-anchor" href="#jquery1-5的变化"><span>jquery1.5的变化</span></a></h4><h5 id="_1-5之前" tabindex="-1"><a class="header-anchor" href="#_1-5之前"><span>1.5之前</span></a></h5><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> ajax</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ajax</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    url:</span><span style="color:#CE9178;"> &#39;data.json&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    success</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    error</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ajax</span><span style="color:#D4D4D4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-5之后" tabindex="-1"><a class="header-anchor" href="#_1-5之后"><span>1.5之后</span></a></h5><p>例一：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> ajax</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$ajax</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;data.json&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">ajax</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">done</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">done</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success2&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例二：</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 很像promise的写法</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> ajax</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$ajax</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;data.json&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">ajax</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success2&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error2&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变化总结</strong></p><p>1、无法改变JS异步和单线程的本质</p><p>2、只能从写法上杜绝callback这种形式</p><p>3、它是一种语法糖，但是解耦了代码</p><p>4、很好的体现了开放封闭原则</p><blockquote><p><strong>开放封闭原则</strong></p><p>其核心思想是软件实体应该是可扩展的，而不可修改的，即对扩展开放，对修改封闭。</p><p>开放封闭主要体现在两个方面:</p><p><strong>对扩展开放</strong>，意味着新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。 <strong>对修改封闭</strong>，意味着类一旦设计完成时，就可以独立完成其工作，而不要对类进行任何修改。</p></blockquote><h4 id="使用jquery-deferred" tabindex="-1"><a class="header-anchor" href="#使用jquery-deferred"><span>使用jQuery Deferred</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> wait</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#DCDCAA;"> task</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;执行完成&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">wait</span><span style="color:#D4D4D4;">()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增需求：要在执行完成之后进行某些特别复杂的操作，代码可能会很多，而且分好几个步骤</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> waitHandle</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> dtd</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Deferred</span><span style="color:#D4D4D4;">()        </span><span style="color:#6A9955;">// 创建一个deferred对象</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#DCDCAA;"> wait</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dtd</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#DCDCAA;"> task</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;执行完成&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            dtd</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">()       </span><span style="color:#6A9955;">// 表示异步任务已经完成</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">            // dtd.reject()     // 表示异步任务失效或出错</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> dtd</span><span style="color:#6A9955;">              // 要求返回deferred对象</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> wait</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dtd</span><span style="color:#D4D4D4;">)            </span><span style="color:#6A9955;">// 注意，这里一定要有返回值</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> w</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">waitHandle</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">w</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ok1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;err1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ok2&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;err2&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 还有w.done w.fail</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="总结-dtd的api可分成两类-用意不同-并且需要分开用" tabindex="-1"><a class="header-anchor" href="#总结-dtd的api可分成两类-用意不同-并且需要分开用"><span>总结：dtd的api可分成两类，用意不同，并且需要分开用</span></a></h5><p><strong>第一类（主动触发）</strong></p><ul><li><p>dtd.resolve()</p><p>手动改变deferred对象的运行状态为“已完成”，从而立即触发done()方法</p></li><li><p>dtd.reject()</p><p>这个方法与resolve()相反，调用后将deferred对象的运行状态变为“已失效”，从而立即出发fail()方法</p></li></ul><p><strong>第二类（被动监听）</strong></p><ul><li><p>dtd.done()</p><p>指定函数成功时的回调函数</p></li><li><p>dtd.fail()</p><p>指定函数失败时的回调函数</p></li><li><p>dtd.then()</p><p>把done()和fail()合在一起写，如果then()有两个参数，那么第一个参数是done方法的回调函数，第二个参数是fail()方法的回调函数、如果只有一个参数，等同于done()</p></li></ul><h5 id="使用dtd-promise-方法" tabindex="-1"><a class="header-anchor" href="#使用dtd-promise-方法"><span>使用dtd.promise()方法</span></a></h5><p>promise没有参数时，返回一个新的defer对象，该对象的运行状态无法被改变，接收参数时，作用为在参数对象上部署deferred接口</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> waitHandle</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> dtd</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Deferred</span><span style="color:#D4D4D4;">()        </span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#DCDCAA;"> wait</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dtd</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        var</span><span style="color:#DCDCAA;"> task</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;执行完成&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            dtd</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">()       </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2000</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> dtd</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">promise</span><span style="color:#D4D4D4;">()          </span><span style="color:#6A9955;">// 注意这里返回的是promise，不是直接返回deferred</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> wait</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dtd</span><span style="color:#D4D4D4;">)            </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 经过上面的改动，w接收的是一个promise对象</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> w</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">waitHandle</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">$</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">when</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">w</span><span style="color:#D4D4D4;">)					</span><span style="color:#6A9955;">// api不同</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ok1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;err1&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ok2&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;err2&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15、promise" tabindex="-1"><a class="header-anchor" href="#_15、promise"><span>15、promise</span></a></h3><p><a href="#_3%E3%80%81promise">看上面~</a></p><h3 id="_16、代理-proxy" tabindex="-1"><a class="header-anchor" href="#_16、代理-proxy"><span>16、代理（Proxy）</span></a></h3><p>Proxy是ES6中新增的功能，可以用来自定义对象中的操作，如查找、赋值、枚举、函数调用等。</p><p><code>let p = new Proxy(target, handler);</code></p><ul><li>target：代表需要代理的对象</li><li>handler：用来自定义对象中的操作</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;xiaoming&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    price:</span><span style="color:#B5CEA8;"> 100</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Proxy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    get</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;price&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">20</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 120 &quot;xiaoming&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对赋值进行拦截" tabindex="-1"><a class="header-anchor" href="#对赋值进行拦截"><span>对赋值进行拦截</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;xiaoming&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    price:</span><span style="color:#B5CEA8;"> 100</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Proxy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    get</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    },</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    set</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    	return</span><span style="color:#569CD6;"> false</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">120</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 100 &quot;xiaoming&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="校验" tabindex="-1"><a class="header-anchor" href="#校验"><span>校验</span></a></h4><p>对于数据交互而言，校验是不可或缺的一个环节。传统的校验是将校验写在了业务逻辑里，导致代码耦合度较高。使用Proxy就可以将代码设计的非常灵活。</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// validator.js</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    if</span><span style="color:#D4D4D4;"> (Reflect.has(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) &amp;&amp; value &gt; 20) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">value</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> validator</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./validator&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> data</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Proxy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    set:</span><span style="color:#9CDCFE;"> validator</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对读写进行监控" tabindex="-1"><a class="header-anchor" href="#对读写进行监控"><span>对读写进行监控</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 监听错误</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEvenetListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 校验规则</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> validator</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;age&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;number&#39;</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">Number</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isNaN</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">                // 不满足规则就要触发错误</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                throw</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> TypeError</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Age must be a number&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">                throw</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> TypeError</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Age must bu a positive number&#39;</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> true</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 27</span><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> proxy</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Proxy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">validator</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">NaN</span><span style="color:#6A9955;"> // Uncaught TypeError: Age must be a number</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">28</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#6A9955;"> // Uncaught TypeError: Age must be a positive number</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置对象的id只可读不可被修改</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Component</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    constructor</span><span style="color:#D4D4D4;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Proxy</span><span style="color:#D4D4D4;">({</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            id:</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">random</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">36</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">slice</span><span style="color:#D4D4D4;">(-</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 随机生成一个id</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }, {}) </span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    get</span><span style="color:#DCDCAA;"> id</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> com</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Component</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">com</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;abc&#39;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">com</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// dp9hrcw7</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="revocable-proxy" tabindex="-1"><a class="header-anchor" href="#revocable-proxy"><span>Revocable Proxy</span></a></h4><p>除了使用常规的代理，还可以创建临时的代理，这个临时代理就可以被取消</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;xiaoming&#39;</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    price:</span><span style="color:#B5CEA8;"> 100</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Proxy</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">revocable</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    get</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;price&#39;</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">20</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 120  {proxy: Proxy, revoke: ƒ}</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">    // 销毁代理  一旦revoke被调用，proxy就失效了，这就起到了临时代理的作用</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    d</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">revoke</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">    setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// Uncaught TypeError: Cannot perform &#39;get&#39; on a proxy that has been revoked</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17、反射-reflect" tabindex="-1"><a class="header-anchor" href="#_17、反射-reflect"><span>17、反射（Reflect）</span></a></h3><p>Reflect是一个内置对象，它提供拦截JavaScript操作的方法，这些方法与处理器对象的方法相同，Reflect不是一个函数对象，因此它是不可构造的。</p><p>注意：与大多数全局对象不同，Reflect没有构造函数，你不能将其与一个new运算符一起使用，或者将Reflect对象作为一个函数来调用。Reflect的所有属性和方法都是静态的（就像Math对象）</p><p><strong>反射，什么是反射机制？</strong></p><p>Java的反射机制是在编译阶段不知道是哪个类被加载，而是在运行的时候才加载、执行。</p><h4 id="reflect-apply" tabindex="-1"><a class="header-anchor" href="#reflect-apply"><span>Reflect.apply</span></a></h4><p><code>Reflect.apply(target, thisArgument, argumentsList)</code></p><ul><li>target：目标函数</li><li>thisArgument：target函数调用时绑定的this对象</li><li>argumentsList：target函数调用时传入的实参列表，该参数应该是一个类数组的对象</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">floor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, [</span><span style="color:#B5CEA8;">3.72</span><span style="color:#D4D4D4;">]);  </span><span style="color:#6A9955;">// 3</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">floor</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, [</span><span style="color:#B5CEA8;">3.72</span><span style="color:#D4D4D4;">]);  </span><span style="color:#6A9955;">// 3</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> price</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">91.5</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;"> ?  </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">floor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, [</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">]) : </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">ceil</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, [</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;"> ?  </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">floor</span><span style="color:#D4D4D4;"> : </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">ceil</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, [</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">]);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="reflect-construct" tabindex="-1"><a class="header-anchor" href="#reflect-construct"><span>Reflect.construct</span></a></h4><p>Reflect.construct()方法的行为有点像new操作符构造函数，相当于运行new target(...arg)</p><p><code>Reflect.construct(target, argumentsList[, newTarget])</code></p><ul><li>target：被运行的目标函数</li><li>argumentsList：调用构造函数的数组或伪数组</li><li>newTarget：该参数为构造函数，参考new.target操作符，如果没有newTarget参数，默认和target一样</li></ul><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> date1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">construct</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;">, []);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="reflect-defineproperty-和-reflect-deleteproperty" tabindex="-1"><a class="header-anchor" href="#reflect-defineproperty-和-reflect-deleteproperty"><span>Reflect.defineProperty 和 Reflect.deleteProperty</span></a></h4><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#6A9955;">// 新增对象属性</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> student</span><span style="color:#D4D4D4;"> = {};</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> r</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">defineProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">student</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">value:</span><span style="color:#CE9178;"> &#39;Mike&#39;</span><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// student {name: &quot;Mike&quot;}   r true</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> r</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">defineProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">student</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">value:</span><span style="color:#CE9178;"> &#39;Mike&#39;</span><span style="color:#D4D4D4;">});</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// student {name: &quot;Mike&quot;}   r {name: &quot;Mike&quot;}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// 删除对象属性</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> obj</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">x:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y:</span><span style="color:#B5CEA8;"> 200</span><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> r</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">deleteProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;x&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#6A9955;">// obj { y: 200}   r true</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">delete</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="reflect-ownkeys" tabindex="-1"><a class="header-anchor" href="#reflect-ownkeys"><span>Reflect.ownKeys()</span></a></h4><p>返回目标对象自身的属性key组成的数组， 相当于 Object.getOwnPropertyNames(target) concat(Object.getOwnPropertySymbols(target)</p><p><a href="#_6%E3%80%81%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%B1%9E%E6%80%A7%E7%9A%84%E9%81%8D%E5%8E%86">对象中属性的遍历</a></p><h4 id="支持的方法集合" tabindex="-1"><a class="header-anchor" href="#支持的方法集合"><span>支持的方法集合</span></a></h4><ul><li><p>Reflect.apply()</p></li><li><p>Reflect.construct()</p></li><li><p>Reflect.defineProperty()</p></li><li><p>Reflect.deleteProperty()</p></li><li><p>Reflect.get()</p></li><li><p>Reflect.getOwnPropertyDescriptor()</p></li><li><p>Reflect.getPrototypeOf()</p></li><li><p>Reflect.has()</p></li><li><p>Reflect.isExtensible()</p></li><li><p>Reflect.ownKeys()</p></li><li><p>Reflect.preventExtensions()</p></li><li><p>Reflect.set()</p></li><li><p>Reflect.setPrototypeOf()</p></li></ul><h3 id="_18、模块化" tabindex="-1"><a class="header-anchor" href="#_18、模块化"><span>18、模块化</span></a></h3><p>[看上面~](# 1、模块化)</p><h3 id="_19、字符串、数组、对象的扩展" tabindex="-1"><a class="header-anchor" href="#_19、字符串、数组、对象的扩展"><span>19、字符串、数组、对象的扩展</span></a></h3><p>也在上面啦~直接整合在了字符串、数组、对象内容里面</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="_1、获得一段范围内的随机数" tabindex="-1"><a class="header-anchor" href="#_1、获得一段范围内的随机数"><span>1、获得一段范围内的随机数</span></a></h3><p>值 = Math.floor(Math.random()*可能值的总数+第一个可能的值)</p><p>例：选择一个1-10之间的数组</p><p><code> var num = Math.floor(Math.random()*10+1)</code></p><h3 id="_2、获取xxxx-xx-xx格式的日期" tabindex="-1"><a class="header-anchor" href="#_2、获取xxxx-xx-xx格式的日期"><span>2、获取xxxx-xx-xx格式的日期</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> formatDate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dt</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">dt</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        dt</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        dt</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dt</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> year</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">dt</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getFullYear</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> month</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">dt</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getMonth</span><span style="color:#D4D4D4;">() + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">dt</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDate</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">month</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        month</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">month</span><span style="color:#D4D4D4;">;  </span><span style="color:#6A9955;">// 强制类型转换</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">date</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        date</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">date</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 强制类型转换</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> year</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;-&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">month</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;-&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">date</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> dt</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">formatDate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dt</span><span style="color:#D4D4D4;">));</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、将时间戳转化为自定义日期格式" tabindex="-1"><a class="header-anchor" href="#_3、将时间戳转化为自定义日期格式"><span>3、将时间戳转化为自定义日期格式</span></a></h3><p><strong>date.js</strong></p><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> formatDate</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">date</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fmt</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#D16969;">/</span><span style="color:#CE9178;">(</span><span style="color:#D16969;">y</span><span style="color:#D7BA7D;">+</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fmt</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        fmt</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fmt</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">RegExp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$1</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getFullYear</span><span style="color:#D4D4D4;">() + </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">substr</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">RegExp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> o</span><span style="color:#D4D4D4;"> = {</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;M+&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getMonth</span><span style="color:#D4D4D4;">() + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;d+&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDate</span><span style="color:#D4D4D4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;h+&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getHours</span><span style="color:#D4D4D4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;m+&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getMinutes</span><span style="color:#D4D4D4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#CE9178;">        &#39;s+&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getSeconds</span><span style="color:#D4D4D4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    };</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> k</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> o</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> RegExp</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`(</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">k</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">)\`</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fmt</span><span style="color:#D4D4D4;">)) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            let</span><span style="color:#9CDCFE;"> str</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;">] + </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">            fmt</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fmt</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">RegExp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$1</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">RegExp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) ? </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;"> : </span><span style="color:#DCDCAA;">padLeftZero</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">));</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> fmt</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> padLeftZero</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> (</span><span style="color:#CE9178;">&#39;00&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">substr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">};</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JavaScript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="JavaScript" data-title="JavaScript"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-JavaScript;"><code><span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;!-- 过滤器  time 可以使后台得到的数据，循环出来的也行 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{time | formatDate}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;!-- 输出结果 --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    &lt;!-- </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">2016-07-23 21:52</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;"> --&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">import </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">formatDate</span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;"> from &#39;./common/date.js&#39;;</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">export default </span><span style="color:#569CD6;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    filters</span><span style="color:#D4D4D4;">: {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">        formatDate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">time</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">            var</span><span style="color:#9CDCFE;"> date</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">time</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">            return</span><span style="color:#DCDCAA;"> formatDate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">date</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;yyyy-MM-dd hh:mm&#39;</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、写一个能遍历对象和数组的通用foreach函数" tabindex="-1"><a class="header-anchor" href="#_4、写一个能遍历对象和数组的通用foreach函数"><span>4、写一个能遍历对象和数组的通用forEach函数</span></a></h3><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">    var</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">obj</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Array</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">        obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        })</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">            fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">];</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">x:</span><span style="color:#B5CEA8;"> 100</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y:</span><span style="color:#B5CEA8;"> 200</span><span style="color:#D4D4D4;">};</span></span></span>
<span class="line"><span class="line"><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#D4D4D4;">})</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、pwa" tabindex="-1"><a class="header-anchor" href="#_5、pwa"><span>5、pwa</span></a></h3><p>PWA全称Progressive Web App，即渐进式WEB应用。</p><p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用。</p><p>随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能。</p><h3 id="_6、" tabindex="-1"><a class="header-anchor" href="#_6、"><span>6、**</span></a></h3><p>ES7中新语法，相当于乘方</p><div class="language-javascript line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki dark-plus vp-code" style="background-color:#1E1E1E;color:#D4D4D4 language-javascript;"><code><span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pow</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">))		</span><span style="color:#6A9955;">// 32</span></span></span>
<span class="line"><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> ** </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">) 			</span><span style="color:#6A9955;">// 32</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、mvc和mvvm的区别" tabindex="-1"><a class="header-anchor" href="#_7、mvc和mvvm的区别"><span>7、MVC和MVVM的区别</span></a></h3><h4 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>MVC</span></a></h4><p>优点:</p><ul><li>易懂: 简单易懂</li><li>层次分明: 共三个部分，各自完成各自的内容，在有Controller将大家协调在一起。</li></ul><p>弊端:</p><ul><li>量级重 : <code>ViewController</code>处理过多的业务逻辑如协调模型和视图之间的所有交互，导致量级重，维护成本很高。</li><li>过轻的<code>Model</code>对象:在实践中往往大家都把Model的量级设计的非常轻，总容易当做数据模型来对待。</li></ul><h4 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h4><p>优点:</p><ul><li>低耦合: <code>View</code>可以独立于Model变化和修改，一个<code>ViewModel</code>可以绑定到不同的View 上。</li><li>可重用性: 可以把一些视图逻辑放在一个<code>ViewModel</code>里面，让很多<code>View</code>重用这段视图逻辑。</li></ul><p>弊端:</p><ul><li>数据绑定后使得<code>Bug</code>很难被调试。</li><li>数据绑定和数据转化需要<code>花费更多</code>的内存成本。</li></ul><h4 id="二者之间的关系图" tabindex="-1"><a class="header-anchor" href="#二者之间的关系图"><span>二者之间的关系图</span></a></h4><p>MVVM实质上是把 MVC 中的C的功能给拆分了。</p><p><img src="`+i+'" alt="MVC和MVVM"></p><h3 id="_8、vue-react-jquery的区别" tabindex="-1"><a class="header-anchor" href="#_8、vue-react-jquery的区别"><span>8、vue react jquery的区别</span></a></h3><h4 id="jquery和框架的区别" tabindex="-1"><a class="header-anchor" href="#jquery和框架的区别"><span>jquery和框架的区别</span></a></h4><p>框架：数据和视图分离，以数据驱动视图，只关心数据变化，dom操作被封装。数据驱动</p><p>jquery： 依靠dom操作去组合业务逻辑。事件驱动</p><h4 id="react和vue对比" tabindex="-1"><a class="header-anchor" href="#react和vue对比"><span>⭐React和Vue对比</span></a></h4><p>这篇文章挺好的：https://www.jianshu.com/p/b7cd52868e95?from=groupmessage</p><p><strong>两者本质区别</strong></p><ul><li>Vue—本质是MVVM框架，由MVC发展而来</li><li>React—本质是前端组件化框架，由后端组件化发展而来</li></ul><p><strong>模板的区别</strong></p><ul><li>Vue—使用模板（最初由Angular提出）</li><li>React—使用JSX</li><li>模板语法上，更倾向于JSX</li><li>模板分离上，更倾向于Vue（React模板与JS混在一起，未分离）</li></ul><p><strong>组件化的区别</strong></p><ul><li>React本身就是组件化，没有组件化就不是React</li><li>Vue也支持组件化，不过是在MVVM上的扩展</li><li>对于组件化，更倾向于React，做得彻底而清新</li></ul><p><strong>两者共同点</strong></p><ul><li>都支持组件化</li><li>都是数据驱动视图</li></ul><h4 id="什么时候用react-什么时候用vue" tabindex="-1"><a class="header-anchor" href="#什么时候用react-什么时候用vue"><span>什么时候用react，什么时候用vue</span></a></h4><p>react灵活性比较大，处理复杂业务时有更多技术方案的选择 。</p><p>vue提供了更丰富的api，实现功能简单，但也因api多会对灵活性有一定的限制。</p><p>做复杂度比较高的项目时使用react，面向用户端复杂度不高的使用vue 。</p>',1238),D=[r];function t(d,y){return a(),n("div",null,D)}const u=s(c,[["render",t],["__file","JavaScript小记.html.vue"]]),C=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/JavaScript%E5%B0%8F%E8%AE%B0.html","title":"JavaScript小记","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"😄 大标题目录","slug":"大标题目录","link":"#大标题目录","children":[]},{"level":2,"title":"JavaScript概述","slug":"javascript概述","link":"#javascript概述","children":[{"level":3,"title":"1、 一个完整的JavaScript实现应该由下列三个不同的部分组成","slug":"_1、-一个完整的javascript实现应该由下列三个不同的部分组成","link":"#_1、-一个完整的javascript实现应该由下列三个不同的部分组成","children":[]},{"level":3,"title":"2、JavaScript语言特性","slug":"_2、javascript语言特性","link":"#_2、javascript语言特性","children":[]},{"level":3,"title":"3、JavaScript的优缺点","slug":"_3、javascript的优缺点","link":"#_3、javascript的优缺点","children":[]},{"level":3,"title":"4、JS内置对象","slug":"_4、js内置对象","link":"#_4、js内置对象","children":[]}]},{"level":2,"title":"DOM","slug":"dom","link":"#dom","children":[{"level":3,"title":"1、jQuery对象和原生DOM对象互相转化","slug":"_1、jquery对象和原生dom对象互相转化","link":"#_1、jquery对象和原生dom对象互相转化","children":[]},{"level":3,"title":"2、原生javascript和jQuery操作DOM的对比总结","slug":"_2、原生javascript和jquery操作dom的对比总结","link":"#_2、原生javascript和jquery操作dom的对比总结","children":[]},{"level":3,"title":"3、Node节点","slug":"_3、node节点","link":"#_3、node节点","children":[]},{"level":3,"title":"4、DOM节点的attribute和property有何区别","slug":"_4、dom节点的attribute和property有何区别","link":"#_4、dom节点的attribute和property有何区别","children":[]},{"level":3,"title":"5、window.onload和DOMConentLoaded的区别","slug":"_5、window-onload和domconentloaded的区别","link":"#_5、window-onload和domconentloaded的区别","children":[]}]},{"level":2,"title":"BOM","slug":"bom","link":"#bom","children":[{"level":3,"title":"1、BOM属性对象方法","slug":"_1、bom属性对象方法","link":"#_1、bom属性对象方法","children":[]}]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"1、数据类型","slug":"_1、数据类型","link":"#_1、数据类型","children":[]},{"level":3,"title":"2、堆区和栈区","slug":"_2、堆区和栈区","link":"#_2、堆区和栈区","children":[]},{"level":3,"title":"3、JS中数据类型的判断（ typeof，instanceof，constructor，Object.prototype.toString.call() ）","slug":"_3、js中数据类型的判断-typeof-instanceof-constructor-object-prototype-tostring-call","link":"#_3、js中数据类型的判断-typeof-instanceof-constructor-object-prototype-tostring-call","children":[]},{"level":3,"title":"4、object和Object","slug":"_4、object和object","link":"#_4、object和object","children":[]},{"level":3,"title":"5、function和Function","slug":"_5、function和function","link":"#_5、function和function","children":[]},{"level":3,"title":"6、null和undefined的区别","slug":"_6、null和undefined的区别","link":"#_6、null和undefined的区别","children":[]}]},{"level":2,"title":"操作符","slug":"操作符","link":"#操作符","children":[{"level":3,"title":"1、&&和||","slug":"_1、-和","link":"#_1、-和","children":[]},{"level":3,"title":"2、只有当加法运算时，其中一方是字符串类型，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。","slug":"_2、只有当加法运算时-其中一方是字符串类型-就会把另一个也转为字符串类型。其他运算只要其中一方是数字-那么另一方就转为数字。","link":"#_2、只有当加法运算时-其中一方是字符串类型-就会把另一个也转为字符串类型。其他运算只要其中一方是数字-那么另一方就转为数字。","children":[]},{"level":3,"title":"3、NaN","slug":"_3、nan","link":"#_3、nan","children":[]},{"level":3,"title":"4、{} == false / {} == {}","slug":"_4、-false","link":"#_4、-false","children":[]}]},{"level":2,"title":"String","slug":"string","link":"#string","children":[{"level":3,"title":"1、String对象中slice()、substring()、substr()的用法与区别","slug":"_1、string对象中slice-、substring-、substr-的用法与区别","link":"#_1、string对象中slice-、substring-、substr-的用法与区别","children":[]},{"level":3,"title":"2、ES6中字符串的扩展","slug":"_2、es6中字符串的扩展","link":"#_2、es6中字符串的扩展","children":[]}]},{"level":2,"title":"Array","slug":"array","link":"#array","children":[{"level":3,"title":"1、Array对象中slice() 、splice（）的区别","slug":"_1、array对象中slice-、splice-的区别","link":"#_1、array对象中slice-、splice-的区别","children":[]},{"level":3,"title":"2、Map和ForEach的区别","slug":"_2、map和foreach的区别","link":"#_2、map和foreach的区别","children":[]},{"level":3,"title":"3、indexOf与search的区别","slug":"_3、indexof与search的区别","link":"#_3、indexof与search的区别","children":[]},{"level":3,"title":"4、查找数组","slug":"_4、查找数组","link":"#_4、查找数组","children":[]},{"level":3,"title":"5、Array.of","slug":"_5、array-of","link":"#_5、array-of","children":[]},{"level":3,"title":"6、Array.from()","slug":"_6、array-from","link":"#_6、array-from","children":[]},{"level":3,"title":"7、伪数组转化为数组","slug":"_7、伪数组转化为数组","link":"#_7、伪数组转化为数组","children":[]},{"level":3,"title":"8、清空数组的方法","slug":"_8、清空数组的方法","link":"#_8、清空数组的方法","children":[]},{"level":3,"title":"9、数组去重的方法","slug":"_9、数组去重的方法","link":"#_9、数组去重的方法","children":[]},{"level":3,"title":"10、数组拍平","slug":"_10、数组拍平","link":"#_10、数组拍平","children":[]},{"level":3,"title":"11、随机打乱数组","slug":"_11、随机打乱数组","link":"#_11、随机打乱数组","children":[]},{"level":3,"title":"12、根据数组中对象的某一个属性值进行排序","slug":"_12、根据数组中对象的某一个属性值进行排序","link":"#_12、根据数组中对象的某一个属性值进行排序","children":[]}]},{"level":2,"title":"Object","slug":"object","link":"#object","children":[{"level":3,"title":"⭐1、深拷贝和浅拷贝","slug":"_1、深拷贝和浅拷贝","link":"#_1、深拷贝和浅拷贝","children":[]},{"level":3,"title":"2、Object.assign()","slug":"_2、object-assign","link":"#_2、object-assign","children":[]}]},{"level":2,"title":"RexgExp等","slug":"rexgexp等","link":"#rexgexp等","children":[{"level":3,"title":"1、正则表达式","slug":"_1、正则表达式","link":"#_1、正则表达式","children":[]}]},{"level":2,"title":"Function","slug":"function","link":"#function","children":[{"level":3,"title":"1、形参和arguments","slug":"_1、形参和arguments","link":"#_1、形参和arguments","children":[]},{"level":3,"title":"2、在函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数","slug":"_2、在函数体内可以通过arguments对象来访问这个参数数组-从而获取传递给函数的每一个参数","link":"#_2、在函数体内可以通过arguments对象来访问这个参数数组-从而获取传递给函数的每一个参数","children":[]},{"level":3,"title":"3、立即执行函数","slug":"_3、立即执行函数","link":"#_3、立即执行函数","children":[]}]},{"level":2,"title":"⭐作用域","slug":"作用域","link":"#作用域","children":[{"level":3,"title":"1、变量提升","slug":"_1、变量提升","link":"#_1、变量提升","children":[]},{"level":3,"title":"2、this","slug":"_2、this","link":"#_2、this","children":[]},{"level":3,"title":"3、apply，call与bind","slug":"_3、apply-call与bind","link":"#_3、apply-call与bind","children":[]},{"level":3,"title":"4、作用域","slug":"_4、作用域","link":"#_4、作用域","children":[]},{"level":3,"title":"5、作用域链","slug":"_5、作用域链","link":"#_5、作用域链","children":[]}]},{"level":2,"title":"⭐闭包","slug":"闭包","link":"#闭包","children":[{"level":3,"title":"1、闭包以及实际应用","slug":"_1、闭包以及实际应用","link":"#_1、闭包以及实际应用","children":[]}]},{"level":2,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[{"level":3,"title":"1、代码回收规则","slug":"_1、代码回收规则","link":"#_1、代码回收规则","children":[]},{"level":3,"title":"2、内存溢出和内存泄漏","slug":"_2、内存溢出和内存泄漏","link":"#_2、内存溢出和内存泄漏","children":[]},{"level":3,"title":"3、V8下的垃圾回收机制","slug":"_3、v8下的垃圾回收机制","link":"#_3、v8下的垃圾回收机制","children":[]}]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[{"level":3,"title":"1、创建对象的方式","slug":"_1、创建对象的方式","link":"#_1、创建对象的方式","children":[]},{"level":3,"title":"2、new一个对象的过程","slug":"_2、new一个对象的过程","link":"#_2、new一个对象的过程","children":[]},{"level":3,"title":"3、删除对象","slug":"_3、删除对象","link":"#_3、删除对象","children":[]},{"level":3,"title":"4、in、hasOwnProperty、isPrototypeOf、Object.getPrototypeOf()","slug":"_4、in、hasownproperty、isprototypeof、object-getprototypeof","link":"#_4、in、hasownproperty、isprototypeof、object-getprototypeof","children":[]},{"level":3,"title":"5、toString方法、valueOf方法、Symbol.toPrimitive方法","slug":"_5、tostring方法、valueof方法、symbol-toprimitive方法","link":"#_5、tostring方法、valueof方法、symbol-toprimitive方法","children":[]},{"level":3,"title":"6、对象中属性的遍历","slug":"_6、对象中属性的遍历","link":"#_6、对象中属性的遍历","children":[]}]},{"level":2,"title":"原型","slug":"原型","link":"#原型","children":[{"level":3,"title":"1、5个原型规则","slug":"_1、5个原型规则","link":"#_1、5个原型规则","children":[]},{"level":3,"title":"⭐2、原型链","slug":"_2、原型链","link":"#_2、原型链","children":[]},{"level":3,"title":"3、一个原型链继承的应用实例","slug":"_3、一个原型链继承的应用实例","link":"#_3、一个原型链继承的应用实例","children":[]}]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[{"level":3,"title":"1、JavaScript继承的六种方式","slug":"_1、javascript继承的六种方式","link":"#_1、javascript继承的六种方式","children":[]}]},{"level":2,"title":"⭐事件","slug":"事件","link":"#事件","children":[{"level":3,"title":"1、事件捕获、事件冒泡、事件委托（代理）","slug":"_1、事件捕获、事件冒泡、事件委托-代理","link":"#_1、事件捕获、事件冒泡、事件委托-代理","children":[]},{"level":3,"title":"2、事件触发三个阶段","slug":"_2、事件触发三个阶段","link":"#_2、事件触发三个阶段","children":[]},{"level":3,"title":"3、事件对象","slug":"_3、事件对象","link":"#_3、事件对象","children":[]},{"level":3,"title":"4、mouseover和mouseenter两个事件的区别","slug":"_4、mouseover和mouseenter两个事件的区别","link":"#_4、mouseover和mouseenter两个事件的区别","children":[]}]},{"level":2,"title":"JSON","slug":"json","link":"#json","children":[{"level":3,"title":"1、JSON","slug":"_1、json","link":"#_1、json","children":[]}]},{"level":2,"title":"Ajax","slug":"ajax","link":"#ajax","children":[{"level":3,"title":"1、Ajax,jQuery ajax,axios和fetch的区别","slug":"_1、ajax-jquery-ajax-axios和fetch的区别","link":"#_1、ajax-jquery-ajax-axios和fetch的区别","children":[]},{"level":3,"title":"2、fetch发送post请求时，总是发送两次，第一次状态码204，第二次才成功","slug":"_2、fetch发送post请求时-总是发送两次-第一次状态码204-第二次才成功","link":"#_2、fetch发送post请求时-总是发送两次-第一次状态码204-第二次才成功","children":[]}]},{"level":2,"title":"⭐跨域","slug":"跨域","link":"#跨域","children":[{"level":3,"title":"1、跨域","slug":"_1、跨域","link":"#_1、跨域","children":[]}]},{"level":2,"title":"⭐异步","slug":"异步","link":"#异步","children":[{"level":3,"title":"1、defer和async","slug":"_1、defer和async","link":"#_1、defer和async","children":[]},{"level":3,"title":"2、单线程","slug":"_2、单线程","link":"#_2、单线程","children":[]},{"level":3,"title":"3、同步和异步","slug":"_3、同步和异步","link":"#_3、同步和异步","children":[]},{"level":3,"title":"⭐4、事件轮询（event-loop）","slug":"_4、事件轮询-event-loop","link":"#_4、事件轮询-event-loop","children":[]},{"level":3,"title":"⭐（待重新整理）5、微任务和宏任务","slug":"待重新整理-5、微任务和宏任务","link":"#待重新整理-5、微任务和宏任务","children":[]},{"level":3,"title":"6、Node.js的Event Loop","slug":"_6、node-js的event-loop","link":"#_6、node-js的event-loop","children":[]},{"level":3,"title":"7、处理异步的几种方法","slug":"_7、处理异步的几种方法","link":"#_7、处理异步的几种方法","children":[]}]},{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[{"level":3,"title":"1、模块化","slug":"_1、模块化","link":"#_1、模块化","children":[]},{"level":3,"title":"2、export和export default的区别","slug":"_2、export和export-default的区别","link":"#_2、export和export-default的区别","children":[]},{"level":3,"title":"3、webpack和gulp区别（模块化与流的区别）","slug":"_3、webpack和gulp区别-模块化与流的区别","link":"#_3、webpack和gulp区别-模块化与流的区别","children":[]}]},{"level":2,"title":"总结一下ES6常用功能","slug":"总结一下es6常用功能","link":"#总结一下es6常用功能","children":[{"level":3,"title":"1、let&const及块级作用域","slug":"_1、let-const及块级作用域","link":"#_1、let-const及块级作用域","children":[]},{"level":3,"title":"2、多行字符串/模板变量","slug":"_2、多行字符串-模板变量","link":"#_2、多行字符串-模板变量","children":[]},{"level":3,"title":"3、正则表达式","slug":"_3、正则表达式","link":"#_3、正则表达式","children":[]},{"level":3,"title":"4、函数默认参数","slug":"_4、函数默认参数","link":"#_4、函数默认参数","children":[]},{"level":3,"title":"⭐5、箭头函数","slug":"_5、箭头函数","link":"#_5、箭头函数","children":[]},{"level":3,"title":"6、扩展运算符的应用","slug":"_6、扩展运算符的应用","link":"#_6、扩展运算符的应用","children":[]},{"level":3,"title":"7、变量的解构赋值","slug":"_7、变量的解构赋值","link":"#_7、变量的解构赋值","children":[]},{"level":3,"title":"8、Symbol：表示独一无二的值","slug":"_8、symbol-表示独一无二的值","link":"#_8、symbol-表示独一无二的值","children":[]},{"level":3,"title":"9、Set的基本用法","slug":"_9、set的基本用法","link":"#_9、set的基本用法","children":[]},{"level":3,"title":"10、Map的基本用法","slug":"_10、map的基本用法","link":"#_10、map的基本用法","children":[]},{"level":3,"title":"11、Generator（生成器）","slug":"_11、generator-生成器","link":"#_11、generator-生成器","children":[]},{"level":3,"title":"12、Iterator（迭代器）","slug":"_12、iterator-迭代器","link":"#_12、iterator-迭代器","children":[]},{"level":3,"title":"13、class","slug":"_13、class","link":"#_13、class","children":[]},{"level":3,"title":"14、jquery-deferred（Promise中的.then语法）","slug":"_14、jquery-deferred-promise中的-then语法","link":"#_14、jquery-deferred-promise中的-then语法","children":[]},{"level":3,"title":"15、promise","slug":"_15、promise","link":"#_15、promise","children":[]},{"level":3,"title":"16、代理（Proxy）","slug":"_16、代理-proxy","link":"#_16、代理-proxy","children":[]},{"level":3,"title":"17、反射（Reflect）","slug":"_17、反射-reflect","link":"#_17、反射-reflect","children":[]},{"level":3,"title":"18、模块化","slug":"_18、模块化","link":"#_18、模块化","children":[]},{"level":3,"title":"19、字符串、数组、对象的扩展","slug":"_19、字符串、数组、对象的扩展","link":"#_19、字符串、数组、对象的扩展","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"1、获得一段范围内的随机数","slug":"_1、获得一段范围内的随机数","link":"#_1、获得一段范围内的随机数","children":[]},{"level":3,"title":"2、获取xxxx-xx-xx格式的日期","slug":"_2、获取xxxx-xx-xx格式的日期","link":"#_2、获取xxxx-xx-xx格式的日期","children":[]},{"level":3,"title":"3、将时间戳转化为自定义日期格式","slug":"_3、将时间戳转化为自定义日期格式","link":"#_3、将时间戳转化为自定义日期格式","children":[]},{"level":3,"title":"4、写一个能遍历对象和数组的通用forEach函数","slug":"_4、写一个能遍历对象和数组的通用foreach函数","link":"#_4、写一个能遍历对象和数组的通用foreach函数","children":[]},{"level":3,"title":"5、pwa","slug":"_5、pwa","link":"#_5、pwa","children":[]},{"level":3,"title":"6、**","slug":"_6、","link":"#_6、","children":[]},{"level":3,"title":"7、MVC和MVVM的区别","slug":"_7、mvc和mvvm的区别","link":"#_7、mvc和mvvm的区别","children":[]},{"level":3,"title":"8、vue react jquery的区别","slug":"_8、vue-react-jquery的区别","link":"#_8、vue-react-jquery的区别","children":[]}]}],"git":{"updatedTime":1724740884000,"contributors":[{"name":"csmSimona","email":"980715844@qq.com","commits":1}]},"filePathRelative":"前端基础汇总/JavaScript小记.md","readingTime":{"minutes":119.6,"words":35880}}');export{u as comp,C as data};
